// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Roovia.Data;

#nullable disable

namespace Roovia.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.Communication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("CommunicationChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CommunicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommunicationDirectionId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromEmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FromPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PropertyBeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyTenantId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedBeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityStringId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RelatedOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedPropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedTenantId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RelatedVendorId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ToEmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ToPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationChannelId");

                    b.HasIndex("CommunicationDirectionId");

                    b.HasIndex("PropertyBeneficiaryId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyOwnerId");

                    b.HasIndex("PropertyTenantId");

                    b.HasIndex("VendorId");

                    b.ToTable("Contact_Communications", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.ContactNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ContactNumberTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PropertyBeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyTenantId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityStringId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactNumberTypeId");

                    b.HasIndex("PropertyBeneficiaryId");

                    b.HasIndex("PropertyOwnerId");

                    b.HasIndex("PropertyTenantId");

                    b.HasIndex("VendorId");

                    b.HasIndex("RelatedEntityType", "RelatedEntityId", "IsPrimary")
                        .IsUnique()
                        .HasFilter("[IsPrimary] = 1 AND [RelatedEntityId] IS NOT NULL");

                    b.HasIndex("RelatedEntityType", "RelatedEntityStringId", "IsPrimary")
                        .IsUnique()
                        .HasFilter("[IsPrimary] = 1 AND [RelatedEntityStringId] IS NOT NULL");

                    b.ToTable("Contact_ContactNumbers", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int?>("PropertyBeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyTenantId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityStringId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PropertyBeneficiaryId");

                    b.HasIndex("PropertyOwnerId");

                    b.HasIndex("PropertyTenantId");

                    b.HasIndex("VendorId");

                    b.HasIndex("RelatedEntityType", "RelatedEntityId", "IsPrimary")
                        .IsUnique()
                        .HasFilter("[IsPrimary] = 1 AND [RelatedEntityId] IS NOT NULL");

                    b.HasIndex("RelatedEntityType", "RelatedEntityStringId", "IsPrimary")
                        .IsUnique()
                        .HasFilter("[IsPrimary] = 1 AND [RelatedEntityStringId] IS NOT NULL");

                    b.ToTable("Contact_Emails", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.EntityDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CdnFileMetadataId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("MaintenanceTicketId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PropertyBeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyInspectionId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyPaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyTenantId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DocumentStatusId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("MaintenanceTicketId");

                    b.HasIndex("PropertyBeneficiaryId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyInspectionId");

                    b.HasIndex("PropertyOwnerId");

                    b.HasIndex("PropertyPaymentId");

                    b.HasIndex("PropertyTenantId");

                    b.HasIndex("VendorId");

                    b.ToTable("Contact_EntityDocuments", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UploadedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MediaTypeId");

                    b.ToTable("Contact_Media", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int?>("MaintenanceTicketId")
                        .HasColumnType("int");

                    b.Property<int>("NoteTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyBeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyInspectionId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyPaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyTenantId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityStringId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MaintenanceTicketId");

                    b.HasIndex("NoteTypeId");

                    b.HasIndex("PropertyBeneficiaryId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyInspectionId");

                    b.HasIndex("PropertyOwnerId");

                    b.HasIndex("PropertyPaymentId");

                    b.HasIndex("PropertyTenantId");

                    b.HasIndex("VendorId");

                    b.ToTable("Contact_Notes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.NotificationPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationEventTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("OnlyDuringBusinessHours")
                        .HasColumnType("bit");

                    b.Property<string>("PreferredTimeOfDay")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PropertyBeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyTenantId")
                        .HasColumnType("int");

                    b.Property<bool>("PushEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityStringId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("SmsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<bool>("WebEnabled")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NotificationEventTypeId");

                    b.HasIndex("PropertyBeneficiaryId");

                    b.HasIndex("PropertyOwnerId");

                    b.HasIndex("PropertyTenantId");

                    b.HasIndex("VendorId");

                    b.ToTable("Contact_NotificationPreferences", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignedToUserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<int?>("MaintenanceTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("NotifyDaysBefore")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyBeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyTenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RecurrenceEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecurrenceFrequencyId")
                        .HasColumnType("int");

                    b.Property<int?>("RecurrenceInterval")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityStringId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ReminderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ReminderTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("SendNotification")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MaintenanceTicketId");

                    b.HasIndex("PropertyBeneficiaryId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyOwnerId");

                    b.HasIndex("PropertyTenantId");

                    b.HasIndex("RecurrenceFrequencyId");

                    b.HasIndex("ReminderStatusId");

                    b.HasIndex("ReminderTypeId");

                    b.HasIndex("VendorId");

                    b.ToTable("Contact_Reminders", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.AllocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_AllocationTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.BankNameType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DefaultBranchCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_BankNameTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.BeneficiaryPaymentStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_BeneficiaryPaymentStatusTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.BeneficiaryStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_BeneficiaryStatusTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.BeneficiaryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_BeneficiaryTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.CommissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_CommissionTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.CommunicationChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_CommunicationChannels", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.CommunicationDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_CommunicationDirections", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.ConditionLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ScoreValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_ConditionLevels", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.ContactNumberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_ContactNumberTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.DocumentAccessLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_DocumentAccessLevels", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.DocumentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_DocumentCategories", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.DocumentRequirementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_DocumentRequirementTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.DocumentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_DocumentStatuses", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_DocumentTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.EntityDocumentRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DocumentRequirementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DocumentRequirementTypeId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("EntityTypeId", "DocumentTypeId", "CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.ToTable("Lookup_EntityDocumentRequirements", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.EntityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SystemName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SystemName")
                        .IsUnique()
                        .HasFilter("[SystemName] IS NOT NULL");

                    b.ToTable("Lookup_EntityTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_ExpenseCategories", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.InspectionArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_InspectionAreas", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.InspectionStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_InspectionStatusTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.InspectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_InspectionTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.MaintenanceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_MaintenanceCategories", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.MaintenanceImageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_MaintenanceImageTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.MaintenancePriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ResponseTimeHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_MaintenancePriorities", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.MaintenanceStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_MaintenanceStatusTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.MediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_MediaTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.NoteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_NoteTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.NotificationEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemEvent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SystemName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SystemName")
                        .IsUnique()
                        .HasFilter("[SystemName] IS NOT NULL");

                    b.ToTable("Lookup_NotificationEventTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.NotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyTemplate")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NotificationEventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SmsTemplate")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationEventTypeId");

                    b.ToTable("Lookup_NotificationTemplates", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.PaymentFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DaysInterval")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_PaymentFrequencies", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ProcessingFeeFixed")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProcessingFeePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_PaymentMethods", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.PaymentRuleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_PaymentRuleTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.PaymentStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_PaymentStatusTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_PaymentTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.PropertyImageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_PropertyImageTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.PropertyOwnerStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_PropertyOwnerStatusTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.PropertyOwnerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_PropertyOwnerTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.PropertyStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_PropertyStatusTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_PropertyTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.RecurrenceFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DaysMultiplier")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_RecurrenceFrequencies", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.ReminderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_ReminderStatuses", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.ReminderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_ReminderTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.TenantStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_TenantStatusTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.TenantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_TenantTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.BeneficiaryPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BeneficiaryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PaymentAllocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("PaymentAllocationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Finance_BeneficiaryPayments", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.InspectionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("InspectionId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaintenanceNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("MaintenancePriorityId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresMaintenance")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("ImageId");

                    b.HasIndex("InspectionId");

                    b.HasIndex("MaintenancePriorityId");

                    b.ToTable("Inspect_InspectionItems", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.MaintenanceComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<int>("MaintenanceTicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceTicketId");

                    b.ToTable("Maint_MaintenanceComments", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.MaintenanceExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("MaintenanceTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptDocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MaintenanceTicketId");

                    b.HasIndex("ReceiptDocumentId");

                    b.HasIndex("VendorId");

                    b.ToTable("Maint_MaintenanceExpenses", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.MaintenanceTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ActualCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan?>("ActualDuration")
                        .HasColumnType("time");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AssignedToName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AssignedToUserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompletionNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("EstimatedCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan?>("EstimatedDuration")
                        .HasColumnType("time");

                    b.Property<int?>("InspectionId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IssueResolved")
                        .HasColumnType("bit");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresTenantAccess")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TenantNotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("TenantNotified")
                        .HasColumnType("bit");

                    b.Property<bool?>("TenantResponsible")
                        .HasColumnType("bit");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InspectionId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TenantId");

                    b.HasIndex("VendorId");

                    b.ToTable("Maint_MaintenanceTickets", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EmailSentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("NotificationEventTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecipientUserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("SmsSent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SmsSentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("NotificationEventTypeId");

                    b.ToTable("Contact_Notifications", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PaymentAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllocatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("AllocationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AllocationTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BeneficiaryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("AllocationTypeId");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Finance_PaymentAllocations", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PaymentRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllocationOrder")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("AutoAllocate")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("CompoundLateFees")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("FinalReminderDays")
                        .HasColumnType("int");

                    b.Property<int?>("FirstReminderDays")
                        .HasColumnType("int");

                    b.Property<int?>("GracePeriodDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LateFeeAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LateFeePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RuleTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondReminderDays")
                        .HasColumnType("int");

                    b.Property<bool>("SendReminders")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RuleTypeId");

                    b.ToTable("Finance_PaymentRules", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PaymentSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("AutoGenerate")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<int>("DaysBeforeDue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FrequencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastGeneratedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("ScheduleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TenantId");

                    b.ToTable("Finance_PaymentSchedules", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CommissionTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("CommissionValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CurrentLeaseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentTenantId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerRef")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasTenant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LeaseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeaseOriginalStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MainImageId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<bool>("PaymentsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("PaymentsVerify")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PropertyAccountBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PropertyCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RemovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RentalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceLevel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CommissionTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MainImageId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Data_Properties", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyBeneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Agent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BenStatusId")
                        .HasColumnType("int");

                    b.Property<int>("BenTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CommissionTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("CommissionValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerRefBeneficiary")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerRefProperty")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PropertyAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BenStatusId");

                    b.HasIndex("BenTypeId");

                    b.HasIndex("CommissionTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Data_PropertyBeneficiaries", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GeneralNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("InspectionCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("InspectionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("InspectorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InspectorUserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("NextInspectionDue")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OverallConditionId")
                        .HasColumnType("int");

                    b.Property<int?>("OverallRating")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("ReportDocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TenantName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("TenantPresent")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InspectionTypeId");

                    b.HasIndex("OverallConditionId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReportDocumentId");

                    b.HasIndex("StatusId");

                    b.ToTable("Inspect_PropertyInspections", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerRef")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PropertyOwnerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RemovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PropertyOwnerTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Data_PropertyOwners", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllocatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AllocationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("DaysLate")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAllocated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLate")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LateFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProcessingFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReceiptDocumentId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TenantId");

                    b.ToTable("Finance_PropertyPayments", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyTenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerRefProperty")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerRefTenant")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DebitDayOfMonth")
                        .HasColumnType("int");

                    b.Property<decimal?>("DepositAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DepositBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmergencyContactRelationship")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastInvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LeaseDocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LeaseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LeaseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MoveInDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MoveInInspectionCompleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MoveInInspectionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MoveOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RemovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ResponsibleAgent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ResponsibleUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TenantTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LeaseDocumentId");

                    b.HasIndex("MoveInInspectionId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TenantTypeId");

                    b.ToTable("Data_PropertyTenants", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasInsurance")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InsuranceExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsurancePolicyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPreferred")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Rating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("Specializations")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TotalJobs")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Maint_Vendors", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnAccessLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<int?>("ResponseTimeMs")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ActionType");

                    b.HasIndex("Timestamp");

                    b.ToTable("CDN_AccessLogs", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnBase64Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Base64Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FileMetadataId")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FileMetadataId")
                        .IsUnique();

                    b.ToTable("CDN_Base64Storage", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedFileTypes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CDN_Categories", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedFileTypes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableCaching")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxFileSizeMB")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CDN_Configurations", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnFileMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCount")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Checksum")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int?>("FolderId")
                        .HasColumnType("int");

                    b.Property<bool>("HasBase64Backup")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Url");

                    b.HasIndex("CategoryId", "FolderId");

                    b.ToTable("CDN_FileMetadata", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("CategoryId", "Path")
                        .IsUnique();

                    b.ToTable("CDN_Folders", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnUsageStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeleteCount")
                        .HasColumnType("int");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<int>("FileCount")
                        .HasColumnType("int");

                    b.Property<string>("RecordedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("StorageUsedBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("UploadCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Date", "CategoryId");

                    b.ToTable("CDN_UsageStatistics", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.ReportingModels.CustomReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Parameters")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CustomReports");
                });

            modelBuilder.Entity("Roovia.Models.ReportingModels.ReportDashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Configuration")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("LayoutColumns")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("ReportDashboards");
                });

            modelBuilder.Entity("Roovia.Models.ReportingModels.ReportDashboardWidget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoRefresh")
                        .HasColumnType("bit");

                    b.Property<string>("Configuration")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomReportId")
                        .HasColumnType("int");

                    b.Property<int>("DashboardId")
                        .HasColumnType("int");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GridColumn")
                        .HasColumnType("int");

                    b.Property<int>("GridHeight")
                        .HasColumnType("int");

                    b.Property<int>("GridRow")
                        .HasColumnType("int");

                    b.Property<int>("GridWidth")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastRefreshed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Parameters")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("RefreshInterval")
                        .HasColumnType("int");

                    b.Property<string>("StandardReportType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VisualizationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WidgetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomReportId");

                    b.HasIndex("DashboardId");

                    b.ToTable("ReportDashboardWidgets");
                });

            modelBuilder.Entity("Roovia.Models.ReportingModels.ReportExecutionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CdnFileMetadataId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("bit");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExecutedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ExecutionEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExecutionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("OutputFilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Parameters")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("RecipientEmails")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ReportScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("ReportType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RowCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ExecutedBy");

                    b.HasIndex("ReportScheduleId");

                    b.ToTable("ReportExecutionLogs");
                });

            modelBuilder.Entity("Roovia.Models.ReportingModels.ReportFrequencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DaysInterval")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ReportFrequencyTypes");
                });

            modelBuilder.Entity("Roovia.Models.ReportingModels.ReportSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomReportId")
                        .HasColumnType("int");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ExecutionTime")
                        .HasColumnType("time");

                    b.Property<string>("ExportFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("FrequencyTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastRunDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("NextRunDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Parameters")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("RecipientEmails")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StandardReportType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomReportId");

                    b.HasIndex("FrequencyTypeId");

                    b.ToTable("ReportSchedules");
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyMappingModels.BranchStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_BranchStatusTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyMappingModels.CompanyStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_CompanyStatusTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyMappingModels.NotificationChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_NotificationChannels", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyMappingModels.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_NotificationTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyMappingModels.PermissionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_PermissionCategories", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyMappingModels.RoleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_RoleTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyMappingModels.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingCycleDays")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("HasTrialPeriod")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxBranches")
                        .HasColumnType("int");

                    b.Property<int?>("MaxProperties")
                        .HasColumnType("int");

                    b.Property<int?>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TrialPeriodDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_SubscriptionPlans", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyMappingModels.ThemeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CssVariables")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDarkTheme")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_ThemeTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyMappingModels.TwoFactorMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_TwoFactorMethods", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyMappingModels.UserStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Lookup_UserStatusTypes", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwoFactorRequired")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastLoginFailureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastLoginIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LoginFailureCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PreferredTwoFactorMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfilePictureId")
                        .HasColumnType("int");

                    b.Property<string>("RemovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequireChangePasswordOnLogin")
                        .HasColumnType("bit");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserPreferences")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfilePictureId");

                    b.HasIndex("StatusId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeadOffice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int?>("MainLogoId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxProperties")
                        .HasColumnType("int");

                    b.Property<int?>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RemovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Settings")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MainLogoId");

                    b.HasIndex("StatusId");

                    b.ToTable("AspNetBranches", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrialPeriod")
                        .HasColumnType("bit");

                    b.Property<int?>("MainLogoId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxBranches")
                        .HasColumnType("int");

                    b.Property<int?>("MaxProperties")
                        .HasColumnType("int");

                    b.Property<int?>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RemovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Settings")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubscriptionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubscriptionPlanId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubscriptionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("MainLogoId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("AspNetCompanies", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AspNetPermissions", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPreset")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.ToTable("AspNetCustomRoles", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRolePermissions", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.UserPermissionOverride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserPermissionOverrides", (string)null);
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.UserRoleAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoleAssignments", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.Communication", b =>
                {
                    b.HasOne("Roovia.Models.BusinessMappingModels.CommunicationChannel", "CommunicationChannel")
                        .WithMany()
                        .HasForeignKey("CommunicationChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.CommunicationDirection", "CommunicationDirection")
                        .WithMany()
                        .HasForeignKey("CommunicationDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.PropertyBeneficiary", null)
                        .WithMany("Communications")
                        .HasForeignKey("PropertyBeneficiaryId");

                    b.HasOne("Roovia.Models.BusinessModels.Property", null)
                        .WithMany("Communications")
                        .HasForeignKey("PropertyId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyOwner", null)
                        .WithMany("Communications")
                        .HasForeignKey("PropertyOwnerId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyTenant", null)
                        .WithMany("Communications")
                        .HasForeignKey("PropertyTenantId");

                    b.HasOne("Roovia.Models.BusinessModels.Vendor", null)
                        .WithMany("Communications")
                        .HasForeignKey("VendorId");

                    b.Navigation("CommunicationChannel");

                    b.Navigation("CommunicationDirection");
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.ContactNumber", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", null)
                        .WithMany("ContactNumbers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Roovia.Models.UserCompanyModels.Branch", null)
                        .WithMany("ContactNumbers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Roovia.Models.UserCompanyModels.Company", null)
                        .WithMany("ContactNumbers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Roovia.Models.BusinessMappingModels.ContactNumberType", "ContactNumberType")
                        .WithMany()
                        .HasForeignKey("ContactNumberTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.PropertyBeneficiary", null)
                        .WithMany("ContactNumbers")
                        .HasForeignKey("PropertyBeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Roovia.Models.BusinessModels.PropertyOwner", null)
                        .WithMany("ContactNumbers")
                        .HasForeignKey("PropertyOwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Roovia.Models.BusinessModels.PropertyTenant", null)
                        .WithMany("ContactNumbers")
                        .HasForeignKey("PropertyTenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Roovia.Models.BusinessModels.Vendor", null)
                        .WithMany("ContactNumbers")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ContactNumberType");
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.Email", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", null)
                        .WithMany("EmailAddresses")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Roovia.Models.UserCompanyModels.Branch", null)
                        .WithMany("EmailAddresses")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Roovia.Models.UserCompanyModels.Company", null)
                        .WithMany("EmailAddresses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Roovia.Models.BusinessModels.PropertyBeneficiary", null)
                        .WithMany("EmailAddresses")
                        .HasForeignKey("PropertyBeneficiaryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Roovia.Models.BusinessModels.PropertyOwner", null)
                        .WithMany("EmailAddresses")
                        .HasForeignKey("PropertyOwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Roovia.Models.BusinessModels.PropertyTenant", null)
                        .WithMany("EmailAddresses")
                        .HasForeignKey("PropertyTenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Roovia.Models.BusinessModels.Vendor", null)
                        .WithMany("EmailAddresses")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.EntityDocument", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", null)
                        .WithMany("Documents")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Roovia.Models.UserCompanyModels.Branch", null)
                        .WithMany("Documents")
                        .HasForeignKey("BranchId");

                    b.HasOne("Roovia.Models.UserCompanyModels.Company", null)
                        .WithMany("Documents")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Roovia.Models.BusinessMappingModels.DocumentStatus", "DocumentStatus")
                        .WithMany()
                        .HasForeignKey("DocumentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.MaintenanceTicket", null)
                        .WithMany("Documents")
                        .HasForeignKey("MaintenanceTicketId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyBeneficiary", null)
                        .WithMany("Documents")
                        .HasForeignKey("PropertyBeneficiaryId");

                    b.HasOne("Roovia.Models.BusinessModels.Property", null)
                        .WithMany("Documents")
                        .HasForeignKey("PropertyId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyInspection", null)
                        .WithMany("Documents")
                        .HasForeignKey("PropertyInspectionId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyOwner", null)
                        .WithMany("Documents")
                        .HasForeignKey("PropertyOwnerId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyPayment", null)
                        .WithMany("Documents")
                        .HasForeignKey("PropertyPaymentId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyTenant", null)
                        .WithMany("Documents")
                        .HasForeignKey("PropertyTenantId");

                    b.HasOne("Roovia.Models.BusinessModels.Vendor", null)
                        .WithMany("Documents")
                        .HasForeignKey("VendorId");

                    b.Navigation("DocumentStatus");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.Media", b =>
                {
                    b.HasOne("Roovia.Models.BusinessMappingModels.MediaType", "MediaType")
                        .WithMany()
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.Note", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", null)
                        .WithMany("Notes")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Roovia.Models.UserCompanyModels.Branch", null)
                        .WithMany("Notes")
                        .HasForeignKey("BranchId");

                    b.HasOne("Roovia.Models.UserCompanyModels.Company", null)
                        .WithMany("Notes")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Roovia.Models.BusinessModels.MaintenanceTicket", null)
                        .WithMany("Notes")
                        .HasForeignKey("MaintenanceTicketId");

                    b.HasOne("Roovia.Models.BusinessMappingModels.NoteType", "NoteType")
                        .WithMany()
                        .HasForeignKey("NoteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.PropertyBeneficiary", null)
                        .WithMany("Notes")
                        .HasForeignKey("PropertyBeneficiaryId");

                    b.HasOne("Roovia.Models.BusinessModels.Property", null)
                        .WithMany("Notes")
                        .HasForeignKey("PropertyId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyInspection", null)
                        .WithMany("Notes")
                        .HasForeignKey("PropertyInspectionId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyOwner", null)
                        .WithMany("Notes")
                        .HasForeignKey("PropertyOwnerId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyPayment", null)
                        .WithMany("Notes")
                        .HasForeignKey("PropertyPaymentId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyTenant", null)
                        .WithMany("Notes")
                        .HasForeignKey("PropertyTenantId");

                    b.HasOne("Roovia.Models.BusinessModels.Vendor", null)
                        .WithMany("Notes")
                        .HasForeignKey("VendorId");

                    b.Navigation("NoteType");
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.NotificationPreference", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", null)
                        .WithMany("NotificationPreferences")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Roovia.Models.UserCompanyModels.Branch", null)
                        .WithMany("NotificationPreferences")
                        .HasForeignKey("BranchId");

                    b.HasOne("Roovia.Models.UserCompanyModels.Company", null)
                        .WithMany("NotificationPreferences")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Roovia.Models.BusinessMappingModels.NotificationEventType", "NotificationEventType")
                        .WithMany()
                        .HasForeignKey("NotificationEventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.PropertyBeneficiary", null)
                        .WithMany("NotificationPreferences")
                        .HasForeignKey("PropertyBeneficiaryId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyOwner", null)
                        .WithMany("NotificationPreferences")
                        .HasForeignKey("PropertyOwnerId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyTenant", null)
                        .WithMany("NotificationPreferences")
                        .HasForeignKey("PropertyTenantId");

                    b.HasOne("Roovia.Models.BusinessModels.Vendor", null)
                        .WithMany("NotificationPreferences")
                        .HasForeignKey("VendorId");

                    b.Navigation("NotificationEventType");
                });

            modelBuilder.Entity("Roovia.Models.BusinessHelperModels.Reminder", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", null)
                        .WithMany("Reminders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Roovia.Models.BusinessModels.MaintenanceTicket", null)
                        .WithMany("Reminders")
                        .HasForeignKey("MaintenanceTicketId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyBeneficiary", null)
                        .WithMany("Reminders")
                        .HasForeignKey("PropertyBeneficiaryId");

                    b.HasOne("Roovia.Models.BusinessModels.Property", null)
                        .WithMany("Reminders")
                        .HasForeignKey("PropertyId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyOwner", null)
                        .WithMany("Reminders")
                        .HasForeignKey("PropertyOwnerId");

                    b.HasOne("Roovia.Models.BusinessModels.PropertyTenant", null)
                        .WithMany("Reminders")
                        .HasForeignKey("PropertyTenantId");

                    b.HasOne("Roovia.Models.BusinessMappingModels.RecurrenceFrequency", "RecurrenceFrequency")
                        .WithMany()
                        .HasForeignKey("RecurrenceFrequencyId");

                    b.HasOne("Roovia.Models.BusinessMappingModels.ReminderStatus", "ReminderStatus")
                        .WithMany()
                        .HasForeignKey("ReminderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.ReminderType", "ReminderType")
                        .WithMany()
                        .HasForeignKey("ReminderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.Vendor", null)
                        .WithMany("Reminders")
                        .HasForeignKey("VendorId");

                    b.Navigation("RecurrenceFrequency");

                    b.Navigation("ReminderStatus");

                    b.Navigation("ReminderType");
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.EntityDocumentRequirement", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Company", null)
                        .WithMany("DocumentRequirements")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Roovia.Models.BusinessMappingModels.DocumentRequirementType", "DocumentRequirementType")
                        .WithMany()
                        .HasForeignKey("DocumentRequirementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentRequirementType");

                    b.Navigation("DocumentType");

                    b.Navigation("EntityType");
                });

            modelBuilder.Entity("Roovia.Models.BusinessMappingModels.NotificationTemplate", b =>
                {
                    b.HasOne("Roovia.Models.BusinessMappingModels.NotificationEventType", "NotificationEventType")
                        .WithMany()
                        .HasForeignKey("NotificationEventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationEventType");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.BeneficiaryPayment", b =>
                {
                    b.HasOne("Roovia.Models.BusinessModels.PropertyBeneficiary", "Beneficiary")
                        .WithMany("Payments")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.PaymentAllocation", "PaymentAllocation")
                        .WithMany()
                        .HasForeignKey("PaymentAllocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Roovia.Models.BusinessMappingModels.BeneficiaryPaymentStatusType", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beneficiary");

                    b.Navigation("PaymentAllocation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.InspectionItem", b =>
                {
                    b.HasOne("Roovia.Models.BusinessMappingModels.InspectionArea", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.ConditionLevel", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnFileMetadata", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Roovia.Models.BusinessModels.PropertyInspection", "Inspection")
                        .WithMany("InspectionItems")
                        .HasForeignKey("InspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.MaintenancePriority", "MaintenancePriority")
                        .WithMany()
                        .HasForeignKey("MaintenancePriorityId");

                    b.Navigation("Area");

                    b.Navigation("Condition");

                    b.Navigation("Image");

                    b.Navigation("Inspection");

                    b.Navigation("MaintenancePriority");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.MaintenanceComment", b =>
                {
                    b.HasOne("Roovia.Models.BusinessModels.MaintenanceTicket", "MaintenanceTicket")
                        .WithMany("Comments")
                        .HasForeignKey("MaintenanceTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceTicket");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.MaintenanceExpense", b =>
                {
                    b.HasOne("Roovia.Models.BusinessMappingModels.ExpenseCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.MaintenanceTicket", "MaintenanceTicket")
                        .WithMany("Expenses")
                        .HasForeignKey("MaintenanceTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnFileMetadata", "ReceiptDocument")
                        .WithMany()
                        .HasForeignKey("ReceiptDocumentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Roovia.Models.BusinessModels.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("MaintenanceTicket");

                    b.Navigation("ReceiptDocument");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.MaintenanceTicket", b =>
                {
                    b.HasOne("Roovia.Models.BusinessMappingModels.MaintenanceCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.PropertyInspection", "Inspection")
                        .WithMany("MaintenanceTickets")
                        .HasForeignKey("InspectionId");

                    b.HasOne("Roovia.Models.BusinessMappingModels.MaintenancePriority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.Property", "Property")
                        .WithMany("MaintenanceTickets")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.MaintenanceStatusType", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.PropertyTenant", "Tenant")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Roovia.Models.BusinessModels.Vendor", "Vendor")
                        .WithMany("MaintenanceTickets")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Inspection");

                    b.Navigation("Priority");

                    b.Navigation("Property");

                    b.Navigation("Status");

                    b.Navigation("Tenant");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.Notification", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", null)
                        .WithMany("Notifications")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Roovia.Models.BusinessMappingModels.NotificationEventType", "NotificationEventType")
                        .WithMany()
                        .HasForeignKey("NotificationEventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationEventType");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PaymentAllocation", b =>
                {
                    b.HasOne("Roovia.Models.BusinessMappingModels.AllocationType", "AllocationType")
                        .WithMany()
                        .HasForeignKey("AllocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.PropertyBeneficiary", "Beneficiary")
                        .WithMany()
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Roovia.Models.BusinessModels.PropertyPayment", "Payment")
                        .WithMany("Allocations")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllocationType");

                    b.Navigation("Beneficiary");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PaymentRule", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.PaymentRuleType", "RuleType")
                        .WithMany()
                        .HasForeignKey("RuleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("RuleType");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PaymentSchedule", b =>
                {
                    b.HasOne("Roovia.Models.BusinessMappingModels.PaymentFrequency", "Frequency")
                        .WithMany()
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.PropertyTenant", "Tenant")
                        .WithMany("PaymentSchedules")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Frequency");

                    b.Navigation("Property");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.Property", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Roovia.Models.BusinessMappingModels.CommissionType", "CommissionType")
                        .WithMany()
                        .HasForeignKey("CommissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnFileMetadata", "MainImage")
                        .WithMany()
                        .HasForeignKey("MainImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Roovia.Models.BusinessModels.PropertyOwner", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.PropertyStatusType", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Roovia.Models.BusinessHelperModels.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PropertyId")
                                .HasColumnType("int");

                            b1.Property<string>("BuildingName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("ComplexName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("DeliveryInstructions")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("Floor")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("GateCode")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<bool>("IsResidential")
                                .HasColumnType("bit");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Province")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Suburb")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("UnitNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.HasKey("PropertyId");

                            b1.ToTable("Data_Properties");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("CommissionType");

                    b.Navigation("Company");

                    b.Navigation("MainImage");

                    b.Navigation("Owner");

                    b.Navigation("PropertyType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyBeneficiary", b =>
                {
                    b.HasOne("Roovia.Models.BusinessMappingModels.BeneficiaryStatusType", "BenStatus")
                        .WithMany()
                        .HasForeignKey("BenStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.BeneficiaryType", "BenType")
                        .WithMany()
                        .HasForeignKey("BenTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.CommissionType", "CommissionType")
                        .WithMany()
                        .HasForeignKey("CommissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.Property", "Property")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Roovia.Models.BusinessHelperModels.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PropertyBeneficiaryId")
                                .HasColumnType("int");

                            b1.Property<string>("BuildingName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("ComplexName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("DeliveryInstructions")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("Floor")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("GateCode")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<bool>("IsResidential")
                                .HasColumnType("bit");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Province")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Suburb")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("UnitNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.HasKey("PropertyBeneficiaryId");

                            b1.ToTable("Data_PropertyBeneficiaries");

                            b1.WithOwner()
                                .HasForeignKey("PropertyBeneficiaryId");
                        });

                    b.OwnsOne("Roovia.Models.BusinessHelperModels.BankAccount", "BankAccount", b1 =>
                        {
                            b1.Property<int>("PropertyBeneficiaryId")
                                .HasColumnType("int");

                            b1.Property<string>("AccountNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("AccountType")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int?>("BankNameId")
                                .HasColumnType("int");

                            b1.Property<string>("BranchCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.HasKey("PropertyBeneficiaryId");

                            b1.HasIndex("BankNameId");

                            b1.ToTable("Data_PropertyBeneficiaries");

                            b1.HasOne("Roovia.Models.BusinessMappingModels.BankNameType", "BankName")
                                .WithMany()
                                .HasForeignKey("BankNameId");

                            b1.WithOwner()
                                .HasForeignKey("PropertyBeneficiaryId");

                            b1.Navigation("BankName");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BankAccount")
                        .IsRequired();

                    b.Navigation("BenStatus");

                    b.Navigation("BenType");

                    b.Navigation("CommissionType");

                    b.Navigation("Company");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyInspection", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.InspectionType", "InspectionType")
                        .WithMany()
                        .HasForeignKey("InspectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.ConditionLevel", "OverallCondition")
                        .WithMany()
                        .HasForeignKey("OverallConditionId");

                    b.HasOne("Roovia.Models.BusinessModels.Property", "Property")
                        .WithMany("Inspections")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnFileMetadata", "ReportDocument")
                        .WithMany()
                        .HasForeignKey("ReportDocumentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Roovia.Models.BusinessMappingModels.InspectionStatusType", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("InspectionType");

                    b.Navigation("OverallCondition");

                    b.Navigation("Property");

                    b.Navigation("ReportDocument");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyOwner", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.PropertyOwnerType", "OwnerType")
                        .WithMany()
                        .HasForeignKey("PropertyOwnerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.PropertyOwnerStatusType", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Roovia.Models.BusinessHelperModels.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PropertyOwnerId")
                                .HasColumnType("int");

                            b1.Property<string>("BuildingName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("ComplexName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("DeliveryInstructions")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("Floor")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("GateCode")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<bool>("IsResidential")
                                .HasColumnType("bit");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Province")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Suburb")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("UnitNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.HasKey("PropertyOwnerId");

                            b1.ToTable("Data_PropertyOwners");

                            b1.WithOwner()
                                .HasForeignKey("PropertyOwnerId");
                        });

                    b.OwnsOne("Roovia.Models.BusinessHelperModels.BankAccount", "BankAccount", b1 =>
                        {
                            b1.Property<int>("PropertyOwnerId")
                                .HasColumnType("int");

                            b1.Property<string>("AccountNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("AccountType")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int?>("BankNameId")
                                .HasColumnType("int");

                            b1.Property<string>("BranchCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.HasKey("PropertyOwnerId");

                            b1.HasIndex("BankNameId");

                            b1.ToTable("Data_PropertyOwners");

                            b1.HasOne("Roovia.Models.BusinessMappingModels.BankNameType", "BankName")
                                .WithMany()
                                .HasForeignKey("BankNameId");

                            b1.WithOwner()
                                .HasForeignKey("PropertyOwnerId");

                            b1.Navigation("BankName");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BankAccount")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("OwnerType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyPayment", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("Roovia.Models.BusinessMappingModels.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.Property", "Property")
                        .WithMany("Payments")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnFileMetadata", "ReceiptDocument")
                        .WithMany()
                        .HasForeignKey("ReceiptDocumentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Roovia.Models.BusinessMappingModels.PaymentStatusType", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessModels.PropertyTenant", "Tenant")
                        .WithMany("Payments")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentType");

                    b.Navigation("Property");

                    b.Navigation("ReceiptDocument");

                    b.Navigation("Status");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyTenant", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnFileMetadata", "LeaseDocument")
                        .WithMany()
                        .HasForeignKey("LeaseDocumentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Roovia.Models.BusinessModels.PropertyInspection", "MoveInInspection")
                        .WithMany()
                        .HasForeignKey("MoveInInspectionId");

                    b.HasOne("Roovia.Models.BusinessModels.Property", "Property")
                        .WithMany("Tenants")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.TenantStatusType", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.BusinessMappingModels.TenantType", "TenantType")
                        .WithMany()
                        .HasForeignKey("TenantTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Roovia.Models.BusinessHelperModels.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PropertyTenantId")
                                .HasColumnType("int");

                            b1.Property<string>("BuildingName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("ComplexName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("DeliveryInstructions")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("Floor")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("GateCode")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<bool>("IsResidential")
                                .HasColumnType("bit");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Province")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Suburb")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("UnitNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.HasKey("PropertyTenantId");

                            b1.ToTable("Data_PropertyTenants");

                            b1.WithOwner()
                                .HasForeignKey("PropertyTenantId");
                        });

                    b.OwnsOne("Roovia.Models.BusinessHelperModels.BankAccount", "BankAccount", b1 =>
                        {
                            b1.Property<int>("PropertyTenantId")
                                .HasColumnType("int");

                            b1.Property<string>("AccountNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("AccountType")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int?>("BankNameId")
                                .HasColumnType("int");

                            b1.Property<string>("BranchCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.HasKey("PropertyTenantId");

                            b1.HasIndex("BankNameId");

                            b1.ToTable("Data_PropertyTenants");

                            b1.HasOne("Roovia.Models.BusinessMappingModels.BankNameType", "BankName")
                                .WithMany()
                                .HasForeignKey("BankNameId");

                            b1.WithOwner()
                                .HasForeignKey("PropertyTenantId");

                            b1.Navigation("BankName");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BankAccount")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("LeaseDocument");

                    b.Navigation("MoveInInspection");

                    b.Navigation("Property");

                    b.Navigation("Status");

                    b.Navigation("TenantType");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.Vendor", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Roovia.Models.BusinessHelperModels.Address", "Address", b1 =>
                        {
                            b1.Property<int>("VendorId")
                                .HasColumnType("int");

                            b1.Property<string>("BuildingName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("ComplexName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("DeliveryInstructions")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("Floor")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("GateCode")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<bool>("IsResidential")
                                .HasColumnType("bit");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Province")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Suburb")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("UnitNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.HasKey("VendorId");

                            b1.ToTable("Maint_Vendors");

                            b1.WithOwner()
                                .HasForeignKey("VendorId");
                        });

                    b.OwnsOne("Roovia.Models.BusinessHelperModels.BankAccount", "BankAccount", b1 =>
                        {
                            b1.Property<int>("VendorId")
                                .HasColumnType("int");

                            b1.Property<string>("AccountNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("AccountType")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int?>("BankNameId")
                                .HasColumnType("int");

                            b1.Property<string>("BranchCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.HasKey("VendorId");

                            b1.HasIndex("BankNameId");

                            b1.ToTable("Maint_Vendors");

                            b1.HasOne("Roovia.Models.BusinessMappingModels.BankNameType", "BankName")
                                .WithMany()
                                .HasForeignKey("BankNameId");

                            b1.WithOwner()
                                .HasForeignKey("VendorId");

                            b1.Navigation("BankName");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BankAccount")
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnBase64Storage", b =>
                {
                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnFileMetadata", "FileMetadata")
                        .WithOne("Base64Storage")
                        .HasForeignKey("Roovia.Models.ProjectCdnConfigModels.CdnBase64Storage", "FileMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileMetadata");
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnFileMetadata", b =>
                {
                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnCategory", "Category")
                        .WithMany("Files")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnFolder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnFolder", b =>
                {
                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnCategory", "Category")
                        .WithMany("Folders")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnFolder", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnUsageStatistic", b =>
                {
                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Roovia.Models.ReportingModels.CustomReport", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Company");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Roovia.Models.ReportingModels.ReportDashboard", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("CreatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Roovia.Models.ReportingModels.ReportDashboardWidget", b =>
                {
                    b.HasOne("Roovia.Models.ReportingModels.CustomReport", "CustomReport")
                        .WithMany()
                        .HasForeignKey("CustomReportId");

                    b.HasOne("Roovia.Models.ReportingModels.ReportDashboard", "Dashboard")
                        .WithMany("Widgets")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomReport");

                    b.Navigation("Dashboard");
                });

            modelBuilder.Entity("Roovia.Models.ReportingModels.ReportExecutionLog", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", "ExecutedByUser")
                        .WithMany()
                        .HasForeignKey("ExecutedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.ReportingModels.ReportSchedule", "ReportSchedule")
                        .WithMany()
                        .HasForeignKey("ReportScheduleId");

                    b.Navigation("Company");

                    b.Navigation("ExecutedByUser");

                    b.Navigation("ReportSchedule");
                });

            modelBuilder.Entity("Roovia.Models.ReportingModels.ReportSchedule", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.ReportingModels.CustomReport", "CustomReport")
                        .WithMany()
                        .HasForeignKey("CustomReportId");

                    b.HasOne("Roovia.Models.ReportingModels.ReportFrequencyType", "FrequencyType")
                        .WithMany()
                        .HasForeignKey("FrequencyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CustomReport");

                    b.Navigation("FrequencyType");
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.ApplicationUser", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnFileMetadata", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Roovia.Models.UserCompanyMappingModels.UserStatusType", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("ProfilePicture");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.Branch", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnFileMetadata", "MainLogo")
                        .WithMany()
                        .HasForeignKey("MainLogoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Roovia.Models.UserCompanyMappingModels.BranchStatusType", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.OwnsOne("Roovia.Models.BusinessHelperModels.Address", "Address", b1 =>
                        {
                            b1.Property<int>("BranchId")
                                .HasColumnType("int");

                            b1.Property<string>("BuildingName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("ComplexName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("DeliveryInstructions")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("Floor")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("GateCode")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<bool>("IsResidential")
                                .HasColumnType("bit");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Province")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Suburb")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("UnitNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.HasKey("BranchId");

                            b1.ToTable("AspNetBranches");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");
                        });

                    b.OwnsOne("Roovia.Models.BusinessHelperModels.BankAccount", "BankAccount", b1 =>
                        {
                            b1.Property<int>("BranchId")
                                .HasColumnType("int");

                            b1.Property<string>("AccountNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("AccountType")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int?>("BankNameId")
                                .HasColumnType("int");

                            b1.Property<string>("BranchCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.HasKey("BranchId");

                            b1.HasIndex("BankNameId");

                            b1.ToTable("AspNetBranches");

                            b1.HasOne("Roovia.Models.BusinessMappingModels.BankNameType", "BankName")
                                .WithMany()
                                .HasForeignKey("BankNameId");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");

                            b1.Navigation("BankName");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BankAccount")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("MainLogo");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.Company", b =>
                {
                    b.HasOne("Roovia.Models.ProjectCdnConfigModels.CdnFileMetadata", "MainLogo")
                        .WithMany()
                        .HasForeignKey("MainLogoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Roovia.Models.UserCompanyMappingModels.CompanyStatusType", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Roovia.Models.UserCompanyMappingModels.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId");

                    b.OwnsOne("Roovia.Models.BusinessHelperModels.Address", "Address", b1 =>
                        {
                            b1.Property<int>("CompanyId")
                                .HasColumnType("int");

                            b1.Property<string>("BuildingName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("ComplexName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Country")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("DeliveryInstructions")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<string>("Floor")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("GateCode")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<bool>("IsResidential")
                                .HasColumnType("bit");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Province")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Suburb")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("UnitNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.HasKey("CompanyId");

                            b1.ToTable("AspNetCompanies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("Roovia.Models.BusinessHelperModels.BankAccount", "BankAccount", b1 =>
                        {
                            b1.Property<int>("CompanyId")
                                .HasColumnType("int");

                            b1.Property<string>("AccountNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("AccountType")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int?>("BankNameId")
                                .HasColumnType("int");

                            b1.Property<string>("BranchCode")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.HasKey("CompanyId");

                            b1.HasIndex("BankNameId");

                            b1.ToTable("AspNetCompanies");

                            b1.HasOne("Roovia.Models.BusinessMappingModels.BankNameType", "BankName")
                                .WithMany()
                                .HasForeignKey("BankNameId");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");

                            b1.Navigation("BankName");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BankAccount")
                        .IsRequired();

                    b.Navigation("MainLogo");

                    b.Navigation("Status");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.Role", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("Roovia.Models.UserCompanyModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Branch");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.RolePermission", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.UserCompanyModels.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.UserPermissionOverride", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Permission", "Permission")
                        .WithMany("UserPermissionOverrides")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", "User")
                        .WithMany("PermissionOverrides")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.UserRoleAssignment", b =>
                {
                    b.HasOne("Roovia.Models.UserCompanyModels.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Roovia.Models.UserCompanyModels.ApplicationUser", "User")
                        .WithMany("CustomRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.MaintenanceTicket", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Documents");

                    b.Navigation("Expenses");

                    b.Navigation("Notes");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.Property", b =>
                {
                    b.Navigation("Beneficiaries");

                    b.Navigation("Communications");

                    b.Navigation("Documents");

                    b.Navigation("Inspections");

                    b.Navigation("MaintenanceTickets");

                    b.Navigation("Notes");

                    b.Navigation("Payments");

                    b.Navigation("Reminders");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyBeneficiary", b =>
                {
                    b.Navigation("Communications");

                    b.Navigation("ContactNumbers");

                    b.Navigation("Documents");

                    b.Navigation("EmailAddresses");

                    b.Navigation("Notes");

                    b.Navigation("NotificationPreferences");

                    b.Navigation("Payments");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyInspection", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("InspectionItems");

                    b.Navigation("MaintenanceTickets");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyOwner", b =>
                {
                    b.Navigation("Communications");

                    b.Navigation("ContactNumbers");

                    b.Navigation("Documents");

                    b.Navigation("EmailAddresses");

                    b.Navigation("Notes");

                    b.Navigation("NotificationPreferences");

                    b.Navigation("Properties");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyPayment", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("Documents");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.PropertyTenant", b =>
                {
                    b.Navigation("Communications");

                    b.Navigation("ContactNumbers");

                    b.Navigation("Documents");

                    b.Navigation("EmailAddresses");

                    b.Navigation("MaintenanceRequests");

                    b.Navigation("Notes");

                    b.Navigation("NotificationPreferences");

                    b.Navigation("PaymentSchedules");

                    b.Navigation("Payments");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Roovia.Models.BusinessModels.Vendor", b =>
                {
                    b.Navigation("Communications");

                    b.Navigation("ContactNumbers");

                    b.Navigation("Documents");

                    b.Navigation("EmailAddresses");

                    b.Navigation("MaintenanceTickets");

                    b.Navigation("Notes");

                    b.Navigation("NotificationPreferences");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnCategory", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Folders");
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnFileMetadata", b =>
                {
                    b.Navigation("Base64Storage");
                });

            modelBuilder.Entity("Roovia.Models.ProjectCdnConfigModels.CdnFolder", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("Roovia.Models.ReportingModels.ReportDashboard", b =>
                {
                    b.Navigation("Widgets");
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.ApplicationUser", b =>
                {
                    b.Navigation("ContactNumbers");

                    b.Navigation("CustomRoles");

                    b.Navigation("Documents");

                    b.Navigation("EmailAddresses");

                    b.Navigation("Notes");

                    b.Navigation("NotificationPreferences");

                    b.Navigation("Notifications");

                    b.Navigation("PermissionOverrides");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.Branch", b =>
                {
                    b.Navigation("ContactNumbers");

                    b.Navigation("Documents");

                    b.Navigation("EmailAddresses");

                    b.Navigation("Notes");

                    b.Navigation("NotificationPreferences");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.Company", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("ContactNumbers");

                    b.Navigation("DocumentRequirements");

                    b.Navigation("Documents");

                    b.Navigation("EmailAddresses");

                    b.Navigation("Notes");

                    b.Navigation("NotificationPreferences");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissionOverrides");
                });

            modelBuilder.Entity("Roovia.Models.UserCompanyModels.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
