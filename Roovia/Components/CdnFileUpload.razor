@using System.Net.Http.Headers
@using Roovia.Interfaces
@using System.Linq
@using Roovia.Models.CDN
@inject ICdnService CdnService
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="cdn-file-upload @(IsCompact ? "compact" : "") @(EnableAdvancedFeatures ? "advanced" : "basic")">
    <div class="upload-container">
        @if (ShowCategorySelector && Categories?.Count > 0)
        {
            <div class="form-group mb-3">
                <label for="category-select">Select Category</label>
                <select id="category-select" class="form-select" @bind="Category">
                    @foreach (var cat in Categories)
                    {
                        <option value="@cat.Name">@cat.DisplayName</option>
                    }
                </select>
            </div>
        }

        @if (ShowFolderSelector && CurrentCategoryFolders?.Count > 0)
        {
            <div class="form-group mb-3">
                <label for="folder-select">Select Folder</label>
                <div class="input-group">
                    <select id="folder-select" class="form-select" @bind="FolderPath">
                        <option value="">Root Folder</option>
                        @foreach (var folder in CurrentCategoryFolders)
                        {
                            <option value="@folder.Path">@folder.Path</option>
                        }
                    </select>
                    @if (EnableFolderCreation)
                    {
                        <button class="btn btn-outline-secondary" type="button" @onclick="ShowCreateFolderDialog">
                            <i class="fa-light fa-folder-plus"></i>
                        </button>
                    }
                </div>
            </div>
        }

        <div class="file-upload-container @(_isDragging ? "dragging" : "") @(IsUploading ? "uploading" : "") @(UploadError != null ? "error" : "")">
            <InputFile OnChange="HandleFileSelected"
                       class="file-input"
                       accept="@AcceptedFileTypes"
                       multiple="@Multiple"
                       disabled="@IsUploading" />

            <div class="upload-prompt">
                @if (!IsUploading && UploadError == null)
                {
                    <div class="upload-icon">
                        <i class="fa-light fa-cloud-arrow-up fa-2x"></i>
                    </div>
                    <div class="upload-instructions">
                        <h4>@Title</h4>
                        <p>@Description</p>
                        <span class="file-hint">@FileTypeHint</span>
                        <div class="file-size-hint">
                            <small>Maximum file size: @FormatFileSize(MaxFileSize)</small>
                        </div>
                    </div>
                }
                else if (IsUploading)
                {
                    <div class="upload-progress">
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: @(UploadProgress)%" aria-valuenow="@UploadProgress" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <div class="d-flex justify-content-between w-100">
                            <span>@_currentFileName... @UploadProgress%</span>
                            <span>@FormatFileSize(_bytesUploaded) of @FormatFileSize(_totalBytes)</span>
                        </div>
                        <div class="upload-speed mt-1">
                            <small>@_uploadSpeedText</small>
                        </div>
                        <div class="upload-progress-counts mt-2">
                            <small>
                                @if (Multiple)
                                {
                                    <span>Uploading file @(_currentFileIndex + 1) of @_totalFiles</span>
                                }
                            </small>
                        </div>
                        @if (EnableCancelUpload)
                        {
                            <button @onclick="CancelUpload" class="btn btn-sm btn-outline-danger mt-2">
                                <i class="fa-light fa-times me-2"></i>Cancel
                            </button>
                        }
                    </div>
                }
                else if (UploadError != null)
                {
                    <div class="upload-error">
                        <div class="error-icon">
                            <i class="fa-light fa-triangle-exclamation fa-2x text-danger"></i>
                        </div>
                        <div class="error-message">
                            <h5 class="text-danger">Upload Failed</h5>
                            <p>@UploadError</p>
                            <button @onclick="ClearError" class="btn btn-sm btn-outline-primary mt-2">
                                <i class="fa-light fa-rotate me-2"></i>Try Again
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>

        @if (!HideFileList && (IsUploading || UploadedFiles.Any()))
        {
            <div class="uploaded-files">
                <div class="files-header">
                    <h5>@(IsUploading ? "Files" : "Uploaded Files")</h5>
                    @if (UploadedFiles.Any() && !IsUploading)
                    {
                        <div class="files-actions">
                            @if (EnableFileSelection)
                            {
                                <div class="btn-group btn-group-sm me-2">
                                    <button class="btn btn-outline-secondary" @onclick="SelectAllFiles" title="Select All">
                                        <i class="fa-light fa-check-double"></i>
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="DeselectAllFiles" title="Deselect All">
                                        <i class="fa-light fa-xmark"></i>
                                    </button>
                                </div>
                            }
                            @if (EnableFileSelection && SelectedFiles.Any())
                            {
                                <button class="btn btn-sm btn-outline-danger me-2" @onclick="DeleteSelectedFiles" title="Delete Selected">
                                    <i class="fa-light fa-trash"></i>
                                </button>
                            }
                            @if (EnableAdvancedFeatures)
                            {
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-secondary" @onclick="RefreshFilesList" title="Refresh">
                                        <i class="fa-light fa-sync"></i>
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="ToggleFilesView" title="@(IsGridView ? "List View" : "Grid View")">
                                        <i class="fa-light @(IsGridView ? "fa-list" : "fa-grid-2")"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    }
                </div>

                <div class="file-list @(IsGridView ? "grid-view" : "list-view")">
                    @if (IsUploading && _queuedFiles.Any())
                    {
                        @foreach (var file in _queuedFiles)
                        {
                            <div class="file-item @(file == _currentFileItem ? "uploading" : "queued")">
                                <div class="file-icon">
                                    @GetFileIcon(file.ContentType, file.Name)
                                </div>
                                <div class="file-details">
                                    <div class="file-name">@file.Name</div>
                                    <div class="file-size">@FormatFileSize(file.Size)</div>
                                    <div class="file-status">
                                        @if (file == _currentFileItem)
                                        {
                                            <div class="progress" style="height: 4px;">
                                                <div class="progress-bar" role="progressbar" style="width: @(UploadProgress)%"></div>
                                            </div>
                                            <small>Uploading... @UploadProgress%</small>
                                        }
                                        else if (_queuedFiles.IndexOf(file) < _currentFileIndex)
                                        {
                                            <small class="text-success">Uploaded</small>
                                        }
                                        else
                                        {
                                            <small class="text-muted">Queued</small>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }

                    @foreach (var file in UploadedFiles)
                    {
                        <div class="file-item @(SelectedFiles.Contains(file) ? "selected" : "")">
                            @if (EnableFileSelection)
                            {
                                <div class="file-select">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" checked="@SelectedFiles.Contains(file)"
                                               @onchange="e => ToggleFileSelection(file, (bool)e.Value)" />
                                    </div>
                                </div>
                            }
                            <div class="file-icon">
                                @GetFileIcon(file.ContentType, file.FileName)
                            </div>
                            <div class="file-details">
                                <div class="file-name">@file.FileName</div>
                                <div class="file-meta">
                                    <span class="file-size">@FormatFileSize(file.Size)</span>
                                    @if (file.UploadDate.HasValue)
                                    {
                                        <span class="mx-1">•</span>
                                        <span class="file-date">@FormatDate(file.UploadDate.Value)</span>
                                    }
                                </div>
                            </div>
                            <div class="file-actions">
                                <button @onclick="() => ViewFile(file)" class="btn btn-sm btn-outline-primary" title="View file">
                                    <i class="fa-light fa-eye"></i>
                                </button>
                                @if (AllowRename)
                                {
                                    <button @onclick="() => RenameFile(file)" class="btn btn-sm btn-outline-secondary" title="Rename file">
                                        <i class="fa-light fa-edit"></i>
                                    </button>
                                }
                                @if (AllowDelete)
                                {
                                    <button @onclick="() => DeleteFile(file)" class="btn btn-sm btn-outline-danger" title="Delete file">
                                        <i class="fa-light fa-trash"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    @if (_showRenameDialog)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Rename File</h5>
                        <button type="button" class="btn-close" @onclick="() => _showRenameDialog = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="newFileName">New file name:</label>
                            <input type="text" class="form-control" id="newFileName" @bind="_newFileName" />
                            <small class="form-text text-muted">Enter the new name without extension.</small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => _showRenameDialog = false">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="PerformRename">Save</button>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        </div>
    }

    @if (_showCreateFolderDialog)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Create Folder</h5>
                        <button type="button" class="btn-close" @onclick="() => _showCreateFolderDialog = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="newFolderName">Folder name:</label>
                            <input type="text" class="form-control" id="newFolderName" @bind="_newFolderName" />
                            <small class="form-text text-muted">Enter a name for the new folder.</small>
                        </div>
                        @if (CurrentCategoryFolders?.Count > 0)
                        {
                            <div class="form-group mt-3">
                                <label for="parentFolder">Parent folder:</label>
                                <select id="parentFolder" class="form-select" @bind="_parentFolderPath">
                                    <option value="">Root Folder</option>
                                    @foreach (var folder in CurrentCategoryFolders)
                                    {
                                        <option value="@folder.Path">@folder.Path</option>
                                    }
                                </select>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => _showCreateFolderDialog = false">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="CreateFolder">Create</button>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        </div>
    }

    @if (_showPreviewDialog)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">File Preview: @_selectedFile?.FileName</h5>
                        <button type="button" class="btn-close" @onclick="ClosePreview"></button>
                    </div>
                    <div class="modal-body p-0">
                        <div style="height: 70vh;">
                            @if (_filePreviewComponent != null)
                            {
                                @_filePreviewComponent
                            }
                            else
                            {
                                <div class="d-flex justify-content-center align-items-center h-100">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        </div>
    }
</div>

@code {
    [Parameter] public string Title { get; set; } = "Upload Files";
    [Parameter] public string Description { get; set; } = "Drag and drop files here, or click to browse";
    [Parameter] public string FileTypeHint { get; set; } = "Accepted file types: JPG, PNG, PDF, DOC, XLSX";
    [Parameter] public string Category { get; set; } = "documents";
    [Parameter] public string FolderPath { get; set; } = "";
    [Parameter] public string AcceptedFileTypes { get; set; } = ".jpg,.jpeg,.png,.pdf,.doc,.docx,.xls,.xlsx,.csv,.txt,.mp4,.mp3,.zip";
    [Parameter] public bool Multiple { get; set; } = false;
    [Parameter] public long MaxFileSize { get; set; } = 209715200; // 200MB default
    [Parameter] public bool IsCompact { get; set; } = false;
    [Parameter] public bool HideFileList { get; set; } = false;
    [Parameter] public bool AllowDelete { get; set; } = true;
    [Parameter] public bool AllowRename { get; set; } = true;
    [Parameter] public bool EnableCancelUpload { get; set; } = true;
    [Parameter] public bool UseChunkedUpload { get; set; } = true;
    [Parameter] public int ChunkSize { get; set; } = 5 * 1024 * 1024; // 5MB chunks
    [Parameter] public EventCallback<UploadedFileInfo> OnFileUploaded { get; set; }
    [Parameter] public EventCallback<List<UploadedFileInfo>> OnFilesUploaded { get; set; }
    [Parameter] public EventCallback<UploadedFileInfo> OnFileDeleted { get; set; }
    [Parameter] public EventCallback<UploadedFileInfo> OnFileRenamed { get; set; }
    [Parameter] public bool EnableFileSelection { get; set; } = true;
    [Parameter] public bool EnableAdvancedFeatures { get; set; } = true;
    [Parameter] public bool EnableFolderCreation { get; set; } = true;
    [Parameter] public bool ShowCategorySelector { get; set; } = true;
    [Parameter] public bool ShowFolderSelector { get; set; } = true;
    [Parameter] public bool AutoRefreshFiles { get; set; } = true;
    [Parameter] public EventCallback<bool> OnFolderCreated { get; set; }

    private bool _isDragging = false;
    private bool IsUploading { get; set; } = false;
    private string UploadError { get; set; }
    private int UploadProgress { get; set; } = 0;
    private List<UploadedFileInfo> UploadedFiles { get; set; } = new List<UploadedFileInfo>();
    private List<UploadedFileInfo> SelectedFiles { get; set; } = new List<UploadedFileInfo>();
    private CancellationTokenSource _cancellationTokenSource;
    private string _currentFileName = "";
    private long _bytesUploaded = 0;
    private long _totalBytes = 0;
    private DateTime _uploadStartTime;
    private string _uploadSpeedText = "";
    private Timer _speedUpdateTimer;
    private bool _showRenameDialog = false;
    private bool _showCreateFolderDialog = false;
    private bool _showPreviewDialog = false;
    private string _newFileName = "";
    private string _newFolderName = "";
    private string _parentFolderPath = "";
    private UploadedFileInfo _selectedFile;
    private string _apiKey;
    private bool IsGridView { get; set; } = false;
    private DotNetObjectReference<CdnFileUpload> _objRef;
    private RenderFragment _filePreviewComponent;
    private bool _jsInitialized = false;

    // For multi-file uploads
    private List<IBrowserFile> _queuedFiles = new List<IBrowserFile>();
    private IBrowserFile _currentFileItem;
    private int _currentFileIndex = 0;
    private int _totalFiles = 0;

    // Category and folder data
    private List<CdnCategory> Categories { get; set; } = new List<CdnCategory>();
    private List<CdnFolder> CurrentCategoryFolders { get; set; } = new List<CdnFolder>();

    protected override async Task OnInitializedAsync()
    {
        _apiKey = CdnService.GetApiKey();

        // Load categories
        await LoadCategoriesAsync();

        // Load folders
        await LoadFoldersAsync();

        // Load existing files if enabled
        if (AutoRefreshFiles)
        {
            await LoadFilesAsync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // If category changes, load folders
        if (!string.IsNullOrEmpty(Category))
        {
            await LoadFoldersAsync();
        }

        // Set API key
        _apiKey = CdnService.GetApiKey();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Create .NET reference for JS interop
                _objRef = DotNetObjectReference.Create(this);

                // Check if our JS module is available
                bool moduleExists = await JSRuntime.InvokeAsync<bool>("typeof window.cdnModule !== 'undefined'");

                if (moduleExists)
                {
                    // Initialize JS module
                    await JSRuntime.InvokeVoidAsync("cdnModule.initialize", _objRef, _apiKey);
                    _jsInitialized = true;
                }
                else
                {
                    Console.WriteLine("cdnModule is not available - JS interop functionality will be limited");
                    _jsInitialized = false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing JS interop: {ex.Message}");
                _jsInitialized = false;
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Clean up
        _speedUpdateTimer?.Dispose();
        _cancellationTokenSource?.Dispose();

        // Only try to dispose JS resources if we successfully initialized them
        if (_jsInitialized)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("cdnModule.dispose");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error disposing JS resources: {ex.Message}");
            }
        }

        _objRef?.Dispose();
    }

    private async Task LoadCategoriesAsync()
    {
        try
        {
            Categories = await CdnService.GetCategoriesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
            // Don't show error to user
        }
    }

    private async Task LoadFoldersAsync()
    {
        try
        {
            CurrentCategoryFolders = await CdnService.GetFoldersAsync(Category);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading folders: {ex.Message}");
            // Don't show error to user
        }
    }

    private async Task LoadFilesAsync()
    {
        try
        {
            var files = await CdnService.GetFilesAsync(Category, FolderPath);

            // Convert to UploadedFileInfo
            UploadedFiles = files.Select(f => new UploadedFileInfo
                    {
                        FileName = f.FileName,
                        Url = f.Url,
                        ContentType = f.ContentType,
                        Size = f.FileSize,
                        Category = Category,
                        UploadDate = f.UploadDate
                    }).ToList();

            // Clear selection
            SelectedFiles.Clear();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading files: {ex.Message}");
            // Don't show error to user
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            IsUploading = true;
            UploadProgress = 0;
            UploadError = null;
            _cancellationTokenSource = new CancellationTokenSource();

            var uploadedFiles = new List<UploadedFileInfo>();

            // Process files
            _queuedFiles = Multiple ? e.GetMultipleFiles(50).ToList() : new List<IBrowserFile> { e.File };
            _totalFiles = _queuedFiles.Count;
            _currentFileIndex = 0;

            foreach (var file in _queuedFiles)
            {
                if (file.Size > MaxFileSize)
                {
                    UploadError = $"File {file.Name} exceeds the maximum file size of {FormatFileSize(MaxFileSize)}";
                    continue;
                }

                _currentFileName = file.Name;
                _totalBytes = file.Size;
                _bytesUploaded = 0;
                _uploadStartTime = DateTime.Now;
                _currentFileItem = file;

                // Start the timer to update upload speed
                _speedUpdateTimer = new Timer(UpdateUploadSpeed, null, 0, 1000);

                // Update progress as we upload
                UploadProgress = 0;
                StateHasChanged();

                UploadedFileInfo fileInfo;

                if (UseChunkedUpload && file.Size > ChunkSize)
                {
                    fileInfo = await UploadLargeFile(file, _cancellationTokenSource.Token);
                }
                else
                {
                    fileInfo = await UploadStandardFile(file, _cancellationTokenSource.Token);
                }

                // Stop the timer
                _speedUpdateTimer?.Dispose();
                _speedUpdateTimer = null;

                if (fileInfo != null)
                {
                    // Add to local list and trigger event
                    UploadedFiles.Add(fileInfo);
                    uploadedFiles.Add(fileInfo);
                    await OnFileUploaded.InvokeAsync(fileInfo);
                }

                _currentFileIndex++;
                StateHasChanged();
            }

            // Notify if multiple files were uploaded
            if (uploadedFiles.Count > 0)
            {
                await OnFilesUploaded.InvokeAsync(uploadedFiles);
            }
        }
        catch (OperationCanceledException)
        {
            UploadError = "Upload was canceled";
        }
        catch (Exception ex)
        {
            UploadError = $"Error during upload: {ex.Message}";
            Console.WriteLine($"Upload error: {ex}");
        }
        finally
        {
            IsUploading = false;
            UploadProgress = 0;
            _speedUpdateTimer?.Dispose();
            _speedUpdateTimer = null;
            _cancellationTokenSource?.Dispose();
            _cancellationTokenSource = null;
            _queuedFiles.Clear();
            StateHasChanged();
        }
    }

    private async Task<UploadedFileInfo> UploadStandardFile(IBrowserFile file, CancellationToken cancellationToken)
    {
        try
        {
            // Use the CdnService for direct upload
            if (CdnService.IsDirectAccessAvailable())
            {
                var stream = file.OpenReadStream(MaxFileSize);
                var progressStream2 = new ProgressStream(stream, async size =>
            {
                _bytesUploaded = size;
                UploadProgress = (int)(size * 100 / _totalBytes);
                await InvokeAsync(() => StateHasChanged());
            });

                var url = await CdnService.UploadFileAsync(
                progressStream2,
                file.Name,
                file.ContentType,
                Category,
                FolderPath);

                UploadProgress = 100;
                await InvokeAsync(() => StateHasChanged());

                return new UploadedFileInfo
                        {
                            FileName = file.Name,
                            Url = url,
                            ContentType = file.ContentType,
                            Size = file.Size,
                            Category = Category,
                            UploadDate = DateTime.Now
                        };
            }

            // Otherwise use HTTP client as fallback
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.Timeout = TimeSpan.FromHours(1); // Extended timeout for large files

            // Ensure we have the API key header
            if (!httpClient.DefaultRequestHeaders.Contains("X-Api-Key"))
            {
                httpClient.DefaultRequestHeaders.Add("X-Api-Key", _apiKey);
            }

            // Create multipart form content
            using var content = new MultipartFormDataContent();

            // Use a progress tracking stream
            var progressStream = new ProgressStream(
            file.OpenReadStream(MaxFileSize),
            async size =>
            {
                _bytesUploaded = size;
                UploadProgress = (int)(size * 100 / _totalBytes);
                await InvokeAsync(() => StateHasChanged());
            });

            var fileContent = new StreamContent(progressStream);
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            content.Add(fileContent, "file", file.Name);
            content.Add(new StringContent(Category), "category");

            // Add folder path if provided
            if (!string.IsNullOrEmpty(FolderPath))
            {
                content.Add(new StringContent(FolderPath), "folder");
            }

            // Get base URL from location origin
            var baseUrl = NavigationManager.BaseUri.TrimEnd('/');
            var apiUrl = $"{baseUrl}/api/cdn/upload";

            var response = await httpClient.PostAsync(apiUrl, content, cancellationToken);

            if (response.IsSuccessStatusCode)
            {
                UploadProgress = 100;
                StateHasChanged();

                var responseContent = await response.Content.ReadFromJsonAsync<UploadResponse>(cancellationToken: cancellationToken);

                if (responseContent != null && responseContent.success)
                {
                    return new UploadedFileInfo
                            {
                                FileName = file.Name,
                                Url = responseContent.url,
                                ContentType = file.ContentType,
                                Size = file.Size,
                                Category = Category,
                                UploadDate = DateTime.Now
                            };
                }
            }

            // If we reach here, upload failed
            throw new Exception("Upload failed. Server returned an error.");
        }
        catch (Exception ex)
        {
            if (ex is OperationCanceledException)
            {
                throw; // Re-throw cancellation
            }

            UploadError = $"Error uploading {file.Name}: {ex.Message}";
            return null;
        }
    }

    private async Task<UploadedFileInfo> UploadLargeFile(IBrowserFile file, CancellationToken cancellationToken)
    {
        // For now, use standard upload
        return await UploadStandardFile(file, cancellationToken);
    }

    private async void UpdateUploadSpeed(object state)
    {
        if (_bytesUploaded > 0 && _totalBytes > 0)
        {
            var elapsed = DateTime.Now - _uploadStartTime;
            if (elapsed.TotalSeconds > 0)
            {
                var bytesPerSecond = _bytesUploaded / elapsed.TotalSeconds;
                _uploadSpeedText = $"Upload speed: {FormatFileSize((long)bytesPerSecond)}/s";

                // Calculate estimated time remaining
                var bytesRemaining = _totalBytes - _bytesUploaded;
                if (bytesPerSecond > 0 && bytesRemaining > 0)
                {
                    var secondsRemaining = bytesRemaining / bytesPerSecond;
                    _uploadSpeedText += $" - Estimated time remaining: {FormatTimeRemaining(secondsRemaining)}";
                }

                await InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private string FormatTimeRemaining(double seconds)
    {
        TimeSpan time = TimeSpan.FromSeconds(seconds);
        if (time.TotalHours >= 1)
        {
            return $"{time.Hours}h {time.Minutes}m {time.Seconds}s";
        }
        else if (time.TotalMinutes >= 1)
        {
            return $"{time.Minutes}m {time.Seconds}s";
        }
        else
        {
            return $"{time.Seconds}s";
        }
    }

    private void CancelUpload()
    {
        _cancellationTokenSource?.Cancel();
    }

    private void ClearError()
    {
        UploadError = null;
        StateHasChanged();
    }

    private async Task DeleteFile(UploadedFileInfo file)
    {
        try
        {
            // Confirm the deletion with the user
            bool confirmed = false;
            try
            {
                confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {file.FileName}?");
            }
            catch
            {
                // If JS interop fails, assume confirmed for simplicity
                confirmed = true;
            }

            if (!confirmed)
                return;

            // Try to use CdnService directly
            if (await CdnService.DeleteFileAsync(file.Url))
            {
                UploadedFiles.Remove(file);

                if (SelectedFiles.Contains(file))
                {
                    SelectedFiles.Remove(file);
                }

                await OnFileDeleted.InvokeAsync(file);
                StateHasChanged();
                return;
            }

            // If direct access failed, show error
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete file: {file.FileName}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete file: {ex.Message}");
        }
    }

    private async Task DeleteSelectedFiles()
    {
        if (!SelectedFiles.Any())
            return;

        try
        {
            // Confirm the deletion
            bool confirmed = false;
            try
            {
                confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {SelectedFiles.Count} selected files?");
            }
            catch
            {
                // If JS interop fails, assume confirmed for simplicity
                confirmed = true;
            }

            if (!confirmed)
                return;

            var failedFiles = new List<string>();

            foreach (var file in SelectedFiles.ToList())
            {
                bool success = await CdnService.DeleteFileAsync(file.Url);

                if (success)
                {
                    UploadedFiles.Remove(file);
                    await OnFileDeleted.InvokeAsync(file);
                }
                else
                {
                    failedFiles.Add(file.FileName);
                }
            }

            SelectedFiles.Clear();

            if (failedFiles.Any())
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete {failedFiles.Count} files: {string.Join(", ", failedFiles)}");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting files: {ex.Message}");
        }
    }

    private void RenameFile(UploadedFileInfo file)
    {
        _selectedFile = file;
        _newFileName = Path.GetFileNameWithoutExtension(file.FileName);
        _showRenameDialog = true;
        StateHasChanged();
    }

    private async Task PerformRename()
    {
        if (_selectedFile == null || string.IsNullOrWhiteSpace(_newFileName))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a valid file name.");
            return;
        }

        try
        {
            bool success = false;
            string newUrl = "";

            // Try to use the JS function if it's available
            if (_jsInitialized)
            {
                try
                {
                    var result = await JSRuntime.InvokeAsync<RenameResult>("cdnModule.renameFile", _selectedFile.Url, _newFileName, _apiKey);
                    if (result != null && result.success)
                    {
                        success = true;
                        newUrl = result.url;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"JS rename failed, trying alternative: {ex.Message}");
                }
            }

            // If JS approach fails, use direct HTTP API call
            if (!success)
            {
                var httpClient = HttpClientFactory.CreateClient();
                httpClient.DefaultRequestHeaders.Add("X-Api-Key", _apiKey);

                var requestData = new
                {
                    Path = _selectedFile.Url,
                    NewName = _newFileName
                };

                var response = await httpClient.PostAsJsonAsync(
                $"https://portal.roovia.co.za/api/cdn/rename",
                requestData);

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<RenameResult>();
                    if (result != null && result.success)
                    {
                        success = true;
                        newUrl = result.url;
                    }
                }
            }

            if (success && !string.IsNullOrEmpty(newUrl))
            {
                _showRenameDialog = false;

                // Update local file list
                var oldFile = _selectedFile;
                var index = UploadedFiles.IndexOf(oldFile);

                if (index >= 0)
                {
                    // Update with new URL and filename
                    var fileName = Path.GetFileName(newUrl);
                    UploadedFiles[index].Url = newUrl;
                    UploadedFiles[index].FileName = fileName;

                    // Notify parent component
                    await OnFileRenamed.InvokeAsync(UploadedFiles[index]);
                }

                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to rename file: Check logs for details");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error renaming file: {ex.Message}");
        }
    }

    private void ViewFile(UploadedFileInfo file)
    {
        _selectedFile = file;
        _showPreviewDialog = true;

        // Create file preview component
        _filePreviewComponent = builder =>
    {
        builder.OpenComponent<CdnFilePreview>(0);
        builder.AddAttribute(1, "FileUrl", file.Url);
        builder.AddAttribute(2, "FileName", file.FileName);
        builder.AddAttribute(3, "ContentType", file.ContentType);
        builder.AddAttribute(4, "FileSize", file.Size);
        builder.AddAttribute(5, "EnableDelete", false);
        builder.AddAttribute(6, "EnableRename", false);
        builder.AddAttribute(7, "EnablePreviewTools", false);
        builder.CloseComponent();
    };

        StateHasChanged();
    }

    private void ClosePreview()
    {
        _showPreviewDialog = false;
        _filePreviewComponent = null;
        _selectedFile = null;
        StateHasChanged();
    }

    private void ShowCreateFolderDialog()
    {
        _newFolderName = "";
        _parentFolderPath = FolderPath; // Default to current path
        _showCreateFolderDialog = true;
        StateHasChanged();
    }

    private async Task CreateFolder()
    {
        if (string.IsNullOrWhiteSpace(_newFolderName))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a valid folder name.");
            return;
        }

        try
        {
            bool success = false;
            string message = "";

            // Try to use JS function if available
            if (_jsInitialized)
            {
                try
                {
                    var result = await JSRuntime.InvokeAsync<CreateFolderResult>(
                    "cdnModule.createFolder",
                    Category,
                    _parentFolderPath,
                    _newFolderName,
                    _apiKey);

                    if (result != null && result.success)
                    {
                        success = true;
                    }
                    else if (result != null)
                    {
                        message = result.message;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"JS create folder failed, trying alternative: {ex.Message}");
                }
            }

            // If JS approach fails, use direct HTTP API call
            if (!success)
            {
                var httpClient = HttpClientFactory.CreateClient();
                httpClient.DefaultRequestHeaders.Add("X-Api-Key", _apiKey);

                var requestData = new
                {
                    Category = Category,
                    ParentFolder = _parentFolderPath,
                    FolderName = _newFolderName
                };

                var response = await httpClient.PostAsJsonAsync(
                $"https://portal.roovia.co.za/api/cdn/create-folder",
                requestData);

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<CreateFolderResult>();
                    if (result != null && result.success)
                    {
                        success = true;
                    }
                    else if (result != null)
                    {
                        message = result.message;
                    }
                }
            }

            if (success)
            {
                _showCreateFolderDialog = false;

                // Reload folders
                await LoadFoldersAsync();

                // Notify parent
                await OnFolderCreated.InvokeAsync(true);

                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to create folder: {message}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating folder: {ex.Message}");
        }
    }

    private async Task RefreshFilesList()
    {
        await LoadFilesAsync();
    }

    private void ToggleFilesView()
    {
        IsGridView = !IsGridView;
        StateHasChanged();
    }

    private void ToggleFileSelection(UploadedFileInfo file, bool isSelected)
    {
        if (isSelected && !SelectedFiles.Contains(file))
        {
            SelectedFiles.Add(file);
        }
        else if (!isSelected && SelectedFiles.Contains(file))
        {
            SelectedFiles.Remove(file);
        }
    }

    private void SelectAllFiles()
    {
        SelectedFiles = new List<UploadedFileInfo>(UploadedFiles);
        StateHasChanged();
    }

    private void DeselectAllFiles()
    {
        SelectedFiles.Clear();
        StateHasChanged();
    }

    [JSInvokable]
    public void OnDragEnter()
    {
        _isDragging = true;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnDragLeave()
    {
        _isDragging = false;
        StateHasChanged();
    }

    private RenderFragment GetFileIcon(string contentType, string fileName)
    {
        string iconClass = contentType switch
        {
            var ct when ct?.StartsWith("image/") == true => "fa-image",
            var ct when ct?.Contains("pdf") == true => "fa-file-pdf",
            var ct when ct?.Contains("word") == true => "fa-file-word",
            var ct when (ct?.Contains("excel") == true) || (ct?.Contains("spreadsheet") == true) => "fa-file-excel",
            var ct when (ct?.Contains("powerpoint") == true) || (ct?.Contains("presentation") == true) => "fa-file-powerpoint",
            var ct when ct?.StartsWith("video/") == true => "fa-file-video",
            var ct when ct?.StartsWith("audio/") == true => "fa-file-audio",
            var ct when (ct?.Contains("zip") == true) || (ct?.Contains("archive") == true) => "fa-file-archive",
            var ct when (ct?.StartsWith("text/") == true) || (ct?.Contains("javascript") == true) || (ct?.Contains("json") == true) => "fa-file-lines",
            _ => GetIconFromExtension(Path.GetExtension(fileName))
        };

        string colorClass = GetColorClassFromExtension(Path.GetExtension(fileName));

        return @<i class="fa-light @iconClass @colorClass"></i>;
    }

    private string GetIconFromExtension(string extension)
    {
        if (string.IsNullOrEmpty(extension))
            return "fa-file";

        return extension.ToLower() switch
        {
            ".pdf" => "fa-file-pdf",
            ".doc" or ".docx" => "fa-file-word",
            ".xls" or ".xlsx" or ".csv" => "fa-file-excel",
            ".ppt" or ".pptx" => "fa-file-powerpoint",
            ".zip" or ".rar" or ".7z" => "fa-file-archive",
            ".mp3" or ".wav" or ".ogg" => "fa-file-audio",
            ".mp4" or ".mov" or ".avi" => "fa-file-video",
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".webp" => "fa-image",
            ".txt" or ".log" => "fa-file-lines",
            ".html" or ".htm" => "fa-file-code",
            ".css" => "fa-file-code",
            ".js" or ".ts" => "fa-file-code",
            ".json" => "fa-file-code",
            ".xml" => "fa-file-code",
            ".cs" or ".vb" or ".java" or ".py" => "fa-file-code",
            ".md" => "fa-file-lines",
            _ => "fa-file"
        };
    }

    private string GetColorClassFromExtension(string extension)
    {
        if (string.IsNullOrEmpty(extension))
            return "text-secondary";

        return extension.ToLower() switch
        {
            ".pdf" => "text-danger",
            ".doc" or ".docx" => "text-primary",
            ".xls" or ".xlsx" or ".csv" => "text-success",
            ".ppt" or ".pptx" => "text-warning",
            ".zip" or ".rar" or ".7z" => "text-warning",
            ".mp3" or ".wav" or ".ogg" => "text-info",
            ".mp4" or ".mov" or ".avi" => "text-info",
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".webp" => "text-info",
            ".cs" or ".vb" or ".java" or ".py" => "text-primary",
            _ => "text-secondary"
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;

        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }

        return $"{len:0.##} {sizes[order]}";
    }

    private string FormatDate(DateTime date)
    {
        // If today, show time
        if (date.Date == DateTime.Today)
        {
            return $"Today at {date:h:mm tt}";
        }
        // If yesterday, show "Yesterday"
        else if (date.Date == DateTime.Today.AddDays(-1))
        {
            return $"Yesterday at {date:h:mm tt}";
        }
        // If this year, show month and day
        else if (date.Year == DateTime.Today.Year)
        {
            return $"{date:MMM d} at {date:h:mm tt}";
        }
        // Otherwise show full date
        else
        {
            return $"{date:MMM d, yyyy} at {date:h:mm tt}";
        }
    }

    // Stream wrapper to track upload progress
    private class ProgressStream : Stream
    {
        private readonly Stream _baseStream;
        private readonly Action<long> _progressCallback;
        private long _totalBytesRead;

        public ProgressStream(Stream baseStream, Action<long> progressCallback)
        {
            _baseStream = baseStream;
            _progressCallback = progressCallback;
            _totalBytesRead = 0;
        }

        public override bool CanRead => _baseStream.CanRead;
        public override bool CanSeek => _baseStream.CanSeek;
        public override bool CanWrite => _baseStream.CanWrite;
        public override long Length => _baseStream.Length;
        public override long Position
        {
            get => _baseStream.Position;
            set => _baseStream.Position = value;
        }

        public override void Flush() => _baseStream.Flush();

        public override int Read(byte[] buffer, int offset, int count)
        {
            int bytesRead = _baseStream.Read(buffer, offset, count);
            _totalBytesRead += bytesRead;
            _progressCallback(_totalBytesRead);
            return bytesRead;
        }

        public override async Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)
        {
            int bytesRead = await _baseStream.ReadAsync(buffer, offset, count, cancellationToken);
            _totalBytesRead += bytesRead;
            _progressCallback(_totalBytesRead);
            return bytesRead;
        }

        public override long Seek(long offset, SeekOrigin origin) => _baseStream.Seek(offset, origin);
        public override void SetLength(long value) => _baseStream.SetLength(value);
        public override void Write(byte[] buffer, int offset, int count) => _baseStream.Write(buffer, offset, count);

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _baseStream.Dispose();
            }
            base.Dispose(disposing);
        }
    }

    public class UploadedFileInfo
    {
        public string FileName { get; set; }
        public string Url { get; set; }
        public string ContentType { get; set; }
        public long Size { get; set; }
        public string Category { get; set; }
        public DateTime? UploadDate { get; set; }
    }

    private class UploadResponse
    {
        public bool success { get; set; }
        public string url { get; set; }
        public string fileName { get; set; }
        public string contentType { get; set; }
        public long size { get; set; }
        public string category { get; set; }
        public string message { get; set; }
    }

    private class RenameResult
    {
        public bool success { get; set; }
        public string url { get; set; }
        public string message { get; set; }
    }

    private class CreateFolderResult
    {
        public bool success { get; set; }
        public string path { get; set; }
        public string message { get; set; }
    }
}

<style>
    .cdn-file-upload {
        display: flex;
        flex-direction: column;
    }

    .upload-container {
        width: 100%;
    }

    .file-upload-container {
        position: relative;
        border: 2px dashed #dee2e6;
        border-radius: 6px;
        padding: 2rem;
        text-align: center;
        background-color: #f8f9fa;
        transition: all 0.3s ease;
        cursor: pointer;
        overflow: hidden;
    }

        .file-upload-container:hover {
            border-color: #adb5bd;
            background-color: #e9ecef;
        }

        .file-upload-container.dragging {
            border-color: #0d6efd;
            background-color: rgba(13, 110, 253, 0.05);
        }

        .file-upload-container.uploading {
            border-style: solid;
            border-color: #198754;
            background-color: rgba(25, 135, 84, 0.05);
        }

        .file-upload-container.error {
            border-style: solid;
            border-color: #dc3545;
            background-color: rgba(220, 53, 69, 0.05);
        }

    .file-input {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
        z-index: 2;
    }

    .upload-icon {
        margin-bottom: 1rem;
        color: #6c757d;
    }

    .upload-instructions h4 {
        margin-bottom: 0.5rem;
    }

    .upload-instructions p {
        margin-bottom: 0.5rem;
        color: #6c757d;
    }

    .file-hint {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
        color: #6c757d;
    }

    .file-size-hint {
        font-size: 0.75rem;
        color: #6c757d;
    }

    .upload-progress {
        width: 100%;
    }

    .progress {
        height: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .upload-error {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        gap: 1rem;
    }

    .error-icon {
        color: #dc3545;
    }

    .uploaded-files {
        margin-top: 1.5rem;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        overflow: hidden;
    }

    .files-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 1rem;
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

        .files-header h5 {
            margin-bottom: 0;
        }

    .file-list {
        max-height: 300px;
        overflow-y: auto;
    }

        .file-list.grid-view {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            padding: 1rem;
        }

    .file-item {
        display: flex;
        align-items: center;
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #dee2e6;
        background-color: #fff;
        transition: background-color 0.2s ease;
    }

        .file-item:last-child {
            border-bottom: none;
        }

        .file-item:hover {
            background-color: #f8f9fa;
        }

        .file-item.selected {
            background-color: rgba(13, 110, 253, 0.1);
        }

    .file-list.grid-view .file-item {
        flex-direction: column;
        text-align: center;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 1rem;
        height: 100%;
    }

        .file-list.grid-view .file-item.selected {
            border-color: #0d6efd;
        }

    .file-select {
        margin-right: 0.75rem;
    }

    .file-icon {
        font-size: 1.25rem;
        width: 1.25rem;
        margin-right: 0.75rem;
        text-align: center;
    }

    .file-list.grid-view .file-icon {
        font-size: 2rem;
        width: auto;
        margin-right: 0;
        margin-bottom: 0.5rem;
    }

    .file-details {
        flex: 1;
        min-width: 0; /* Needed for text-overflow to work */
    }

    .file-list.grid-view .file-details {
        width: 100%;
    }

    .file-name {
        font-weight: 500;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .file-meta, .file-status {
        font-size: 0.75rem;
        color: #6c757d;
    }

    .file-actions {
        display: flex;
        gap: 0.25rem;
        margin-left: 0.75rem;
    }

    .file-list.grid-view .file-actions {
        margin-left: 0;
        margin-top: 0.5rem;
        justify-content: center;
    }

    .file-item.uploading .file-name {
        color: #0d6efd;
    }

    .file-item.queued .file-name {
        color: #6c757d;
    }

    /* Compact mode */
    .cdn-file-upload.compact .file-upload-container {
        padding: 1rem;
    }

    .cdn-file-upload.compact .upload-icon i {
        font-size: 1.25rem;
    }

    .cdn-file-upload.compact .upload-instructions h4 {
        font-size: 1rem;
    }

    .cdn-file-upload.compact .upload-instructions p {
        font-size: 0.875rem;
    }

    .cdn-file-upload.compact .file-list {
        max-height: 200px;
    }

    /* Basic mode */
    .cdn-file-upload.basic .files-actions {
        display: none;
    }

    .cdn-file-upload.basic .file-select {
        display: none;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .file-list.grid-view

    {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }

    .files-header {
        flex-direction: column;
        align-items: flex-start;
    }

    .files-actions {
        margin-top: 0.5rem;
        width: 100%;
        display: flex;
        justify-content: flex-end;
    }

    .file-item {
        padding: 0.5rem;
    }

    .file-actions {
        flex-direction: column;
    }

    }
</style>