@page "/test-upload"
@using System.IO
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@using Roovia.Interfaces
@inject ICdnService CdnService
@inject ILogger<TestUpload> Logger
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer

<div class="card">
    <div class="card-header bg-primary text-white">
        <h3 class="mb-0">Test CDN Upload</h3>
    </div>
    <div class="card-body">
        <div class="mb-3">
            <InputFile OnChange="OnInputFileChange" class="form-control" />
            <small class="text-muted">Select a file to test the upload functionality</small>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
                <div class="alert alert-danger">
                    <h5>Error</h5>
                    <pre class="mb-0">@errorMessage</pre>
                </div>
        }

        @if (!string.IsNullOrEmpty(resultUrl))
        {
                <div class="alert alert-success">
                    <h5>Success!</h5>
                    <p>File uploaded to: @resultUrl</p>
                    <button @onclick="ViewUploadedFile" class="btn btn-primary">
                        <i class="fa-light fa-eye me-2"></i>View File
                    </button>
                    <button @onclick="DeleteUploadedFile" class="btn btn-danger ms-2">
                        <i class="fa-light fa-trash me-2"></i>Delete File
                    </button>
                </div>
        }
    </div>
</div>

<div class="card mt-4">
    <div class="card-header bg-info text-white">
        <h4 class="mb-0">CDN Information</h4>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <h5>Environment</h5>
                <p>Test Environment Mode: <strong>True</strong></p>
                <p>Direct Access Available: <strong>@CdnService.IsDirectAccessAvailable()</strong></p>
                <p>API Key: <code>@apiKey</code></p>
                <p>CDN Base URL: <code>@CdnService.GetCdnUrl("")</code></p>
            </div>
            <div class="col-md-6">
                <h5>Categories</h5>
                @if (_categories == null)
                {
                        <p><em>Loading categories...</em></p>
                }
                else
                {
                        <ul>
                        @foreach (var category in _categories)
                        {
                                    <li>
                                        <strong>@category.DisplayName</strong> (@category.Name) -
                                        File types: <code>@(string.IsNullOrEmpty(category.AllowedFileTypes) ? "*" : category.AllowedFileTypes)</code>
                                    </li>
                        }
                        </ul>
                }
            </div>
        </div>

        <div class="mt-4">
            <h5>API Connection Test</h5>
            <button @onclick="TestApiConnection" class="btn btn-primary">
                <i class="fa-light fa-network-wired me-2"></i>Test API Connection
            </button>

            @if (!string.IsNullOrEmpty(apiTestResult))
            {
                    <div class="mt-2 @(apiTestSuccess ? "alert alert-success" : "alert alert-danger")">
                        <p>@apiTestResult</p>
                    </div>
            }
        </div>
    </div>
</div>

@code {
    private string errorMessage;
    private string resultUrl;
    private List<Roovia.Models.CDN.CdnCategory> _categories;
    private string apiKey;
    private string apiTestResult;
    private bool apiTestSuccess;

    protected override async Task OnInitializedAsync()
    {
        apiKey = CdnService.GetApiKey();
        await LoadCategories();
        await JSRuntime.InvokeVoidAsync("setCdnApiKey", apiKey);
    }

    private async Task LoadCategories()
    {
        try
        {
            _categories = await CdnService.GetCategoriesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
            Logger.LogError(ex, "Failed to load categories");
        }
    }

    private async Task TestApiConnection()
    {
        try
        {
            apiTestResult = "Testing connection to production CDN API...";
            apiTestSuccess = false;
            StateHasChanged();

            var client = HttpClientFactory.CreateClient();
            client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);

            var response = await client.GetAsync("https://portal.roovia.co.za/api/cdn/categories");

            if (response.IsSuccessStatusCode)
            {
                apiTestSuccess = true;
                apiTestResult = "Success! Connected to production CDN API.";
            }
            else
            {
                apiTestSuccess = false;
                apiTestResult = $"Failed to connect to production CDN API. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            apiTestSuccess = false;
            apiTestResult = $"Error testing API connection: {ex.Message}";
            Logger.LogError(ex, "API connection test failed");
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            errorMessage = null;
            resultUrl = null;

            // Use a small test file
            var file = e.File;
            Logger.LogInformation("Starting upload test with file: {FileName}, size: {Size}",
                file.Name, file.Size);

            // First try direct CDN service method
            try
            {
                resultUrl = await CdnService.UploadFileAsync(
                    file.OpenReadStream(),
                    file.Name,
                    file.ContentType,
                    "test-uploads");

                Logger.LogInformation("Upload successful via CdnService: {Url}", resultUrl);
                return;
            }
            catch (Exception serviceEx)
            {
                Logger.LogWarning("CdnService upload failed, trying direct API: {Error}", serviceEx.Message);
                // Fall through to direct API call
            }

            // If direct service method fails, try API call
            // Create HTTP client
            var client = HttpClientFactory.CreateClient();
            client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);

            // Create multipart form data
            using var content = new MultipartFormDataContent();
            using var fileContent = new StreamContent(file.OpenReadStream());
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(fileContent, "file", file.Name);
            content.Add(new StringContent("test-uploads"), "category");

            // Send to production API
            var response = await client.PostAsync("https://portal.roovia.co.za/api/cdn/upload", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<UploadResult>();
                if (result != null && result.success)
                {
                    resultUrl = result.url;
                    Logger.LogInformation("Upload successful via direct API: {Url}", resultUrl);
                }
                else
                {
                    throw new Exception("API returned success=false");
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"API returned error: {response.StatusCode}, {errorContent}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}\n\nStack trace:\n{ex.StackTrace}";
            if (ex.InnerException != null)
            {
                errorMessage += $"\n\nInner exception: {ex.InnerException.Message}\n{ex.InnerException.StackTrace}";
            }
            Logger.LogError(ex, "Upload test failed");
        }
    }

    private async Task ViewUploadedFile()
    {
        if (string.IsNullOrEmpty(resultUrl))
            return;

        try
        {
            await JSRuntime.InvokeVoidAsync("openUrlWithApiKey", resultUrl, apiKey);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error viewing file: {ex.Message}";
            Logger.LogError(ex, "Failed to view file");
        }
    }

    private async Task DeleteUploadedFile()
    {
        if (string.IsNullOrEmpty(resultUrl))
            return;

        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this file?");
            if (!confirmed) return;

            // First try using the service
            try
            {
                var result = await CdnService.DeleteFileAsync(resultUrl);
                if (result)
                {
                    resultUrl = null;
                    await JSRuntime.InvokeVoidAsync("alert", "File deleted successfully!");
                    return;
                }
            }
            catch (Exception serviceEx)
            {
                Logger.LogWarning("Service delete failed, trying direct API: {Error}", serviceEx.Message);
                // Fall through to direct API call
            }

            // If service method fails, try direct API call
            var client = HttpClientFactory.CreateClient();
            client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);

            var response = await client.DeleteAsync($"https://portal.roovia.co.za/api/cdn/delete?path={Uri.EscapeDataString(resultUrl)}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<DeleteResult>();
                if (result != null && result.success)
                {
                    resultUrl = null;
                    await JSRuntime.InvokeVoidAsync("alert", "File deleted successfully!");
                }
                else
                {
                    errorMessage = "Failed to delete file: " + (result?.message ?? "Unknown error");
                }
            }
            else
            {
                errorMessage = $"Failed to delete file: {response.StatusCode}";
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError("Failed to delete file: {StatusCode}, {Content}", response.StatusCode, errorContent);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting file: {ex.Message}";
            Logger.LogError(ex, "Failed to delete file");
        }
    }

    private class UploadResult
    {
        public bool success { get; set; }
        public string url { get; set; }
        public string fileName { get; set; }
        public string contentType { get; set; }
        public long size { get; set; }
        public string category { get; set; }
    }

    private class DeleteResult
    {
        public bool success { get; set; }
        public string message { get; set; }
    }
}