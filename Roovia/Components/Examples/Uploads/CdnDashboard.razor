@page "/cdn-dashboard"
@using Roovia.Models.CDN
@using Roovia.Interfaces
@using System.Text.Json
@using System.Net.Http.Json
@rendermode InteractiveServer
@inject ICdnService CdnService
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="cdn-dashboard">
    <div class="dashboard-header">
        <div class="header-content">
            <div class="header-title">
                <h1><i class="fa-light fa-cloud"></i> CDN Management Dashboard</h1>
                <p class="text-muted">Manage files, test API endpoints, and monitor your CDN</p>
            </div>
            <div class="header-actions">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="useDirectService" @bind="UseDirectService">
                    <label class="form-check-label" for="useDirectService">
                        Use Direct Service @(UseDirectService ? "(Active)" : "")
                    </label>
                </div>
                <div class="btn-group ms-3">
                    <button class="btn @(CurrentView == "files" ? "btn-primary" : "btn-outline-primary")"
                            @onclick='() => SwitchView("files")'>
                        <i class="fa-light fa-folder-open me-1"></i> Files
                    </button>
                    <button class="btn @(CurrentView == "api" ? "btn-primary" : "btn-outline-primary")"
                            @onclick='() => SwitchView("api")'>
                        <i class="fa-light fa-code me-1"></i> API Tests
                    </button>
                    <button class="btn @(CurrentView == "diagnostics" ? "btn-primary" : "btn-outline-primary")"
                            @onclick='() => SwitchView("diagnostics")'>
                        <i class="fa-light fa-gauge-high me-1"></i> Diagnostics
                    </button>
                </div>
                <button class="btn btn-outline-secondary ms-3" @onclick="RefreshDashboard">
                    <i class="fa-light fa-sync"></i>
                </button>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <div class="alert @StatusAlertClass alert-dismissible fade show mt-3" role="alert">
                @StatusMessage
                <button type="button" class="btn-close" @onclick="ClearStatusMessage"></button>
            </div>
        }

        <div class="stats-cards mt-3">
            <div class="stats-card">
                <div class="stats-icon">
                    <i class="fa-light fa-file"></i>
                </div>
                <div class="stats-content">
                    <div class="stats-value">@Stats.TotalFiles.ToString("N0")</div>
                    <div class="stats-label">Total Files</div>
                </div>
            </div>
            <div class="stats-card">
                <div class="stats-icon">
                    <i class="fa-light fa-folder"></i>
                </div>
                <div class="stats-content">
                    <div class="stats-value">@Stats.TotalFolders.ToString("N0")</div>
                    <div class="stats-label">Folders</div>
                </div>
            </div>
            <div class="stats-card">
                <div class="stats-icon">
                    <i class="fa-light fa-hard-drive"></i>
                </div>
                <div class="stats-content">
                    <div class="stats-value">@Stats.TotalStorageFormatted</div>
                    <div class="stats-label">Storage Used</div>
                </div>
            </div>
            <div class="stats-card">
                <div class="stats-icon">
                    <i class="fa-light fa-cloud-arrow-up"></i>
                </div>
                <div class="stats-content">
                    <div class="stats-value">@Stats.LastUploadText</div>
                    <div class="stats-label">Last Upload</div>
                </div>
            </div>
        </div>
    </div>

    <div class="dashboard-content">
        @if (CurrentView == "files")
        {
            <div class="file-explorer">
                <div class="explorer-sidebar">
                    <div class="sidebar-header">
                        <h5>Categories</h5>
                        @if (IsLoading)
                        {
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-outline-primary" @onclick="LoadCategories">
                                <i class="fa-light fa-sync"></i>
                            </button>
                        }
                    </div>
                    <div class="category-list">
                        @foreach (var category in Categories)
                        {
                            <div class="category-item @(SelectedCategory == category.Name ? "active" : "")" 
                                @onclick="() => SelectCategory(category.Name)">
                                <i class="fa-light fa-folder @(SelectedCategory == category.Name ? "fa-folder-open" : "")"></i>
                                <span>@category.DisplayName</span>
                                <span class="badge bg-secondary rounded-pill ms-auto">@GetCategoryFileCount(category.Name)</span>
                            </div>
                        }
                    </div>

                    <div class="sidebar-header mt-4">
                        <h5>Folders</h5>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary btn-sm" @onclick="ShowCreateFolderDialog"
                                    title="Create folder">
                                <i class="fa-light fa-folder-plus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="folder-list">
                        <div class="folder-item @(SelectedFolder == "" ? "active" : "")" 
                             @onclick='() => SelectFolder("")'>
                            <i class="fa-light fa-folder-open"></i>
                            <span>Root</span>
                        </div>
                        @foreach (var folder in Folders)
                        {
                            <div class="folder-item @(SelectedFolder == folder.Path ? "active" : "")"
                                 @onclick="() => SelectFolder(folder.Path)">
                                <i class="fa-light fa-folder"></i>
                                <span>@GetFolderDisplayName(folder.Path)</span>
                                <button class="btn btn-sm text-danger folder-delete-btn"
                                        @onclick:stopPropagation="true"
                                        @onclick="() => DeleteFolder(folder.Path)">
                                    <i class="fa-light fa-xmark"></i>
                                </button>
                            </div>
                        }
                    </div>
                </div>

                <div class="explorer-main">
                    <div class="explorer-toolbar">
                        <div class="breadcrumb-navigation">
                            <nav aria-label="breadcrumb">
                                <ol class="breadcrumb m-0">
                                    <li class="breadcrumb-item">
                                        <a href="javascript:void(0)" @onclick="() => SelectCategory(SelectedCategory)">
                                            @(GetCategoryDisplayName(SelectedCategory))
                                        </a>
                                    </li>
                                    @if (!string.IsNullOrEmpty(SelectedFolder))
                                    {
                                        var segments = SelectedFolder.Split('/');
                                        var currentPath = "";
                                        foreach (var segment in segments)
                                        {
                                            currentPath = string.IsNullOrEmpty(currentPath) ? segment : $"{currentPath}/{segment}";
                                            <li class="breadcrumb-item @(currentPath == SelectedFolder ? "active" : "")">
                                                @if (currentPath == SelectedFolder)
                                                {
                                                    @segment
                                                }
                                                else
                                                {
                                                    <a href="javascript:void(0)" @onclick="() => SelectFolder(currentPath)">
                                                        @segment
                                                    </a>
                                                }
                                            </li>
                                        }
                                    }
                                </ol>
                            </nav>
                        </div>
                        <div class="toolbar-actions">
                            <div class="input-group">
                                <input type="text" class="form-control form-control-sm" placeholder="Search files..."
                                       @bind="SearchTerm" @bind:event="oninput" @onkeyup="HandleSearchKeyUp">
                                <button class="btn btn-sm btn-outline-secondary" type="button" @onclick="() => SearchFiles()">
                                    <i class="fa-light fa-search"></i>
                                </button>
                            </div>
                            <div class="btn-group ms-2">
                                <button class="btn btn-sm @(ViewMode == "grid" ? "btn-primary" : "btn-outline-primary")" 
                                        @onclick='() => ViewMode = "grid"' title="Grid view">
                                    <i class="fa-light fa-grid-2"></i>
                                </button>
                                <button class="btn btn-sm @(ViewMode == "list" ? "btn-primary" : "btn-outline-primary")" 
                                        @onclick='() => ViewMode = "list"' title="List view">
                                    <i class="fa-light fa-list"></i>
                                </button>
                            </div>
                            <div class="btn-group ms-2">
                                <button class="btn btn-sm btn-outline-secondary" @onclick="RefreshFiles" title="Refresh">
                                    <i class="fa-light fa-sync"></i>
                                </button>
                                @if (SelectedFiles.Count > 0)
                                {
                                    <button class="btn btn-sm btn-outline-danger" @onclick="DeleteSelectedFiles" title="Delete selected">
                                        <i class="fa-light fa-trash"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="file-container">
                        <div class="upload-zone" @ondragenter="HandleDragEnter" @ondragleave="HandleDragLeave">
                            <CdnFileUpload Title="Upload Files to Current Folder"
                                           Description="Drag files here or click to browse"
                                           Category="@SelectedCategory"
                                           FolderPath="@SelectedFolder"
                                           Multiple="true"
                                           UseChunkedUpload="true"
                                           HideFileList="true"
                                           OnFileUploaded="@(file => HandleFileUploaded(file))"
                                           OnFilesUploaded="@(files => HandleFilesUploaded(files))" />
                        </div>

                        @if (IsLoading)
                        {
                            <div class="text-center p-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2">Loading files...</p>
                            </div>
                        }
                        else if (!Files.Any())
                        {
                            <div class="empty-state">
                                <div class="empty-icon">
                                    <i class="fa-light fa-folder-open"></i>
                                </div>
                                <h4>No files found</h4>
                                <p class="text-muted">This folder is empty. Upload files to get started.</p>
                            </div>
                        }
                        else
                        {
                            <div class="files-view @ViewMode">
                                @foreach (var file in Files)
                                {
                                    <div class="file-item @(SelectedFiles.Contains(file) ? "selected" : "")" 
                                         @onclick="() => ToggleFileSelection(file)" 
                                         @ondblclick="() => ViewFile(file)">
                                        <div class="file-checkbox">
                                            <input type="checkbox" class="form-check-input" 
                                                   checked="@(SelectedFiles.Contains(file))" 
                                                   @onclick:stopPropagation="true"
                                                   @onchange="e => ToggleFileSelection(file, (bool)e.Value)" />
                                        </div>
                                        <div class="file-icon">
                                            @GetFileIcon(file)
                                        </div>
                                        <div class="file-details">
                                            <div class="file-name" title="@file.FileName">@file.FileName</div>
                                            <div class="file-meta">
                                                <span class="file-size">@FormatFileSize(file.Size)</span>
                                                @if (file.UploadDate.HasValue)
                                                {
                                                    <span class="mx-1">•</span>
                                                    <span class="file-date">@FormatDate(file.UploadDate.Value)</span>
                                                }
                                            </div>
                                        </div>
                                        <div class="file-actions">
                                            <button class="btn btn-sm btn-outline-primary" title="View" 
                                                    @onclick:stopPropagation="true"
                                                    @onclick="() => ViewFile(file)">
                                                <i class="fa-light fa-eye"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary" title="Rename" 
                                                    @onclick:stopPropagation="true"
                                                    @onclick="() => RenameFile(file)">
                                                <i class="fa-light fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" title="Delete" 
                                                    @onclick:stopPropagation="true"
                                                    @onclick="() => DeleteFile(file)">
                                                <i class="fa-light fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>

                @if (ShowFilePreview)
                {
                    <div class="explorer-preview">
                        <div class="preview-header">
                            <h5>File Preview</h5>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="ClosePreview">
                                <i class="fa-light fa-xmark"></i>
                            </button>
                        </div>
                        <div class="preview-content">
                            @if (PreviewFile != null)
                            {
                                <CdnFilePreview FileUrl="@PreviewFile.Url"
                                                FileName="@PreviewFile.FileName"
                                                ContentType="@PreviewFile.ContentType"
                                                FileSize="@PreviewFile.Size"
                                                EnableDelete="true"
                                                EnableRename="true"
                                                OnDelete="@(() => DeleteFile(PreviewFile))"
                                                OnRename="@(() => RenameFile(PreviewFile))" />
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else if (CurrentView == "api")
        {
            <div class="api-tester">
                <div class="api-sidebar">
                    <div class="api-endpoints">
                        <div class="sidebar-header">
                            <h5>Available Endpoints</h5>
                        </div>
                        <div class="endpoint-group">
                            <div class="endpoint-group-title">Basic Operations</div>
                            <div class="endpoint-list">
                                @foreach (var endpoint in GetBasicEndpoints())
                                {
                                    <div class="endpoint-item @(SelectedEndpoint == endpoint ? "active" : "")" 
                                         @onclick="() => SelectEndpoint(endpoint)">
                                        <span class="endpoint-method @endpoint.Method.ToLower()">@endpoint.Method</span>
                                        <span class="endpoint-path">@endpoint.Path</span>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="endpoint-group">
                            <div class="endpoint-group-title">File Operations</div>
                            <div class="endpoint-list">
                                @foreach (var endpoint in GetFileEndpoints())
                                {
                                    <div class="endpoint-item @(SelectedEndpoint == endpoint ? "active" : "")" 
                                         @onclick="() => SelectEndpoint(endpoint)">
                                        <span class="endpoint-method @endpoint.Method.ToLower()">@endpoint.Method</span>
                                        <span class="endpoint-path">@endpoint.Path</span>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="endpoint-group">
                            <div class="endpoint-group-title">Diagnostics</div>
                            <div class="endpoint-list">
                                @foreach (var endpoint in GetDiagnosticEndpoints())
                                {
                                    <div class="endpoint-item @(SelectedEndpoint == endpoint ? "active" : "")" 
                                         @onclick="() => SelectEndpoint(endpoint)">
                                        <span class="endpoint-method @endpoint.Method.ToLower()">@endpoint.Method</span>
                                        <span class="endpoint-path">@endpoint.Path</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="api-content">
                    <div class="api-request">
                        <h5>Request</h5>
                        <div class="endpoint-url">
                            <div class="input-group">
                                <span class="input-group-text">@(SelectedEndpoint?.Method ?? "GET")</span>
                                <input type="text" class="form-control" value="@(GetFullApiUrl(SelectedEndpoint?.Path ?? ""))" readonly />
         <button class="btn btn-outline-secondary" type="button"
        @onclick='() => JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", GetFullApiUrl(SelectedEndpoint?.Path ?? ""))'>
    <i class="fa-light fa-copy"></i>
</button>
                            </div>
                        </div>

                        @if (SelectedEndpoint != null)
                        {
                            <div class="endpoint-description">
                                <p>@SelectedEndpoint.Description</p>
                            </div>

                            @if (SelectedEndpoint.Parameters.Any())
                            {
                                <div class="parameters-section mt-3">
                                    <h6>Parameters</h6>
                                    <div class="parameters-list">
                                        @foreach (var param in SelectedEndpoint.Parameters)
                                        {
                                            <div class="parameter-item">
                                                <div class="parameter-name">
                                                    <label>@param.Name</label>
                                                    @if (param.Required)
                                                    {
                                                        <span class="text-danger">*</span>
                                                    }
                                                </div>
                                                @if (param.Type == "file")
                                                {
                                                    <InputFile OnChange="@(e => HandleFileInputChange(param.Name, e))" class="form-control" />
                                                }
                                                else if (param.Type == "select" && param.Options != null)
                                                {
                                                    <select class="form-select" 
                                                            @onchange="e => UpdateParameterValue(param.Name, e.Value.ToString())">
                                                        @foreach (var option in param.Options)
                                                        {
                                                            <option value="@option">@option</option>
                                                        }
                                                    </select>
                                                }
                                                else
                                                {
                                                    <input type="text" class="form-control" 
                                                           placeholder="@param.Description" 
                                                           value="@GetParameterValue(param.Name)"
                                                           @onchange="e => UpdateParameterValue(param.Name, e.Value.ToString())" />
                                                }
                                                <div class="parameter-description">
                                                    <small class="text-muted">@param.Description</small>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }

                            @if (SelectedEndpoint.BodyTemplate != null)
                            {
                                <div class="request-body mt-3">
                                    <h6>Request Body</h6>
                                    <div class="code-editor">
                                        <textarea class="form-control code-editor-textarea" rows="5" 
                                                  @bind="RequestBody" @bind:event="oninput"></textarea>
                                    </div>
                                    <button class="btn btn-sm btn-outline-secondary mt-1" 
                                            @onclick="ResetRequestBody">
                                        Reset to Default
                                    </button>
                                </div>
                            }

                            <div class="request-actions mt-3">
                                <button class="btn btn-primary" @onclick="ExecuteRequest" disabled="@IsRequestExecuting">
                                    @if (IsRequestExecuting)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                        <span>Executing...</span>
                                    }
                                    else
                                    {
                                        <span>Execute Request</span>
                                    }
                                </button>
                            </div>
                        }
                    </div>

                    <div class="api-response @(!string.IsNullOrEmpty(ResponseJson) ? "with-response" : "")">
                        <h5>Response</h5>
                        @if (IsRequestExecuting)
                        {
                            <div class="text-center p-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2">Executing request...</p>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(ResponseJson))
                        {
                            <div class="response-details">
                                <div class="response-status @(ResponseStatusClass)">
                                    Status: @ResponseStatus
                                </div>
                                <div class="response-time">
                                    Response Time: @ResponseTime ms
                                </div>
                            </div>
                            <div class="response-body">
                                <div class="code-editor">
                                    <pre class="response-json">@ResponseJson</pre>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <div class="empty-icon">
                                    <i class="fa-light fa-file-code"></i>
                                </div>
                                <p class="text-muted">Execute a request to see the response</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        else if (CurrentView == "diagnostics")
        {
            <div class="diagnostics-panel">
                <div class="diagnostics-sidebar">
                    <div class="diagnostics-menu">
                        <div class="sidebar-header">
                            <h5>Diagnostics Tools</h5>
                        </div>
                        <div class="diagnostics-list">
                            <div class="diagnostics-item @(SelectedDiagnostic == "system-info" ? "active" : "")"
                                 @onclick='() => SelectDiagnostic("system-info")'>
                                <i class="fa-light fa-info-circle"></i>
                                <span>System Information</span>
                            </div>
                            <div class="diagnostics-item @(SelectedDiagnostic == "storage-stats" ? "active" : "")"
                                 @onclick='()=> SelectDiagnostic("storage-stats")'>
                                <i class="fa-light fa-chart-pie"></i>
                                <span>Storage Statistics</span>
                            </div>
                            <div class="diagnostics-item @(SelectedDiagnostic == "file-consistency" ? "active" : "")"
                                 @onclick='() => SelectDiagnostic("file-consistency")'>
                                <i class="fa-light fa-check-double"></i>
                                <span>File Consistency Check</span>
                            </div>
                            <div class="diagnostics-item @(SelectedDiagnostic == "api-status" ? "active" : "")"
                                 @onclick='() => SelectDiagnostic("api-status")'>
                                <i class="fa-light fa-bolt"></i>
                                <span>API Status</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="diagnostics-content">
                    <div class="diagnostics-header">
                        <h4>
                            @switch (SelectedDiagnostic)
                            {
                                case "system-info":
                                    <span><i class="fa-light fa-info-circle me-2"></i>System Information</span>
                                    break;
                                case "storage-stats":
                                    <span><i class="fa-light fa-chart-pie me-2"></i>Storage Statistics</span>
                                    break;
                                case "file-consistency":
                                    <span><i class="fa-light fa-check-double me-2"></i>File Consistency Check</span>
                                    break;
                                case "api-status":
                                    <span><i class="fa-light fa-bolt me-2"></i>API Status</span>
                                    break;
                                case "cdn-config":
                                    <span><i class="fa-light fa-gear me-2"></i>CDN Configuration</span>
                                    break;
                                default:
                                    <span>Select a diagnostic tool</span>
                                    break;
                            }
                        </h4>
                        <div class="diagnostics-actions">
                            <button class="btn btn-outline-primary" @onclick="RunSelectedDiagnostic">
                                <i class="fa-light fa-play me-1"></i> Run Diagnostic
                            </button>
                        </div>
                    </div>

                    <div class="diagnostics-results">
                        @if (IsDiagnosticRunning)
                        {
                            <div class="text-center p-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2">Running diagnostic...</p>
                            </div>
                        }
                        else if (DiagnosticResults != null)
                        {
                            @switch (SelectedDiagnostic)
                            {
                                case "system-info":
                                    <div class="system-info-results">
                                        <div class="info-section">
                                            <h5>Environment</h5>
                                            <div class="info-grid">
                                                <div class="info-item">
                                                    <div class="info-label">OS Version</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("osVersion").GetString()</div>
                                                </div>
                                                <div class="info-item">
                                                    <div class="info-label">Machine Name</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("machineName").GetString()</div>
                                                </div>
                                                <div class="info-item">
                                                    <div class="info-label">User Name</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("userName").GetString()</div>
                                                </div>
                                                <div class="info-item">
                                                    <div class="info-label">Process Path</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("processPath").GetString()</div>
                                                </div>
                                                <div class="info-item">
                                                    <div class="info-label">Current Directory</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("currentDirectory").GetString()</div>
                                                </div>
                                                <div class="info-item">
                                                    <div class="info-label">ASPNET Environment</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("aspnetEnvironment").GetString()</div>
                                                </div>
                                                <div class="info-item">
                                                    <div class="info-label">Process ID</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("processId").GetInt32()</div>
                                                </div>
                                                <div class="info-item">
                                                    <div class="info-label">64-bit Process</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("is64BitProcess").GetBoolean()</div>
                                                </div>
                                                <div class="info-item">
                                                    <div class="info-label">64-bit OS</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("is64BitOperatingSystem").GetBoolean()</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    break;
                                case "storage-stats":
                                    if (DiagnosticResults.Value.TryGetProperty("categories", out var categories))
                                    {
                                        <div class="storage-stats-results">
                                            <div class="storage-overview">
                                                <div class="total-storage">
                                                    <h5>Total Storage Usage</h5>
                                                    <div class="storage-value">@DiagnosticResults.Value.GetProperty("formattedTotalSize").GetString()</div>
                                                </div>
                                                <div class="storage-chart">
                                                    <!-- Placeholder for chart -->
                                                    <div class="chart-placeholder">
                                                        <i class="fa-light fa-chart-pie fa-3x text-muted"></i>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="category-stats">
                                                <h5>Category Breakdown</h5>
                                                <div class="category-table">
                                                    <table class="table table-hover">
                                                        <thead>
                                                            <tr>
                                                                <th>Category</th>
                                                                <th>Files</th>
                                                                <th>Size</th>
                                                                <th>Last Modified</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var category in categories.EnumerateArray())
                                                            {
                                                                <tr>
                                                                    <td>@category.GetProperty("category").GetString()</td>
                                                                    <td>@category.GetProperty("fileCount").GetInt32()</td>
                                                                    <td>@category.GetProperty("formattedSize").GetString()</td>
                                                                    <td>@FormatDate(DateTime.Parse(category.GetProperty("lastModified").GetString()))</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    break;
                                case "file-consistency":
                                    if (DiagnosticResults.Value.TryGetProperty("details", out var details))
                                    {
                                        <div class="consistency-results">
                                            <div class="consistency-summary">
                                                <div class="summary-item">
                                                    <div class="summary-label">Files Checked</div>
                                                    <div class="summary-value">@DiagnosticResults.Value.GetProperty("totalChecked").GetInt32()</div>
                                                </div>
                                                <div class="summary-item">
                                                    <div class="summary-label">Missing Files</div>
                                                    <div class="summary-value @(DiagnosticResults.Value.GetProperty("missingFiles").GetInt32() > 0 ? "text-danger" : "")">
                                                        @DiagnosticResults.Value.GetProperty("missingFiles").GetInt32()
                                                    </div>
                                                </div>
                                                <div class="summary-item">
                                                    <div class="summary-label">URL Resolution Failures</div>
                                                    <div class="summary-value @(DiagnosticResults.Value.GetProperty("urlResolutionFailures").GetInt32() > 0 ? "text-danger" : "")">
                                                        @DiagnosticResults.Value.GetProperty("urlResolutionFailures").GetInt32()
                                                    </div>
                                                </div>
                                                <div class="summary-item">
                                                    <div class="summary-label">Path Inconsistencies</div>
                                                    <div class="summary-value @(DiagnosticResults.Value.GetProperty("inconsistentPaths").GetInt32() > 0 ? "text-danger" : "")">
                                                        @DiagnosticResults.Value.GetProperty("inconsistentPaths").GetInt32()
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="issues-container">
                                                @if (DiagnosticResults.Value.GetProperty("missingFiles").GetInt32() > 0 ||
                                                     DiagnosticResults.Value.GetProperty("urlResolutionFailures").GetInt32() > 0 ||
                                                     DiagnosticResults.Value.GetProperty("inconsistentPaths").GetInt32() > 0)
                                                {
                                                    <div class="issues-list mt-4">
                                                        <h5>Issues Found</h5>
                                                        <table class="table table-sm">
                                                            <thead>
                                                                <tr>
                                                                    <th>File Name</th>
                                                                    <th>Status</th>
                                                                    <th>URL</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @foreach (var item in details.EnumerateArray())
                                                                {
                                                                    if (item.GetProperty("status").GetString() != "OK")
                                                                    {
                                                                        <tr>
                                                                            <td>@item.GetProperty("fileName").GetString()</td>
                                                                            <td>
                                                                                <span class="badge bg-danger">
                                                                                    @item.GetProperty("status").GetString()
                                                                                </span>
                                                                            </td>
                                                                            <td class="text-truncate" style="max-width: 300px;">
                                                                                @item.GetProperty("url").GetString()
                                                                            </td>
                                                                        </tr>
                                                                    }
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="consistency-success mt-4">
                                                        <i class="fa-light fa-check-circle fa-3x text-success"></i>
                                                        <h5 class="mt-3">All files are consistent!</h5>
                                                        <p class="text-muted">No inconsistencies were found in the file system.</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                    break;
                                case "api-status":
                                    if (DiagnosticResults.Value.TryGetProperty("checks", out var checks))
                                    {
                                        <div class="api-status-results">
                                            <div class="status-overview">
                                                <div class="overall-status @(DiagnosticResults.Value.GetProperty("overallStatus").GetString() == "Passed" ? "text-success" : "text-danger")">
                                                    <i class="fa-light @(DiagnosticResults.Value.GetProperty("overallStatus").GetString() == "Passed" ? "fa-check-circle" : "fa-times-circle") fa-2x"></i>
                                                    <h5>Overall Status: @DiagnosticResults.Value.GetProperty("overallStatus").GetString()</h5>
                                                </div>
                                                <div class="timestamp">
                                                    Last checked: @DiagnosticResults.Value.GetProperty("timestamp").GetDateTime()
                                                </div>
                                            </div>
                                            <div class="status-checks mt-4">
                                                @foreach (var check in checks.EnumerateArray())
                                                {
                                                    <div class="status-check-item">
                                                        <div class="check-icon @(check.GetProperty("status").GetString() == "Passed" ? "text-success" : check.GetProperty("status").GetString() == "Warning" ? "text-warning" : "text-danger")">
                                                            <i class="fa-light @(check.GetProperty("status").GetString() == "Passed" ? "fa-check-circle" : check.GetProperty("status").GetString() == "Warning" ? "fa-exclamation-triangle" : "fa-times-circle")"></i>
                                                        </div>
                                                        <div class="check-details">
                                                            <div class="check-name">@check.GetProperty("name").GetString()</div>
                                                            <div class="check-message">@check.GetProperty("details").GetString()</div>
                                                        </div>
                                                        <div class="check-status @(check.GetProperty("status").GetString() == "Passed" ? "text-success" : check.GetProperty("status").GetString() == "Warning" ? "text-warning" : "text-danger")">
                                                            @check.GetProperty("status").GetString()
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                    break;
                                case "cdn-config":
                                    <div class="cdn-config-results">
                                        <div class="config-section">
                                            <h5>Main Configuration</h5>
                                            <div class="info-grid">
                                                <div class="info-item">
                                                    <div class="info-label">CDN Base URL</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("configuredBaseUrl").GetString()</div>
                                                </div>
                                                <div class="info-item">
                                                    <div class="info-label">Storage Path</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("configuredStoragePath").GetString()</div>
                                                </div>
                                                <div class="info-item">
                                                    <div class="info-label">API Key</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("configuredApiKey").GetString()</div>
                                                </div>
                                                <div class="info-item">
                                                    <div class="info-label">Direct Access Available</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("directAccessAvailable").GetBoolean()</div>
                                                </div>
                                                <div class="info-item">
                                                    <div class="info-label">Development Environment</div>
                                                    <div class="info-value">@DiagnosticResults.Value.GetProperty("isDevEnvironment").GetBoolean()</div>
                                                </div>
                                            </div>
                                        </div>

                                        @if (DiagnosticResults.Value.TryGetProperty("categories", out var configCategories))
                                        {
                                            <div class="config-section mt-4">
                                                <h5>Storage Status</h5>
                                                <table class="table table-sm">
                                                    <thead>
                                                        <tr>
                                                            <th>Category</th>
                                                            <th>Path</th>
                                                            <th>Exists</th>
                                                            <th>Writable</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var cat in configCategories.EnumerateArray())
                                                        {
                                                            <tr>
                                                                <td>@cat.GetProperty("name").GetString()</td>
                                                                <td class="text-truncate" style="max-width: 300px;">
                                                                    @cat.GetProperty("path").GetString()
                                                                </td>
                                                                <td>
                                                                    @if (cat.GetProperty("exists").GetBoolean())
                                                                    {
                                                                        <i class="fa-light fa-check-circle text-success"></i>
                                                                    }
                                                                    else
                                                                    {
                                                                        <i class="fa-light fa-times-circle text-danger"></i>
                                                                    }
                                                                </td>
                                                                <td>
                                                                    @if (cat.GetProperty("canWrite").GetBoolean())
                                                                    {
                                                                        <i class="fa-light fa-check-circle text-success"></i>
                                                                    }
                                                                    else
                                                                    {
                                                                        <i class="fa-light fa-times-circle text-danger"></i>
                                                                    }
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        }
                                    </div>
                                    break;
                            }
                        }
                        else
                        {
                            <div class="empty-state">
                                <div class="empty-icon">
                                    <i class="fa-light fa-chart-line"></i>
                                </div>
                                <p class="text-muted">Run the diagnostic to see results</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    @if (_showRenameDialog)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Rename File</h5>
                        <button type="button" class="btn-close" @onclick="() => _showRenameDialog = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="newFileName">New file name:</label>
                            <input type="text" class="form-control" id="newFileName" @bind="_newFileName" />
                            <small class="form-text text-muted">Enter the new name without extension.</small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => _showRenameDialog = false">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="PerformRename">Save</button>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        </div>
    }

    @if (_showCreateFolderDialog)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Create Folder</h5>
                        <button type="button" class="btn-close" @onclick="() => _showCreateFolderDialog = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="newFolderName">Folder name:</label>
                            <input type="text" class="form-control" id="newFolderName" @bind="_newFolderName" />
                            <small class="form-text text-muted">Enter a name for the new folder.</small>
                        </div>
                        <div class="form-group mt-3">
                            <label for="folderCategory">Category:</label>
                            <select class="form-select" id="folderCategory" @bind="_newFolderCategory">
                                @foreach (var category in Categories)
                                {
                                    <option value="@category.Name" selected="@(category.Name == SelectedCategory)">@category.DisplayName</option>
                                }
                            </select>
                        </div>
                        <div class="form-group mt-3">
                            <label for="parentFolderPath">Parent folder:</label>
                            <select class="form-select" id="parentFolderPath" @bind="_parentFolderPath">
                                <option value="">Root Folder</option>
                                @foreach (var folder in Folders)
                                {
                                    <option value="@folder.Path" selected="@(folder.Path == SelectedFolder)">@folder.Path</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => _showCreateFolderDialog = false">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="CreateFolder">Create</button>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        </div>
    }
</div>

@code {
    // Dashboard state
    private bool UseDirectService { get; set; } = true;
    private string CurrentView { get; set; } = "files";
    private bool IsLoading { get; set; } = false;
    private string StatusMessage { get; set; }
    private string StatusAlertClass { get; set; } = "alert-info";

    // Files view state
    private List<CdnCategory> Categories { get; set; } = new List<CdnCategory>();
    private List<CdnFolder> Folders { get; set; } = new List<CdnFolder>();
    private List<FileViewModel> Files { get; set; } = new List<FileViewModel>();
    private List<FileViewModel> SelectedFiles { get; set; } = new List<FileViewModel>();
    private string SelectedCategory { get; set; } = "documents";
    private string SelectedFolder { get; set; } = "";
    private bool ShowFilePreview { get; set; } = false;
    private FileViewModel PreviewFile { get; set; }
    private string ViewMode { get; set; } = "grid";
    private string SearchTerm { get; set; } = "";
    private bool _isDragging = false;

    // API view state
    private ApiEndpoint SelectedEndpoint { get; set; }
    private Dictionary<string, string> ParameterValues { get; set; } = new Dictionary<string, string>();
    private Dictionary<string, IBrowserFile> ParameterFiles { get; set; } = new Dictionary<string, IBrowserFile>();
    private string RequestBody { get; set; }
    private string ResponseJson { get; set; }
    private string ResponseStatus { get; set; }
    private string ResponseStatusClass { get; set; } = "";
    private int ResponseTime { get; set; }
    private bool IsRequestExecuting { get; set; } = false;

    // Diagnostics view state
    private string SelectedDiagnostic { get; set; } = "system-info";
    private bool IsDiagnosticRunning { get; set; } = false;
    private JsonElement? DiagnosticResults { get; set; }

    // Modals
    private bool _showRenameDialog = false;
    private bool _showCreateFolderDialog = false;
    private string _newFileName = "";
    private string _newFolderName = "";
    private string _newFolderCategory = "";
    private string _parentFolderPath = "";
    private FileViewModel _selectedFile;

    // Dashboard stats
    private DashboardStats Stats { get; set; } = new DashboardStats();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            // Load categories
            await LoadCategories();

            // Load folders for the selected category
            await LoadFolders();

            // Load files for the selected category and folder
            await LoadFiles();

            // Update dashboard stats
            await UpdateDashboardStats();

            IsLoading = false;
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error loading dashboard data: {ex.Message}";
            StatusAlertClass = "alert-danger";
            IsLoading = false;
        }

        StateHasChanged();
    }

    private async Task LoadCategories()
    {
        try
        {
            if (UseDirectService)
            {
                Categories = await CdnService.GetCategoriesAsync();
            }
            else
            {
                var client = HttpClientFactory.CreateClient();
                var apiKey = CdnService.GetApiKey();
                client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);
                
                var response = await client.GetFromJsonAsync<ApiResponse<List<CdnCategory>>>(
                    $"https://portal.roovia.co.za/api/cdn/categories");
                
                if (response?.success == true && response.data != null)
                {
                    Categories = response.data;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
            throw;
        }
    }

    private async Task LoadFolders()
    {
        try
        {
            if (UseDirectService)
            {
                Folders = await CdnService.GetFoldersAsync(SelectedCategory);
            }
            else
            {
                var client = HttpClientFactory.CreateClient();
                var apiKey = CdnService.GetApiKey();
                client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);
                
                var response = await client.GetFromJsonAsync<ApiResponse<List<CdnFolder>>>(
                    $"https://portal.roovia.co.za/api/cdn/folders?category={SelectedCategory}");
                
                if (response?.success == true && response.data != null)
                {
                    Folders = response.data;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading folders: {ex.Message}");
            throw;
        }
    }

    private async Task LoadFiles()
    {
        try
        {
            if (UseDirectService)
            {
                var files = await CdnService.GetFilesAsync(SelectedCategory, SelectedFolder, SearchTerm);
                Files = files.Select(f => new FileViewModel
                {
                    Id = f.Id,
                    FileName = f.FileName,
                    Url = f.Url,
                    ContentType = f.ContentType,
                    Size = f.FileSize,
                    UploadDate = f.UploadDate
                }).ToList();
            }
            else
            {
                var client = HttpClientFactory.CreateClient();
                var apiKey = CdnService.GetApiKey();
                client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);
                
                var url = $"https://portal.roovia.co.za/api/cdn/files?category={SelectedCategory}";
                if (!string.IsNullOrEmpty(SelectedFolder))
                {
                    url += $"&folder={Uri.EscapeDataString(SelectedFolder)}";
                }
                if (!string.IsNullOrEmpty(SearchTerm))
                {
                    url += $"&search={Uri.EscapeDataString(SearchTerm)}";
                }
                
                var response = await client.GetFromJsonAsync<ApiResponse<List<FileDto>>>(url);
                
                if (response?.success == true && response.data != null)
                {
                    Files = response.data.Select(f => new FileViewModel
                    {
                        Id = f.id,
                        FileName = f.fileName,
                        Url = f.url,
                        ContentType = f.contentType,
                        Size = f.fileSize,
                        UploadDate = f.uploadDate
                    }).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading files: {ex.Message}");
            throw;
        }
    }

    private async Task UpdateDashboardStats()
    {
        try
        {
            Stats = new DashboardStats
            {
                TotalFiles = Files.Count,
                TotalFolders = Folders.Count,
                TotalStorage = Files.Sum(f => f.Size),
                LastUpload = Files.Any() ? Files.Max(f => f.UploadDate) : null
            };

            // If using API, get more accurate stats
            if (!UseDirectService)
            {
                try
                {
                    var client = HttpClientFactory.CreateClient();
                    var apiKey = CdnService.GetApiKey();
                    client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);
                    
                    var response = await client.GetFromJsonAsync<JsonDocument>(
                        $"https://portal.roovia.co.za/api/diag/disk-usage");
                    
                    if (response != null)
                    {
                        var root = response.RootElement;
                        if (root.TryGetProperty("success", out var success) && success.GetBoolean())
                        {
                            Stats.TotalStorage = root.GetProperty("totalSize").GetInt64();
                            
                            if (root.TryGetProperty("categories", out var categories))
                            {
                                int fileCount = 0;
                                foreach (var category in categories.EnumerateArray())
                                {
                                    fileCount += category.GetProperty("fileCount").GetInt32();
                                }
                                Stats.TotalFiles = fileCount;
                            }
                        }
                    }
                }
                catch
                {
                    // Ignore errors and use the default stats
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating dashboard stats: {ex.Message}");
        }
    }

    private async Task SelectCategory(string category)
    {
        SelectedCategory = category;
        SelectedFolder = "";
        SelectedFiles.Clear();
        SearchTerm = "";
        
        await LoadFolders();
        await LoadFiles();
        
        StateHasChanged();
    }

    private async Task SelectFolder(string folder)
    {
        SelectedFolder = folder;
        SelectedFiles.Clear();
        
        await LoadFiles();
        
        StateHasChanged();
    }

    private void ViewFile(FileViewModel file)
    {
        PreviewFile = file;
        ShowFilePreview = true;
        StateHasChanged();
    }

    private void ClosePreview()
    {
        ShowFilePreview = false;
        PreviewFile = null;
        StateHasChanged();
    }

    private void ToggleFileSelection(FileViewModel file)
    {
        if (SelectedFiles.Contains(file))
        {
            SelectedFiles.Remove(file);
        }
        else
        {
            SelectedFiles.Add(file);
        }
        StateHasChanged();
    }

    private void ToggleFileSelection(FileViewModel file, bool selected)
    {
        if (selected && !SelectedFiles.Contains(file))
        {
            SelectedFiles.Add(file);
        }
        else if (!selected && SelectedFiles.Contains(file))
        {
            SelectedFiles.Remove(file);
        }
        StateHasChanged();
    }
    private async Task DeleteFile(FileViewModel file)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{file.FileName}'?");
            if (!confirmed)
                return;

            IsLoading = true;
            StateHasChanged();

            bool success;

            if (UseDirectService)
            {
                // Direct service call for production
                success = await CdnService.DeleteFileAsync(file.Url);
            }
            else
            {
                // HTTP client call for test environments
                var client = HttpClientFactory.CreateClient();
                var apiKey = CdnService.GetApiKey();
                client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);

                var response = await client.DeleteAsync(
                $"https://portal.roovia.co.za/api/cdn/delete?path={Uri.EscapeDataString(file.Url)}");

                success = response.IsSuccessStatusCode;
            }

            if (success)
            {
                Files.Remove(file);

                if (SelectedFiles.Contains(file))
                {
                    SelectedFiles.Remove(file);
                }

                if (PreviewFile == file)
                {
                    ShowFilePreview = false;
                    PreviewFile = null;
                }

                StatusMessage = $"File '{file.FileName}' deleted successfully.";
                StatusAlertClass = "alert-success";

                await UpdateDashboardStats();
            }
            else
            {
                StatusMessage = $"Failed to delete file '{file.FileName}'.";
                StatusAlertClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error deleting file: {ex.Message}";
            StatusAlertClass = "alert-danger";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task PerformRename()
    {
        if (_selectedFile == null || string.IsNullOrWhiteSpace(_newFileName))
        {
            StatusMessage = "Please enter a valid file name.";
            StatusAlertClass = "alert-danger";
            return;
        }

        try
        {
            IsLoading = true;
            _showRenameDialog = false;
            StateHasChanged();

            string newUrl;

            if (UseDirectService)
            {
                // Use direct service call for production
                newUrl = await CdnService.RenameFileAsync(_selectedFile.Url, _newFileName);
            }
            else
            {
                // Use API call for test environments
                var client = HttpClientFactory.CreateClient();
                var apiKey = CdnService.GetApiKey();
                client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);

                var renameRequest = new
                {
                    Path = _selectedFile.Url,
                    NewName = _newFileName
                };

                var response = await client.PostAsJsonAsync(
                $"https://portal.roovia.co.za/api/cdn/rename",
                renameRequest);

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<dynamic>();
                    newUrl = result?.url?.ToString();
                }
                else
                {
                    throw new Exception($"Failed to rename file: {response.ReasonPhrase}");
                }
            }

            if (!string.IsNullOrEmpty(newUrl))
            {
                // Update file in list
                var extension = Path.GetExtension(_selectedFile.FileName);
                var newFileName = $"{_newFileName}{extension}";

                var index = Files.IndexOf(_selectedFile);
                if (index >= 0)
                {
                    Files[index].FileName = newFileName;
                    Files[index].Url = newUrl;
                }

                // Update selected file if needed
                if (PreviewFile == _selectedFile)
                {
                    PreviewFile.FileName = newFileName;
                    PreviewFile.Url = newUrl;
                }

                StatusMessage = $"File renamed successfully to '{newFileName}'.";
                StatusAlertClass = "alert-success";
            }
            else
            {
                StatusMessage = "Failed to rename file. No new URL returned.";
                StatusAlertClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error renaming file: {ex.Message}";
            StatusAlertClass = "alert-danger";
        }
        finally
        {
            IsLoading = false;
            _selectedFile = null;
            StateHasChanged();
        }
    }

    private async Task DeleteSelectedFiles()
    {
        if (!SelectedFiles.Any())
            return;

        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>(
            "confirm",
            $"Are you sure you want to delete {SelectedFiles.Count} selected files?");

            if (!confirmed)
                return;

            IsLoading = true;
            StateHasChanged();

            int successCount = 0;
            int failCount = 0;

            foreach (var file in SelectedFiles.ToList())
            {
                bool success;

                if (UseDirectService)
                {
                    // Direct service call for production
                    success = await CdnService.DeleteFileAsync(file.Url);
                }
                else
                {
                    // HTTP client call for test environments
                    var client = HttpClientFactory.CreateClient();
                    var apiKey = CdnService.GetApiKey();
                    client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);

                    var response = await client.DeleteAsync(
                    $"https://portal.roovia.co.za/api/cdn/delete?path={Uri.EscapeDataString(file.Url)}");

                    success = response.IsSuccessStatusCode;
                }

                if (success)
                {
                    Files.Remove(file);
                    SelectedFiles.Remove(file);

                    if (PreviewFile == file)
                    {
                        ShowFilePreview = false;
                        PreviewFile = null;
                    }

                    successCount++;
                }
                else
                {
                    failCount++;
                }
            }

            if (successCount > 0)
            {
                StatusMessage = $"Successfully deleted {successCount} files.";
                if (failCount > 0)
                {
                    StatusMessage += $" Failed to delete {failCount} files.";
                    StatusAlertClass = "alert-warning";
                }
                else
                {
                    StatusAlertClass = "alert-success";
                }

                await UpdateDashboardStats();
            }
            else
            {
                StatusMessage = "Failed to delete any files.";
                StatusAlertClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error deleting files: {ex.Message}";
            StatusAlertClass = "alert-danger";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    private void RenameFile(FileViewModel file)
    {
        _selectedFile = file;
        _newFileName = Path.GetFileNameWithoutExtension(file.FileName);
        _showRenameDialog = true;
        StateHasChanged();
    }

    private void ShowCreateFolderDialog()
    {
        _newFolderName = "";
        _newFolderCategory = SelectedCategory;
        _parentFolderPath = SelectedFolder;
        _showCreateFolderDialog = true;
        StateHasChanged();
    }

    private async Task CreateFolder()
    {
        if (string.IsNullOrWhiteSpace(_newFolderName))
        {
            StatusMessage = "Please enter a valid folder name.";
            StatusAlertClass = "alert-danger";
            return;
        }

        try
        {
            IsLoading = true;
            _showCreateFolderDialog = false;
            StateHasChanged();

            bool success;
            
            if (UseDirectService)
            {
                // For direct service, we need to use the API endpoint
                var client = HttpClientFactory.CreateClient();
                var apiKey = CdnService.GetApiKey();
                client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);
                
                var createRequest = new
                {
                    Category = _newFolderCategory,
                    ParentFolder = _parentFolderPath,
                    FolderName = _newFolderName
                };
                
                var response = await client.PostAsJsonAsync(
                    $"https://portal.roovia.co.za/api/cdn/create-folder", 
                    createRequest);
                
                success = response.IsSuccessStatusCode;
            }
            else
            {
                var client = HttpClientFactory.CreateClient();
                var apiKey = CdnService.GetApiKey();
                client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);
                
                var createRequest = new
                {
                    Category = _newFolderCategory,
                    ParentFolder = _parentFolderPath,
                    FolderName = _newFolderName
                };
                
                var response = await client.PostAsJsonAsync(
                    $"https://portal.roovia.co.za/api/cdn/create-folder", 
                    createRequest);
                
                success = response.IsSuccessStatusCode;
            }

            if (success)
            {
                // Reload folders
                SelectedCategory = _newFolderCategory;
                await LoadFolders();
                
                // If the folder was created in the current category, select it
                var newFolderPath = string.IsNullOrEmpty(_parentFolderPath) ? 
                    _newFolderName : $"{_parentFolderPath}/{_newFolderName}";
                    
                if (_newFolderCategory == SelectedCategory)
                {
                    SelectedFolder = newFolderPath;
                    await LoadFiles();
                }
                
                StatusMessage = $"Folder '{_newFolderName}' created successfully.";
                StatusAlertClass = "alert-success";
            }
            else
            {
                StatusMessage = $"Failed to create folder '{_newFolderName}'.";
                StatusAlertClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error creating folder: {ex.Message}";
            StatusAlertClass = "alert-danger";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task DeleteFolder(string folderPath)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>(
                "confirm", 
                $"Are you sure you want to delete the folder '{folderPath}'? This will delete all files in this folder.");
                
            if (!confirmed)
                return;

            IsLoading = true;
            StateHasChanged();

            bool success;
            
            if (UseDirectService)
            {
                // For direct service, we need to use the API endpoint
                var client = HttpClientFactory.CreateClient();
                var apiKey = CdnService.GetApiKey();
                client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);
                
                var response = await client.DeleteAsync(
                    $"https://portal.roovia.co.za/api/cdn/delete-folder?category={SelectedCategory}&path={Uri.EscapeDataString(folderPath)}&force=true");
                
                success = response.IsSuccessStatusCode;
            }
            else
            {
                var client = HttpClientFactory.CreateClient();
                var apiKey = CdnService.GetApiKey();
                client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);
                
                var response = await client.DeleteAsync(
                    $"https://portal.roovia.co.za/api/cdn/delete-folder?category={SelectedCategory}&path={Uri.EscapeDataString(folderPath)}&force=true");
                
                success = response.IsSuccessStatusCode;
            }

            if (success)
            {
                // Reload folders
                await LoadFolders();
                
                // If the current folder was deleted, go back to root
                if (SelectedFolder == folderPath || SelectedFolder.StartsWith($"{folderPath}/"))
                {
                    SelectedFolder = "";
                    await LoadFiles();
                }
                
                StatusMessage = $"Folder '{folderPath}' deleted successfully.";
                StatusAlertClass = "alert-success";
                
                await UpdateDashboardStats();
            }
            else
            {
                StatusMessage = $"Failed to delete folder '{folderPath}'.";
                StatusAlertClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error deleting folder: {ex.Message}";
            StatusAlertClass = "alert-danger";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshFiles()
    {
        await LoadFiles();
        StatusMessage = "Files refreshed successfully.";
        StatusAlertClass = "alert-success";
    }

    private void SwitchView(string view)
    {
        CurrentView = view;
        StateHasChanged();
    }

    private void HandleDragEnter()
    {
        _isDragging = true;
        StateHasChanged();
    }

    private void HandleDragLeave()
    {
        _isDragging = false;
        StateHasChanged();
    }

    private async Task HandleFileUploaded(CdnFileUpload.UploadedFileInfo file)
    {
        // Add to files list
        Files.Add(new FileViewModel
        {
            FileName = file.FileName,
            Url = file.Url,
            ContentType = file.ContentType,
            Size = file.Size,
            UploadDate = DateTime.Now
        });
        
        await UpdateDashboardStats();
        
        StateHasChanged();
    }

    private async Task HandleFilesUploaded(List<CdnFileUpload.UploadedFileInfo> files)
    {
        // Refresh the list instead of adding individually
        await LoadFiles();
        await UpdateDashboardStats();
        
        StatusMessage = $"Successfully uploaded {files.Count} files.";
        StatusAlertClass = "alert-success";
        
        StateHasChanged();
    }

    private async Task SearchFiles(KeyboardEventArgs e = null)
    {
        if (e != null && e.Key != "Enter")
            return;
            
        await LoadFiles();
    }

    private async Task HandleSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchFiles();
        }
    }

    private async Task RefreshDashboard()
    {
        await LoadDashboardData();
        StatusMessage = "Dashboard refreshed successfully.";
        StatusAlertClass = "alert-success";
    }

    private void ClearStatusMessage()
    {
        StatusMessage = null;
        StateHasChanged();
    }

    #region API Testing

    private void SelectEndpoint(ApiEndpoint endpoint)
    {
        SelectedEndpoint = endpoint;
        
        // Reset parameters
        ParameterValues.Clear();
        ParameterFiles.Clear();
        
        // Set default parameter values
        foreach (var param in endpoint.Parameters)
        {
            if (param.DefaultValue != null)
            {
                ParameterValues[param.Name] = param.DefaultValue;
            }
        }
        
        // Set default body
        RequestBody = endpoint.BodyTemplate;
        
        // Clear response
        ResponseJson = null;
        ResponseStatus = null;
        
        StateHasChanged();
    }

    private string GetParameterValue(string name)
    {
        return ParameterValues.ContainsKey(name) ? ParameterValues[name] : "";
    }

    private void UpdateParameterValue(string name, string value)
    {
        ParameterValues[name] = value;
    }

    private void HandleFileInputChange(string paramName, InputFileChangeEventArgs e)
    {
        ParameterFiles[paramName] = e.File;
    }

    private void ResetRequestBody()
    {
        RequestBody = SelectedEndpoint?.BodyTemplate;
        StateHasChanged();
    }

    private string GetFullApiUrl(string path)
    {
        var baseUrl = NavigationManager.BaseUri.TrimEnd('/');
        return $"{baseUrl}{path}";
    }

    private async Task ExecuteRequest()
    {
        if (SelectedEndpoint == null)
            return;

        try
        {
            IsRequestExecuting = true;
            StateHasChanged();

            var client = HttpClientFactory.CreateClient();
            var apiKey = CdnService.GetApiKey();
            client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);

            // Replace parameter placeholders in path
            var path = SelectedEndpoint.Path;
            foreach (var param in SelectedEndpoint.Parameters.Where(p => p.InPath))
            {
                if (ParameterValues.TryGetValue(param.Name, out var value))
                {
                    path = path.Replace($"{{{param.Name}}}", Uri.EscapeDataString(value));
                }
            }

            // Add query parameters
            var queryParams = new List<string>();
            foreach (var param in SelectedEndpoint.Parameters.Where(p => p.InQuery))
            {
                if (ParameterValues.TryGetValue(param.Name, out var value) && !string.IsNullOrEmpty(value))
                {
                    queryParams.Add($"{param.Name}={Uri.EscapeDataString(value)}");
                }
            }
            
            if (queryParams.Any())
            {
                path += (path.Contains("?") ? "&" : "?") + string.Join("&", queryParams);
            }

            // Build full URL
            var url = GetFullApiUrl(path);

            // Prepare for timing
            var watch = System.Diagnostics.Stopwatch.StartNew();
            HttpResponseMessage response;

            switch (SelectedEndpoint.Method.ToUpper())
            {
                case "GET":
                    response = await client.GetAsync(url);
                    break;
                case "POST":
                    if (SelectedEndpoint.Parameters.Any(p => p.Type == "file"))
                    {
                        // Handle file upload
                        var content = new MultipartFormDataContent();
                        
                        // Add file content
                        foreach (var param in SelectedEndpoint.Parameters.Where(p => p.Type == "file"))
                        {
                            if (ParameterFiles.TryGetValue(param.Name, out var file))
                            {
                                var fileContent = new StreamContent(file.OpenReadStream(10 * 1024 * 1024)); // 10MB max
                                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
                                content.Add(fileContent, param.Name, file.Name);
                            }
                        }
                        
                        // Add other form parameters
                        foreach (var param in SelectedEndpoint.Parameters.Where(p => p.InForm))
                        {
                            if (ParameterValues.TryGetValue(param.Name, out var value))
                            {
                                content.Add(new StringContent(value), param.Name);
                            }
                        }
                        
                        response = await client.PostAsync(url, content);
                    }
                    else if (!string.IsNullOrEmpty(RequestBody))
                    {
                        // Handle JSON body
                        var content = new StringContent(RequestBody, System.Text.Encoding.UTF8, "application/json");
                        response = await client.PostAsync(url, content);
                    }
                    else
                    {
                        // Empty body
                        response = await client.PostAsync(url, null);
                    }
                    break;
                case "PUT":
                    if (!string.IsNullOrEmpty(RequestBody))
                    {
                        var content = new StringContent(RequestBody, System.Text.Encoding.UTF8, "application/json");
                        response = await client.PutAsync(url, content);
                    }
                    else
                    {
                        response = await client.PutAsync(url, null);
                    }
                    break;
                case "DELETE":
                    response = await client.DeleteAsync(url);
                    break;
                default:
                    throw new NotSupportedException($"HTTP method {SelectedEndpoint.Method} not supported");
            }

            watch.Stop();
            ResponseTime = (int)watch.ElapsedMilliseconds;

            // Process response
            ResponseStatus = $"{(int)response.StatusCode} {response.ReasonPhrase}";
            ResponseStatusClass = response.IsSuccessStatusCode ? "success" : "error";

            // Format response JSON
            var responseBody = await response.Content.ReadAsStringAsync();
            try
            {
                if (!string.IsNullOrWhiteSpace(responseBody))
                {
                    using var doc = JsonDocument.Parse(responseBody);
                    ResponseJson = JsonSerializer.Serialize(doc, new JsonSerializerOptions
                    {
                        WriteIndented = true
                    });
                }
                else
                {
                    ResponseJson = "(No content)";
                }
            }
            catch
            {
                // Not JSON, just return as text
                ResponseJson = responseBody;
            }
        }
        catch (Exception ex)
        {
            ResponseStatus = "Error";
            ResponseStatusClass = "error";
            ResponseJson = $"Error: {ex.Message}";
        }
        finally
        {
            IsRequestExecuting = false;
            StateHasChanged();
        }
    }

    #endregion

    #region Diagnostics

    private void SelectDiagnostic(string diagnosticId)
    {
        SelectedDiagnostic = diagnosticId;
        DiagnosticResults = null;
        StateHasChanged();
    }

    private async Task RunSelectedDiagnostic()
    {
        try
        {
            IsDiagnosticRunning = true;
            StateHasChanged();

            var client = HttpClientFactory.CreateClient();
            var apiKey = CdnService.GetApiKey();
            client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);

            string url;
            switch (SelectedDiagnostic)
            {
                case "system-info":
                    url = $"https://portal.roovia.co.za/api/diag/environment";
                    break;
                case "storage-stats":
                    url = $"https://portal.roovia.co.za/api/diag/disk-usage";
                    break;
                case "file-consistency":
                    url = $"https://portal.roovia.co.za/api/diag/verify-files?limit=100";
                    break;
                case "api-status":
                    url = $"https://portal.roovia.co.za/api/diag/system-check";
                    break;
                case "cdn-config":
                    url = $"https://portal.roovia.co.za/api/diag/cdn";
                    // Also get storage info
                    var storageResponse = await client.GetFromJsonAsync<JsonDocument>($"https://portal.roovia.co.za/api/diag/storage");
                    if (storageResponse != null)
                    {
                        var result = await client.GetAsync(url);
                        var doc = await result.Content.ReadFromJsonAsync<JsonDocument>();
                        
                        // Merge the two results
                        var combinedJson = JsonSerializer.Serialize(new
                        {
                            success = true,
                            configuredStoragePath = doc.RootElement.GetProperty("configuredStoragePath").GetString(),
                            configuredBaseUrl = doc.RootElement.GetProperty("configuredBaseUrl").GetString(),
                            configuredApiKey = doc.RootElement.GetProperty("configuredApiKey").GetString(),
                            serviceCdnPath = doc.RootElement.GetProperty("serviceCdnPath").GetString(),
                            apiKeyFromService = doc.RootElement.GetProperty("apiKeyFromService").GetString(),
                            directAccessAvailable = doc.RootElement.GetProperty("directAccessAvailable").GetBoolean(),
                            isDevEnvironment = doc.RootElement.GetProperty("isDevEnvironment").GetBoolean(),
                            categories = storageResponse.RootElement.GetProperty("categories")
                        });
                        
                        DiagnosticResults = JsonDocument.Parse(combinedJson).RootElement;
                        IsDiagnosticRunning = false;
                        return;
                    }
                    break;
                default:
                    throw new NotSupportedException($"Diagnostic {SelectedDiagnostic} not supported");
            }

            var response = await client.GetFromJsonAsync<JsonDocument>(url);
            if (response != null)
            {
                DiagnosticResults = response.RootElement;
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error running diagnostic: {ex.Message}";
            StatusAlertClass = "alert-danger";
        }
        finally
        {
            IsDiagnosticRunning = false;
            StateHasChanged();
        }
    }

    #endregion

    #region Helper Methods and Classes

    private string GetCategoryDisplayName(string categoryName)
    {
        var category = Categories.FirstOrDefault(c => c.Name == categoryName);
        return category?.DisplayName ?? categoryName;
    }

    private int GetCategoryFileCount(string categoryName)
    {
        if (categoryName == SelectedCategory)
        {
            return Files.Count;
        }
        
        // Get count from stats (could be improved to get actual counts)
        return 0;
    }

    private string GetFolderDisplayName(string folderPath)
    {
        if (string.IsNullOrEmpty(folderPath))
            return "Root";
            
        var lastSegment = folderPath.Split('/').Last();
        return lastSegment;
    }

    private RenderFragment GetFileIcon(FileViewModel file)
    {
        string iconClass = file.ContentType switch
        {
            var ct when ct?.StartsWith("image/") ?? false => "fa-image",
            var ct when ct?.Contains("pdf") ?? false => "fa-file-pdf",
            var ct when ct?.Contains("word") ?? false => "fa-file-word",
            var ct when (ct?.Contains("excel") ?? false) || (ct?.Contains("spreadsheet") ?? false) => "fa-file-excel",
            var ct when (ct?.Contains("powerpoint") ?? false) || (ct?.Contains("presentation") ?? false) => "fa-file-powerpoint",
            var ct when ct?.StartsWith("video/") ?? false => "fa-file-video",
            var ct when ct?.StartsWith("audio/") ?? false => "fa-file-audio",
            var ct when (ct?.Contains("zip") ?? false) || (ct?.Contains("archive") ?? false) => "fa-file-archive",
            var ct when (ct?.StartsWith("text/") ?? false) || (ct?.Contains("javascript") ?? false) || (ct?.Contains("json") ?? false) => "fa-file-lines",
            _ => GetIconFromExtension(Path.GetExtension(file.FileName))
        };

        string colorClass = GetColorClassFromExtension(Path.GetExtension(file.FileName));

        return @<i class="fa-light @iconClass @colorClass"></i>;
    }

    private string GetIconFromExtension(string extension)
    {
        if (string.IsNullOrEmpty(extension))
            return "fa-file";

        return extension.ToLower() switch
        {
            ".pdf" => "fa-file-pdf",
            ".doc" or ".docx" => "fa-file-word",
            ".xls" or ".xlsx" or ".csv" => "fa-file-excel",
            ".ppt" or ".pptx" => "fa-file-powerpoint",
            ".zip" or ".rar" or ".7z" => "fa-file-archive",
            ".mp3" or ".wav" or ".ogg" => "fa-file-audio",
            ".mp4" or ".mov" or ".avi" => "fa-file-video",
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".webp" => "fa-image",
            ".txt" or ".log" => "fa-file-lines",
            ".html" or ".htm" => "fa-file-code",
            ".css" => "fa-file-code",
            ".js" or ".ts" => "fa-file-code",
            ".json" => "fa-file-code",
            ".xml" => "fa-file-code",
            ".cs" or ".vb" or ".java" or ".py" => "fa-file-code",
            ".md" => "fa-file-lines",
            _ => "fa-file"
        };
    }

    private string GetColorClassFromExtension(string extension)
    {
        if (string.IsNullOrEmpty(extension))
            return "text-secondary";

        return extension.ToLower() switch
        {
            ".pdf" => "text-danger",
            ".doc" or ".docx" => "text-primary",
            ".xls" or ".xlsx" or ".csv" => "text-success",
            ".ppt" or ".pptx" => "text-warning",
            ".zip" or ".rar" or ".7z" => "text-warning",
            ".mp3" or ".wav" or ".ogg" => "text-info",
            ".mp4" or ".mov" or ".avi" => "text-info",
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".webp" => "text-info",
            ".cs" or ".vb" or ".java" or ".py" => "text-primary",
            _ => "text-secondary"
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;

        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }

        return $"{len:0.##} {sizes[order]}";
    }

    private string FormatDate(DateTime date)
    {
        // If today, show time
        if (date.Date == DateTime.Today)
        {
            return $"Today at {date:h:mm tt}";
        }
        // If yesterday, show "Yesterday"
        else if (date.Date == DateTime.Today.AddDays(-1))
        {
            return $"Yesterday at {date:h:mm tt}";
        }
        // If this year, show month and day
        else if (date.Year == DateTime.Today.Year)
        {
            return $"{date:MMM d} at {date:h:mm tt}";
        }
        // Otherwise show full date
        else
        {
            return $"{date:MMM d, yyyy} at {date:h:mm tt}";
        }
    }

    private List<ApiEndpoint> GetBasicEndpoints()
    {
        return new List<ApiEndpoint>
        {
            new ApiEndpoint
            {
                Method = "GET",
                Path = "/api/cdn/ping",
                Description = "Simple ping endpoint to check if the API is responsive."
            },
            new ApiEndpoint
            {
                Method = "GET",
                Path = "/api/cdn/categories",
                Description = "Get all available CDN categories."
            },
            new ApiEndpoint
            {
                Method = "GET",
                Path = "/api/cdn/folders",
                Description = "Get folders for a specific category.",
                Parameters = new List<ApiParameter>
                {
                    new ApiParameter
                    {
                        Name = "category",
                        Description = "Category name",
                        Required = true,
                        InQuery = true,
                        Type = "select",
                        Options = Categories.Select(c => c.Name).ToList(),
                        DefaultValue = "documents"
                    }
                }
            }
        };
    }

    private List<ApiEndpoint> GetFileEndpoints()
    {
        return new List<ApiEndpoint>
        {
            new ApiEndpoint
            {
                Method = "GET",
                Path = "/api/cdn/files",
                Description = "Get files from a category and folder.",
                Parameters = new List<ApiParameter>
                {
                    new ApiParameter
                    {
                        Name = "category",
                        Description = "Category name",
                        Required = true,
                        InQuery = true,
                        Type = "select",
                        Options = Categories.Select(c => c.Name).ToList(),
                        DefaultValue = "documents"
                    },
                    new ApiParameter
                    {
                        Name = "folder",
                        Description = "Folder path (leave empty for root)",
                        Required = false,
                        InQuery = true
                    },
                    new ApiParameter
                    {
                        Name = "search",
                        Description = "Search term",
                        Required = false,
                        InQuery = true
                    }
                }
            },
            new ApiEndpoint
            {
                Method = "GET",
                Path = "/api/cdn/file-details",
                Description = "Get detailed information about a file.",
                Parameters = new List<ApiParameter>
                {
                    new ApiParameter
                    {
                        Name = "path",
                        Description = "File URL or path",
                        Required = true,
                        InQuery = true
                    }
                }
            },
            new ApiEndpoint
            {
                Method = "POST",
                Path = "/api/cdn/upload",
                Description = "Upload a file to the CDN.",
                Parameters = new List<ApiParameter>
                {
                    new ApiParameter
                    {
                        Name = "file",
                        Description = "File to upload",
                        Required = true,
                        Type = "file"
                    },
                    new ApiParameter
                    {
                        Name = "category",
                        Description = "Target category",
                        Required = true,
                        InForm = true,
                        Type = "select",
                        Options = Categories.Select(c => c.Name).ToList(),
                        DefaultValue = "documents"
                    },
                    new ApiParameter
                    {
                        Name = "folder",
                        Description = "Target folder path (leave empty for root)",
                        Required = false,
                        InForm = true
                    }
                }
            },
            new ApiEndpoint
            {
                Method = "POST",
                Path = "/api/cdn/rename",
                Description = "Rename a file in the CDN.",
                Parameters = new List<ApiParameter>(),
                BodyTemplate = "{\n  \"Path\": \"https://cdn.roovia.co.za/documents/example.jpg\",\n  \"NewName\": \"new-file-name\"\n}"
            },
            new ApiEndpoint
            {
                Method = "POST",
                Path = "/api/cdn/create-folder",
                Description = "Create a new folder in the CDN.",
                Parameters = new List<ApiParameter>(),
                BodyTemplate = "{\n  \"Category\": \"documents\",\n  \"ParentFolder\": \"\",\n  \"FolderName\": \"new-folder\"\n}"
            },
            new ApiEndpoint
            {
                Method = "DELETE",
                Path = "/api/cdn/delete",
                Description = "Delete a file from the CDN.",
                Parameters = new List<ApiParameter>
                {
                    new ApiParameter
                    {
                        Name = "path",
                        Description = "File URL or path",
                        Required = true,
                        InQuery = true
                    }
                }
            },
            new ApiEndpoint
            {
                Method = "DELETE",
                Path = "/api/cdn/delete-folder",
                Description = "Delete a folder from the CDN.",
                Parameters = new List<ApiParameter>
                {
                    new ApiParameter
                    {
                        Name = "category",
                        Description = "Category name",
                        Required = true,
                        InQuery = true,
                        Type = "select",
                        Options = Categories.Select(c => c.Name).ToList(),
                        DefaultValue = "documents"
                    },
                    new ApiParameter
                    {
                        Name = "path",
                        Description = "Folder path",
                        Required = true,
                        InQuery = true
                    },
                    new ApiParameter
                    {
                        Name = "force",
                        Description = "Force delete even if folder is not empty",
                        Required = false,
                        InQuery = true,
                        Type = "select",
                        Options = new List<string> { "true", "false" },
                        DefaultValue = "true"
                    }
                }
            }
        };
    }

    private List<ApiEndpoint> GetDiagnosticEndpoints()
    {
        return new List<ApiEndpoint>
        {
            new ApiEndpoint
            {
                Method = "GET",
                Path = "/api/diag/environment",
                Description = "Get environment information."
            },
            new ApiEndpoint
            {
                Method = "GET",
                Path = "/api/diag/cdn",
                Description = "Get CDN configuration information."
            },
            new ApiEndpoint
            {
                Method = "GET",
                Path = "/api/diag/storage",
                Description = "Check storage access and permissions."
            },
            new ApiEndpoint
            {
                Method = "GET",
                Path = "/api/diag/disk-usage",
                Description = "Get CDN disk usage statistics."
            },
            new ApiEndpoint
            {
                Method = "GET",
                Path = "/api/diag/verify-files",
                Description = "Verify file consistency between database and disk.",
                Parameters = new List<ApiParameter>
                {
                    new ApiParameter
                    {
                        Name = "category",
                        Description = "Category to check (optional)",
                        Required = false,
                        InQuery = true,
                        Type = "select",
                        Options = Categories.Select(c => c.Name).ToList()
                    },
                    new ApiParameter
                    {
                        Name = "limit",
                        Description = "Maximum number of files to check",
                        Required = false,
                        InQuery = true,
                        DefaultValue = "50"
                    }
                }
            },
            new ApiEndpoint
            {
                Method = "GET",
                Path = "/api/diag/system-check",
                Description = "Run a comprehensive system check."
            },
            new ApiEndpoint
            {
                Method = "GET",
                Path = "/api/diag/create-directories",
                Description = "Create standard CDN directories if they don't exist."
            }
        };
    }

    public class FileViewModel
    {
        public int Id { get; set; }
        public string FileName { get; set; }
        public string Url { get; set; }
        public string ContentType { get; set; }
        public long Size { get; set; }
        public DateTime? UploadDate { get; set; }
    }

    public class DashboardStats
    {
        public int TotalFiles { get; set; }
        public int TotalFolders { get; set; }
        public long TotalStorage { get; set; }
        public DateTime? LastUpload { get; set; }

        public string TotalStorageFormatted
        {
            get
            {
                string[] sizes = { "B", "KB", "MB", "GB", "TB" };
                double size = TotalStorage;
                int order = 0;
                while (size >= 1024 && order < sizes.Length - 1)
                {
                    order++;
                    size = size / 1024;
                }
                return $"{size:0.##} {sizes[order]}";
            }
        }

        public string LastUploadText
        {
            get
            {
                if (!LastUpload.HasValue)
                    return "Never";

                var now = DateTime.Now;
                var timeSpan = now - LastUpload.Value;

                if (timeSpan.TotalMinutes < 1)
                    return "Just now";
                if (timeSpan.TotalHours < 1)
                    return $"{(int)timeSpan.TotalMinutes}m ago";
                if (timeSpan.TotalDays < 1)
                    return $"{(int)timeSpan.TotalHours}h ago";
                if (timeSpan.TotalDays < 30)
                    return $"{(int)timeSpan.TotalDays}d ago";

                return LastUpload.Value.ToString("MMM d, yyyy");
            }
        }
    }

    public class ApiEndpoint
    {
        public string Method { get; set; }
        public string Path { get; set; }
        public string Description { get; set; }
        public List<ApiParameter> Parameters { get; set; } = new List<ApiParameter>();
        public string BodyTemplate { get; set; }
    }

    public class ApiParameter
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public bool Required { get; set; }
        public bool InPath { get; set; }
        public bool InQuery { get; set; }
        public bool InForm { get; set; }
        public string Type { get; set; } = "text";
        public List<string> Options { get; set; }
        public string DefaultValue { get; set; }
    }

    public class ApiResponse<T>
    {
        public bool success { get; set; }
        public T data { get; set; }
        public string message { get; set; }
    }

    public class FileDto
    {
        public int id { get; set; }
        public string fileName { get; set; }
        public string url { get; set; }
        public string contentType { get; set; }
        public long fileSize { get; set; }
        public DateTime? uploadDate { get; set; }
    }

    #endregion
}