@page "/admin/production-cdn-debug"
@using Roovia.Interfaces
@using System.Net.Http.Headers
@using System.Text.Json
@rendermode InteractiveServer
@inject ICdnService CdnService
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject ILogger<CdnDebugPage> Logger

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Production CDN Diagnostics</h3>
                </div>
                <div class="card-body">
                    <div class="alert alert-info">
                        <h5><i class="fa-light fa-info-circle me-2"></i>About This Tool</h5>
                        <p>This page tests <strong>direct connections</strong> to the production CDN at <code>https://portal.roovia.co.za</code>. 
                           It bypasses all local controllers and tests exactly what your production environment would use.</p>
                    </div>

                    <div class="mb-4">
                        <h4>Production Connection Information</h4>
                        <div class="row">
                            <div class="col-md-6">
                                <table class="table table-sm">
                                    <tbody>
                                        <tr>
                                            <th>Production CDN Base URL</th>
                                            <td><code>https://portal.roovia.co.za</code></td>
                                        </tr>
                                        <tr>
                                            <th>API Key (Masked)</th>
                                            <td>@MaskApiKey(apiKey)</td>
                                        </tr>
                                        <tr>
                                            <th>Connection Status</th>
                                            <td>
                                                @if (connectionStatus == null)
                                                {
                                                        <span class="text-muted">Not tested yet</span>
                                                }
                                                else if (connectionStatus == true)
                                                {
                                                        <span class="badge bg-success">Connected</span>
                                                }
                                                else
                                                {
                                                        <span class="badge bg-danger">Failed</span>
                                                }
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>Server Time</th>
                                            <td>@DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <h5>Troubleshooting Steps</h5>
                                <ol>
                                    <li>Test basic connectivity to production server</li>
                                    <li>Test authentication with API key</li>
                                    <li>Test file upload directly to production</li>
                                    <li>Test retrieving file from production</li>
                                </ol>
                                <p>All tests send requests directly to <code>https://portal.roovia.co.za</code></p>
                            </div>
                        </div>
                    </div>

                    <div class="mb-4">
                        <h4>Step 1: Test Production API Connection</h4>
                        <div class="card">
                            <div class="card-body">
                                <p>Test basic connectivity to the production server. This will check if the server is reachable and responding.</p>
                                <div class="mb-3">
                                    <div class="input-group">
                                        <span class="input-group-text">Endpoint:</span>
                                        <input type="text" class="form-control" @bind="testEndpoint" />
                                        <button @onclick="TestProductionConnection" class="btn btn-primary">
                                            <i class="fa-light fa-server me-2"></i>Test Connection
                                        </button>
                                    </div>
                                    <small class="text-muted">Examples: /api/cdn/ping, /api/cdn/categories</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-4">
                        <h4>Step 2: Direct Upload to Production</h4>
                        <div class="card">
                            <div class="card-body">
                                <p>Upload a test file directly to the production server using raw HTTP client (bypassing local services).</p>
                                <div class="mb-3">
                                    <InputFile OnChange="OnFileSelected" class="form-control mb-2" />
                                    <button @onclick="TestDirectUpload" class="btn btn-primary" disabled="@(selectedFile == null)">
                                        <i class="fa-light fa-upload me-2"></i>Upload to Production
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-4">
                        <h4>Step 3: CdnService Test</h4>
                        <div class="card">
                            <div class="card-body">
                                <p>Test your CdnService implementation using the same file. This tests your service's ability to connect to production.</p>
                                <button @onclick="TestServiceUpload" class="btn btn-primary" disabled="@(selectedFile == null)">
                                    <i class="fa-light fa-cogs me-2"></i>Test Via CdnService
                                </button>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(testResult))
                    {
                            <div class="mb-4">
                                <h4>Test Results</h4>
                                <div class="card">
                                    <div class="card-header @(isSuccess ? "bg-success" : "bg-danger") text-white">
                                        <h5 class="mb-0">@(isSuccess ? "Success" : "Error")</h5>
                                    </div>
                                    <div class="card-body">
                                        <pre class="mb-0 p-3 bg-light rounded">@testResult</pre>

                                    @if (responseDetails != null)
                                    {
                                                <div class="mt-3">
                                                    <h6>Response Details:</h6>
                                                    <div class="bg-light p-3 rounded">
                                                        <pre class="mb-0">@JsonSerializer.Serialize(responseDetails, new JsonSerializerOptions { WriteIndented = true })</pre>
                                                    </div>
                                                </div>
                                    }

                                    @if (parsedJson != null)
                                    {
                                                <div class="mt-3">
                                                    <h6>Parsed Response:</h6>
                                                    <div class="bg-light p-3 rounded">
                                                        <pre class="mb-0">@JsonSerializer.Serialize(parsedJson, new JsonSerializerOptions { WriteIndented = true })</pre>
                                                    </div>
                                                </div>
                                    }
                                    </div>
                                </div>
                            </div>
                    }

                    @if (!string.IsNullOrEmpty(uploadedFileUrl))
                    {
                            <div class="mb-4">
                                <h4>Upload Result</h4>
                                <div class="card">
                                    <div class="card-header bg-success text-white">
                                        <h5 class="mb-0">File Uploaded Successfully</h5>
                                    </div>
                                    <div class="card-body">
                                        <p>File uploaded to: <code>@uploadedFileUrl</code></p>
                                        <div class="btn-group">
                                            <button @onclick="ViewUploadedFile" class="btn btn-primary">
                                                <i class="fa-light fa-eye me-2"></i>View File
                                            </button>
                                            <button @onclick="DeleteUploadedFile" class="btn btn-danger">
                                                <i class="fa-light fa-trash me-2"></i>Delete File
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string apiKey;
    private string testResult;
    private bool isSuccess;
    private object responseDetails;
    private object parsedJson;
    private IBrowserFile selectedFile;
    private string uploadedFileUrl;
    private bool? connectionStatus = null;
    private string testEndpoint = "/api/cdn/ping";
    private readonly string productionBaseUrl = "https://portal.roovia.co.za";

    protected override async Task OnInitializedAsync()
    {
        apiKey = CdnService.GetApiKey();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setCdnApiKey", apiKey);
        }
    }

    private string MaskApiKey(string key)
    {
        if (string.IsNullOrEmpty(key) || key.Length < 8)
            return "****";

        return key.Substring(0, 4) + "..." + key.Substring(key.Length - 4);
    }

    private async Task TestProductionConnection()
    {
        try
        {
            testResult = $"Testing connection to {productionBaseUrl}{testEndpoint}...";
            isSuccess = false;
            responseDetails = null;
            parsedJson = null;
            connectionStatus = null;
            StateHasChanged();

            var client = HttpClientFactory.CreateClient();

            // Set up headers exactly as they should be for production
            client.DefaultRequestHeaders.Clear();
            client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            client.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue("RooviaCdnDebugger", "1.0"));

            // Log full request details
            Logger.LogInformation("Sending request to {Url} with headers: {Headers}",
                $"{productionBaseUrl}{testEndpoint}",
                string.Join(", ", client.DefaultRequestHeaders.Select(h => $"{h.Key}={string.Join(",", h.Value)}")));

            var response = await client.GetAsync($"{productionBaseUrl}{testEndpoint}");
            var responseContent = await response.Content.ReadAsStringAsync();

            // Capture full response details
            responseDetails = new
            {
                StatusCode = (int)response.StatusCode,
                StatusPhrase = response.ReasonPhrase,
                Headers = response.Headers.ToDictionary(h => h.Key, h => string.Join(", ", h.Value)),
                ContentHeaders = response.Content.Headers.ToDictionary(h => h.Key, h => string.Join(", ", h.Value)),
                ContentLength = responseContent.Length,
                ContentPreview = responseContent.Length > 500
                    ? responseContent.Substring(0, 500) + "..."
                    : responseContent
            };

            Logger.LogInformation("Received response: Status={Status}, Content-Type={ContentType}, Length={Length}",
                response.StatusCode,
                response.Content.Headers.ContentType,
                responseContent.Length);

            isSuccess = response.IsSuccessStatusCode;
            connectionStatus = isSuccess;

            // Try to parse as JSON
            try
            {
                parsedJson = JsonSerializer.Deserialize<object>(responseContent);
                testResult = $"Successfully connected to {productionBaseUrl}{testEndpoint}";
            }
            catch (JsonException)
            {
                // Check if we got HTML instead
                if (responseContent.Contains("<html") || responseContent.Contains("<!DOCTYPE"))
                {
                    testResult = $"Received HTML response instead of JSON from {productionBaseUrl}{testEndpoint}. " +
                        $"This likely indicates you're hitting a web page instead of an API endpoint, or authentication failed.";

                    // Add specific advice based on content
                    if (responseContent.Contains("login") || responseContent.Contains("signin"))
                    {
                        testResult += " The response appears to be a login page, which suggests authentication issues.";
                    }
                }
                else
                {
                    testResult = $"Received non-JSON response from {productionBaseUrl}{testEndpoint}";
                }
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            connectionStatus = false;
            responseDetails = null;
            parsedJson = null;

            // Create detailed error information
            var errorInfo = new
            {
                Message = ex.Message,
                InnerException = ex.InnerException?.Message,
                StackTrace = ex.StackTrace?.Split('\n').Take(5).ToArray() // First 5 lines
            };

            responseDetails = errorInfo;

            testResult = $"Error connecting to {productionBaseUrl}{testEndpoint}: {ex.Message}";
            if (ex.InnerException != null)
            {
                testResult += $"\n\nInner exception: {ex.InnerException.Message}";
            }

            Logger.LogError(ex, "Connection test failed");
        }
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task TestDirectUpload()
    {
        if (selectedFile == null)
            return;

        try
        {
            testResult = $"Uploading file directly to {productionBaseUrl}/api/cdn/upload: {selectedFile.Name}";
            isSuccess = false;
            responseDetails = null;
            parsedJson = null;
            uploadedFileUrl = null;
            StateHasChanged();

            var file = selectedFile;
            Logger.LogInformation("Starting direct upload test with file: {FileName}, size: {Size} bytes, type: {ContentType}",
                file.Name, file.Size, file.ContentType);

            // Create HTTP client with detailed logging
            var client = HttpClientFactory.CreateClient();
            client.Timeout = TimeSpan.FromMinutes(5);
            client.DefaultRequestHeaders.Clear();
            client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);
            client.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue("RooviaCdnDebugger", "1.0"));

            // Create multipart content with detailed logging
            using var content = new MultipartFormDataContent();
            using var streamContent = new StreamContent(file.OpenReadStream(209715200)); // Allow up to 200MB
            streamContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            // Add file content and metadata
            content.Add(streamContent, "file", file.Name);
            content.Add(new StringContent("test-uploads"), "category");

            // Log request details before sending
            Logger.LogInformation("Sending multipart request to {Url} with X-Api-Key: {ApiKey}, file: {FileName}, size: {Size}",
                $"{productionBaseUrl}/api/cdn/upload",
                MaskApiKey(apiKey),
                file.Name,
                file.Size);

            // Send the request and get raw response
            var response = await client.PostAsJsonAsync($"{productionBaseUrl}/api/cdn/upload", content);
            var responseContent = await response.Content.ReadAsStringAsync();

            // Log full response details
            responseDetails = new
            {
                StatusCode = (int)response.StatusCode,
                StatusPhrase = response.ReasonPhrase,
                Headers = response.Headers.ToDictionary(h => h.Key, h => string.Join(", ", h.Value)),
                ContentHeaders = response.Content.Headers.ToDictionary(h => h.Key, h => string.Join(", ", h.Value)),
                ContentLength = responseContent.Length,
                ContentType = response.Content.Headers.ContentType?.ToString(),
                ContentPreview = responseContent.Length > 500
                    ? responseContent.Substring(0, 500) + "..."
                    : responseContent
            };

            Logger.LogInformation("Received response: Status={Status}, Content-Type={ContentType}, Length={Length}",
                response.StatusCode,
                response.Content.Headers.ContentType,
                responseContent.Length);

            isSuccess = response.IsSuccessStatusCode;

            // Try to parse the response as JSON
            try
            {
                parsedJson = JsonSerializer.Deserialize<object>(responseContent);
                testResult = $"Upload response received from {productionBaseUrl}/api/cdn/upload";

                // Try to extract the URL from the response
                try
                {
                    var jsonDoc = JsonDocument.Parse(responseContent);
                    if (jsonDoc.RootElement.TryGetProperty("url", out var urlElement))
                    {
                        uploadedFileUrl = urlElement.GetString();
                        testResult = $"File uploaded successfully to {uploadedFileUrl}";
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogWarning(ex, "Could not extract URL from JSON response");
                }
            }
            catch (JsonException)
            {
                // Check if we got HTML instead
                if (responseContent.Contains("<html") || responseContent.Contains("<!DOCTYPE"))
                {
                    testResult = "Received HTML response instead of JSON. This likely indicates you're hitting a web page instead of an API endpoint, or authentication failed.";

                    // Add specific advice based on content
                    if (responseContent.Contains("login") || responseContent.Contains("signin"))
                    {
                        testResult += " The response appears to be a login page, which suggests authentication issues.";
                    }
                }
                else
                {
                    testResult = "Received non-JSON response from production server";
                }
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            responseDetails = new
            {
                Message = ex.Message,
                InnerException = ex.InnerException?.Message,
                StackTrace = ex.StackTrace?.Split('\n').Take(5).ToArray() // First 5 lines
            };

            testResult = $"Error uploading file: {ex.Message}";
            if (ex.InnerException != null)
            {
                testResult += $"\n\nInner exception: {ex.InnerException.Message}";
            }

            Logger.LogError(ex, "Direct upload failed");
        }
    }

    private async Task TestServiceUpload()
    {
        if (selectedFile == null)
            return;

        try
        {
            testResult = $"Uploading file via CdnService: {selectedFile.Name}";
            isSuccess = false;
            responseDetails = null;
            parsedJson = null;
            uploadedFileUrl = null;
            StateHasChanged();

            var file = selectedFile;
            Logger.LogInformation("Starting CdnService upload test with file: {FileName}, size: {Size}",
                file.Name, file.Size);

            // Use the CdnService directly
            uploadedFileUrl = await CdnService.UploadFileAsync(
                file.OpenReadStream(209715200), // Allow up to 200MB
                file.Name,
                file.ContentType,
                "test-uploads");

            isSuccess = true;
            testResult = $"Upload successful via CdnService: {uploadedFileUrl}";
            Logger.LogInformation("Upload successful: {Url}", uploadedFileUrl);

            responseDetails = new
            {
                Message = "Successfully uploaded via CdnService",
                Url = uploadedFileUrl
            };
        }
        catch (Exception ex)
        {
            isSuccess = false;

            // Try to extract useful information from the exception chain
            var allMessages = new List<string>();
            var currentEx = ex;
            while (currentEx != null)
            {
                allMessages.Add($"{currentEx.GetType().Name}: {currentEx.Message}");
                currentEx = currentEx.InnerException;
            }

            responseDetails = new
            {
                ExceptionType = ex.GetType().FullName,
                Message = ex.Message,
                InnerExceptionChain = allMessages.Skip(1).ToArray(),
                StackTrace = ex.StackTrace?.Split('\n').Take(10).ToArray() // First 10 lines
            };

            Logger.LogError(ex, "CdnService upload failed");

            testResult = $"Error uploading through CdnService: {ex.Message}";
            if (ex.InnerException != null)
            {
                testResult += $"\n\nInner exception: {ex.InnerException.Message}";
            }
        }
    }

    private async Task ViewUploadedFile()
    {
        if (string.IsNullOrEmpty(uploadedFileUrl))
            return;

        try
        {
            await JSRuntime.InvokeVoidAsync("openUrlWithApiKey", uploadedFileUrl, apiKey);
        }
        catch (Exception ex)
        {
            testResult = $"Error viewing file: {ex.Message}";
            isSuccess = false;
            Logger.LogError(ex, "Failed to view file");
        }
    }

    private async Task DeleteUploadedFile()
    {
        if (string.IsNullOrEmpty(uploadedFileUrl))
            return;

        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this file?");
            if (!confirmed) return;

            var result = await CdnService.DeleteFileAsync(uploadedFileUrl);

            if (result)
            {
                uploadedFileUrl = null;
                testResult = "File deleted successfully!";
                isSuccess = true;
            }
            else
            {
                testResult = "Failed to delete file - please try again.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            testResult = $"Error deleting file: {ex.Message}";
            isSuccess = false;
            Logger.LogError(ex, "Failed to delete file");
        }
    }
}