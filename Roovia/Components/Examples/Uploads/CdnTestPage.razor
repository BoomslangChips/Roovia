@* @page "/cdn-test"
@using Roovia.Interfaces
@rendermode InteractiveServer
@inject ICdnService CdnService
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>CDN Integration Test</h3>

<div class="alert alert-info mb-4">
    <i class="fa-light fa-info-circle me-2"></i>
    <strong>Test Server Mode:</strong> Connected to production CDN at https://cdn.roovia.co.za
</div>

<div class="card mb-4">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">1. Upload Images</h5>
    </div>
    <div class="card-body">
        <CdnFileUpload Category="images"
        Title="Upload Images"
        Description="Drag and drop images here, or click to browse"
        FileTypeHint="Accepted file types: JPG, PNG, GIF"
        AcceptedFileTypes=".jpg,.jpeg,.png,.gif"
        OnFileUploaded="HandleImageUploaded"
        OnFileDeleted="HandleFileDeleted"
        Multiple="true"
        MaxFileSize="5242880" />
    </div>
</div>

<div class="card mb-4">
    <div class="card-header bg-success text-white">
        <h5 class="mb-0">2. Upload Documents</h5>
    </div>
    <div class="card-body">
        <CdnFileUpload Category="documents"
        Title="Upload Documents"
        Description="Drag and drop files here, or click to browse"
        FileTypeHint="Accepted file types: PDF, DOC, XLSX, CSV, TXT"
        AcceptedFileTypes=".pdf,.doc,.docx,.xls,.xlsx,.csv,.txt"
        OnFileUploaded="HandleDocUploaded"
        OnFileDeleted="HandleFileDeleted"
        Multiple="true"
        MaxFileSize="10485760" />
    </div>
</div>

@if (!string.IsNullOrEmpty(uploadedImageUrl))
{
            <div class="card mb-4">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">3. Recently Uploaded Image Preview</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="image-preview">
                                <img src="@(uploadedImageUrl + "?key=" + apiKey)" alt="Uploaded image" class="img-fluid" style="max-height: 300px;" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h5>Image Details</h5>
                            <p>Filename: @Path.GetFileName(uploadedImageUrl)</p>
                            <p>URL: <code>@uploadedImageUrl</code></p>
                            <button @onclick="ViewLastUploadedImage" class="btn btn-primary">
                                <i class="fa-light fa-eye me-2"></i>View Image
                            </button>
                            <button @onclick="DeleteLastUploadedImage" class="btn btn-danger">
                                <i class="fa-light fa-trash me-2"></i>Delete Image
                            </button>
                        </div>
                    </div>
                </div>
            </div>
}

@if (!string.IsNullOrEmpty(uploadedDocUrl))
{
            <div class="card mb-4">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0">4. Recently Uploaded Document</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-12">
                            <h5>Document Details</h5>
                            <p>Filename: @Path.GetFileName(uploadedDocUrl)</p>
                            <p>URL: <code>@uploadedDocUrl</code></p>
                            <button @onclick="ViewLastUploadedDoc" class="btn btn-primary">
                                <i class="fa-light fa-eye me-2"></i>View Document
                            </button>
                            <button @onclick="DeleteLastUploadedDoc" class="btn btn-danger">
                                <i class="fa-light fa-trash me-2"></i>Delete Document
                            </button>
                        </div>
                    </div>
                </div>
            </div>
}

<div class="card mb-4">
    <div class="card-header bg-secondary text-white">
        <h5 class="mb-0">5. Technical Information</h5>
    </div>
    <div class="card-body">
        <h5>API Key</h5>
        <p>Your CDN API Key: <code>@apiKey</code></p>

        <h5>CDN Configuration</h5>
        <p>CDN Base URL: <code>@cdnBaseUrl</code></p>
        <p>Application Base URL: <code>@appBaseUrl</code></p>
        <p>Direct Access Available: <code>@CdnService.IsDirectAccessAvailable()</code></p>

        <h5>Production API Endpoints</h5>
        <ul>
            <li><strong>Upload:</strong> <code>https://portal.roovia.co.za/api/cdn/upload</code></li>
            <li><strong>Delete:</strong> <code>https://portal.roovia.co.za/api/cdn/delete?path={url}</code></li>
            <li><strong>List:</strong> <code>https://portal.roovia.co.za/api/cdn/files?category={category}</code></li>
            <li><strong>View:</strong> <code>https://portal.roovia.co.za/api/cdn/view?path={url}</code></li>
        </ul>

        <h5>API Connection Test</h5>
        <button @onclick="TestApiConnection" class="btn btn-primary">
            <i class="fa-light fa-network-wired me-2"></i>Test API Connection
        </button>
        <button @onclick="RunDiagnostics" class="btn btn-outline-primary ms-2">
            <i class="fa-light fa-stethoscope me-2"></i>Run Diagnostics
        </button>

        @if (!string.IsNullOrEmpty(apiTestResult))
        {
                <div class="mt-2 @(apiTestSuccess ? "alert alert-success" : "alert alert-danger")">
                    <p>@apiTestResult</p>
                </div>
        }
    </div>
</div>

@code {
    private string uploadedImageUrl;
    private string uploadedDocUrl;
    private string apiKey;
    private string cdnBaseUrl;
    private string appBaseUrl;
    private string apiTestResult;
    private bool apiTestSuccess;

    protected override async Task OnInitializedAsync()
    {
        apiKey = CdnService.GetApiKey();
        cdnBaseUrl = "https://cdn.roovia.co.za";
        appBaseUrl = "https://portal.roovia.co.za";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set the API key in JavaScript - using external function now
            await JSRuntime.InvokeVoidAsync("setCdnApiKey", apiKey);
            await InvokeAsync(() => this.StateHasChanged());
        }
    }

    private async Task TestApiConnection()
    {
        try
        {
            apiTestResult = "Testing connection to production CDN API...";
            apiTestSuccess = false;
            StateHasChanged();

            var client = HttpClientFactory.CreateClient();
            client.DefaultRequestHeaders.Add("X-Api-Key", apiKey);

            var response = await client.GetAsync("https://portal.roovia.co.za/api/cdn/categories");

            if (response.IsSuccessStatusCode)
            {
                apiTestSuccess = true;
                apiTestResult = "Success! Connected to production CDN API.";
            }
            else
            {
                apiTestSuccess = false;
                apiTestResult = $"Failed to connect to production CDN API. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            apiTestSuccess = false;
            apiTestResult = $"Error testing API connection: {ex.Message}";
        }
    }

    private async Task RunDiagnostics()
    {
        await JSRuntime.InvokeVoidAsync("logEndpointStatus");
        apiTestResult = "Check browser console for diagnostic results";
        apiTestSuccess = true;
        StateHasChanged();
    }

    private void HandleImageUploaded(CdnFileUpload.UploadedFileInfo fileInfo)
    {
        uploadedImageUrl = fileInfo.Url;
        StateHasChanged();
    }

    private void HandleDocUploaded(CdnFileUpload.UploadedFileInfo fileInfo)
    {
        uploadedDocUrl = fileInfo.Url;
        StateHasChanged();
    }

    private void HandleFileDeleted(CdnFileUpload.UploadedFileInfo fileInfo)
    {
        if (fileInfo.Url == uploadedImageUrl)
        {
            uploadedImageUrl = string.Empty;
        }
        else if (fileInfo.Url == uploadedDocUrl)
        {
            uploadedDocUrl = string.Empty;
        }
        StateHasChanged();
    }

    private async Task ViewLastUploadedImage()
    {
        if (!string.IsNullOrEmpty(uploadedImageUrl))
        {
            await JSRuntime.InvokeVoidAsync("openUrlWithApiKey", uploadedImageUrl, apiKey);
        }
    }

    private async Task ViewLastUploadedDoc()
    {
        if (!string.IsNullOrEmpty(uploadedDocUrl))
        {
            await JSRuntime.InvokeVoidAsync("openUrlWithApiKey", uploadedDocUrl, apiKey);
        }
    }

    private async Task DeleteLastUploadedImage()
    {
        if (string.IsNullOrEmpty(uploadedImageUrl))
            return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this image?");
        if (!confirmed) return;

        await DeleteFile(uploadedImageUrl);
        uploadedImageUrl = string.Empty;
    }

    private async Task DeleteLastUploadedDoc()
    {
        if (string.IsNullOrEmpty(uploadedDocUrl))
            return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this document?");
        if (!confirmed) return;

        await DeleteFile(uploadedDocUrl);
        uploadedDocUrl = string.Empty;
    }

    private async Task DeleteFile(string url)
    {
        try
        {
            // Try using the service first
            try
            {
                var result = await CdnService.DeleteFileAsync(url);
                if (result)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "File deleted successfully");
                    return;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error with CdnService.DeleteFileAsync: {ex.Message}");
                // Fall through to direct API call
            }

            // If service method fails, try direct API call
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Add("X-Api-Key", apiKey);

            var apiUrl = $"https://portal.roovia.co.za/api/cdn/delete?path={Uri.EscapeDataString(url)}";
            var response = await httpClient.DeleteAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "File deleted successfully");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("console.error", "Delete failed", errorContent);
                await JSRuntime.InvokeVoidAsync("alert", "Failed to delete file. Server returned an error.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error deleting file", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while deleting the file. Please try again.");
        }
    }
} *@