@page "/admin/cdn-config"
@using Microsoft.AspNetCore.Authorization
@using Roovia.Interfaces
@using Roovia.Models.CDN
@using Roovia.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Configuration
@rendermode InteractiveServer
@attribute [Authorize(Policy = "AdminAccess")]
@inject IConfiguration Configuration
@inject ICdnService CdnService
@inject IDbContextFactory<Roovia.Data.ApplicationDbContext> DbFactory
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="rv-cdn-container">
    <div class="rv-cdn-header">
        <h2 class="rv-cdn-title">CDN Configuration</h2>
        <div class="rv-cdn-subtitle">Manage your content delivery network settings</div>
    </div>

    <div class="rv-cdn-content">
        <div class="rv-cdn-main">
            <div class="rv-cdn-card">
                <div class="rv-cdn-card-header">
                    <div class="rv-cdn-card-header-content">
                        <h3 class="rv-cdn-card-title">CDN Settings</h3>
                        <p class="rv-cdn-card-subtitle">Configure your content delivery network</p>
                    </div>
                    <div class="rv-cdn-actions">
                        <button @onclick="LoadConfigFromDatabase" class="rv-cdn-btn rv-cdn-btn-secondary" disabled="@isSaving">
                            <i class="far fa-refresh rv-cdn-btn-icon"></i>
                            <span>Refresh</span>
                        </button>
                        <button @onclick="SaveSettings" class="rv-cdn-btn rv-cdn-btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <div class="rv-cdn-spinner"></div>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <i class="far fa-save rv-cdn-btn-icon"></i>
                                <span>Save Changes</span>
                            }
                        </button>
                    </div>
                </div>

                <div class="rv-cdn-card-body">
                    <div class="rv-cdn-alert rv-cdn-alert-info">
                        <div class="rv-cdn-alert-icon">
                            <i class="far fa-info-circle"></i>
                        </div>
                        <div class="rv-cdn-alert-content">
                            <strong>Configuration Source:</strong> @configSource
                            <p>Settings are now stored in the database and will be applied across all application instances.</p>
                        </div>
                    </div>

                    <form class="rv-cdn-form">
                        <div class="rv-cdn-form-section">
                            <h4 class="rv-cdn-section-title">Base Settings</h4>

                            <div class="rv-cdn-form-group">
                                <label for="cdnBaseUrl" class="rv-cdn-form-label">CDN Base URL</label>
                                <div class="rv-cdn-input-group">
                                    <div class="rv-cdn-input-icon">
                                        <i class="far fa-globe"></i>
                                    </div>
                                    <input type="url" class="rv-cdn-input" id="cdnBaseUrl" @bind="settings.BaseUrl"
                                           placeholder="https://cdn.yourdomain.com" />
                                </div>
                                <div class="rv-cdn-form-hint">The base URL where CDN files are publicly accessible.</div>
                            </div>

                            <div class="rv-cdn-form-group">
                                <label for="cdnStoragePath" class="rv-cdn-form-label">Storage Path</label>
                                <div class="rv-cdn-input-group">
                                    <div class="rv-cdn-input-icon">
                                        <i class="far fa-folder"></i>
                                    </div>
                                    <input type="text" class="rv-cdn-input" id="cdnStoragePath" @bind="settings.StoragePath"
                                           placeholder="/var/www/cdn" />
                                </div>
                                <div class="rv-cdn-form-hint">The physical file system path where CDN files are stored.</div>
                            </div>

                            <div class="rv-cdn-form-group">
                                <label for="cdnApiKey" class="rv-cdn-form-label">Default API Key</label>
                                <div class="rv-cdn-input-group">
                                    <div class="rv-cdn-input-icon">
                                        <i class="far fa-key"></i>
                                    </div>
                                    <input type="text" class="rv-cdn-input" id="cdnApiKey" @bind="settings.ApiKey"
                                           placeholder="YourApiKey" />
                                    <button class="rv-cdn-input-action" type="button" @onclick="GenerateApiKey">
                                        <i class="far fa-refresh"></i>
                                    </button>
                                </div>
                                <div class="rv-cdn-form-hint">Default API key for authentication with the CDN. Additional API keys can be managed in the API Key Management section.</div>
                            </div>
                        </div>

                        <div class="rv-cdn-form-section">
                            <h4 class="rv-cdn-section-title">File Upload Limits</h4>

                            <div class="rv-cdn-form-row">
                                <div class="rv-cdn-form-col">
                                    <div class="rv-cdn-form-group">
                                        <label for="maxFileSize" class="rv-cdn-form-label">Maximum File Size</label>
                                        <div class="rv-cdn-input-group">
                                            <input type="number" class="rv-cdn-input" id="maxFileSize" @bind="settings.MaxFileSizeMB"
                                                   min="1" max="1000" />
                                            <div class="rv-cdn-input-suffix">MB</div>
                                        </div>
                                        <div class="rv-cdn-form-hint">Maximum size for individual file uploads.</div>
                                    </div>
                                </div>

                                <div class="rv-cdn-form-col">
                                    <div class="rv-cdn-form-group">
                                        <label for="allowedFileTypes" class="rv-cdn-form-label">Allowed File Types</label>
                                        <div class="rv-cdn-input-group">
                                            <div class="rv-cdn-input-icon">
                                                <i class="far fa-file"></i>
                                            </div>
                                            <input type="text" class="rv-cdn-input" id="allowedFileTypes" @bind="settings.AllowedFileTypes"
                                                   placeholder=".jpg,.png,.pdf,.doc,.xls" />
                                        </div>
                                        <div class="rv-cdn-form-hint">Comma-separated list of allowed file extensions.</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="rv-cdn-form-section">
                            <h4 class="rv-cdn-section-title">Categories & Organization</h4>

                            <div class="rv-cdn-form-group">
                                <label for="categories" class="rv-cdn-form-label">Categories</label>
                                <div class="rv-cdn-input-group">
                                    <div class="rv-cdn-input-icon">
                                        <i class="far fa-folder-tree"></i>
                                    </div>
                                    <input type="text" class="rv-cdn-input" id="categories" @bind="categoriesString"
                                           placeholder="documents,images,hr,weighbridge,lab" />
                                </div>
                                <div class="rv-cdn-form-hint">Comma-separated list of valid file categories. Changes will not affect existing files.</div>
                            </div>
                        </div>

                        <div class="rv-cdn-form-section">
                            <h4 class="rv-cdn-section-title">Security Options</h4>

                            <div class="rv-cdn-toggle-options">
                                <div class="rv-cdn-toggle-option">
                                    <div class="rv-cdn-toggle">
                                        <input type="checkbox" id="enforceAuth" class="rv-cdn-toggle-input" @bind="settings.EnforceAuthentication">
                                        <label for="enforceAuth" class="rv-cdn-toggle-label"></label>
                                    </div>
                                    <div class="rv-cdn-toggle-content">
                                        <label for="enforceAuth" class="rv-cdn-toggle-title">Enforce Authentication</label>
                                        <div class="rv-cdn-toggle-description">Require API key for all CDN operations.</div>
                                    </div>
                                </div>

                                <div class="rv-cdn-toggle-option">
                                    <div class="rv-cdn-toggle">
                                        <input type="checkbox" id="allowDirectAccess" class="rv-cdn-toggle-input" @bind="settings.AllowDirectAccess">
                                        <label for="allowDirectAccess" class="rv-cdn-toggle-label"></label>
                                    </div>
                                    <div class="rv-cdn-toggle-content">
                                        <label for="allowDirectAccess" class="rv-cdn-toggle-title">Allow Direct Access</label>
                                        <div class="rv-cdn-toggle-description">Allow direct file system access when available (better performance).</div>
                                    </div>
                                </div>

                                <div class="rv-cdn-toggle-option">
                                    <div class="rv-cdn-toggle">
                                        <input type="checkbox" id="enableCaching" class="rv-cdn-toggle-input" @bind="settings.EnableCaching">
                                        <label for="enableCaching" class="rv-cdn-toggle-label"></label>
                                    </div>
                                    <div class="rv-cdn-toggle-content">
                                        <label for="enableCaching" class="rv-cdn-toggle-title">Enable Caching</label>
                                        <div class="rv-cdn-toggle-description">Set caching headers for better performance.</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            @if (isTestSuccessful.HasValue)
            {
                <div class="rv-cdn-alert @(isTestSuccessful.Value ? "rv-cdn-alert-success" : "rv-cdn-alert-danger")">
                    <div class="rv-cdn-alert-icon">
                        <i class="@(isTestSuccessful.Value ? "far fa-check-circle" : "far fa-times-circle")"></i>
                    </div>
                    <div class="rv-cdn-alert-content">
                        <strong>@(isTestSuccessful.Value ? "Connection Test Successful" : "Connection Test Failed")</strong>
                        <p>@testMessage</p>
                    </div>
                </div>
            }
        </div>

        <div class="rv-cdn-sidebar">
            <div class="rv-cdn-card rv-cdn-sidebar-card">
                <div class="rv-cdn-card-header">
                    <h3 class="rv-cdn-card-title">Connection Test</h3>
                </div>
                <div class="rv-cdn-card-body">
                    <p class="rv-cdn-sidebar-text">Test the CDN connection with current settings:</p>
                    <button @onclick="TestConnection" class="rv-cdn-btn rv-cdn-btn-outline rv-cdn-btn-block" disabled="@isTestingConnection">
                        @if (isTestingConnection)
                        {
                            <div class="rv-cdn-spinner rv-cdn-spinner-sm"></div>
                            <span>Testing...</span>
                        }
                        else
                        {
                            <i class="far fa-network-wired rv-cdn-btn-icon"></i>
                            <span>Test Connection</span>
                        }
                    </button>
                </div>
            </div>

            <div class="rv-cdn-card rv-cdn-sidebar-card">
                <div class="rv-cdn-card-header">
                    <h3 class="rv-cdn-card-title">CDN Status</h3>
                </div>
                <div class="rv-cdn-card-body">
                    <div class="rv-cdn-status-list">
                        <div class="rv-cdn-status-item">
                            <span class="rv-cdn-status-label">Connection Status</span>
                            <span class="rv-cdn-status-badge @(isCdnOnline ? "rv-cdn-status-badge-success" : "rv-cdn-status-badge-danger")">
                                @(isCdnOnline ? "Online" : "Offline")
                            </span>
                        </div>
                        <div class="rv-cdn-status-item">
                            <span class="rv-cdn-status-label">Direct Access</span>
                            <span class="rv-cdn-status-badge @(isDirectAccessAvailable ? "rv-cdn-status-badge-success" : "rv-cdn-status-badge-secondary")">
                                @(isDirectAccessAvailable ? "Available" : "Not Available")
                            </span>
                        </div>
                        <div class="rv-cdn-status-item">
                            <span class="rv-cdn-status-label">Environment</span>
                            <span class="rv-cdn-status-badge rv-cdn-status-badge-info">
                                @(isDevEnvironment ? "Development" : "Production")
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="rv-cdn-card rv-cdn-sidebar-card">
                <div class="rv-cdn-card-header">
                    <h3 class="rv-cdn-card-title">Quick Actions</h3>
                </div>
                <div class="rv-cdn-card-body">
                    <div class="rv-cdn-action-list">
                        <button @onclick="GoToDashboard" class="rv-cdn-action-item">
                            <div class="rv-cdn-action-icon">
                                <i class="far fa-tachometer-alt"></i>
                            </div>
                            <div class="rv-cdn-action-content">
                                <span class="rv-cdn-action-title">Go to Dashboard</span>
                            </div>
                            <div class="rv-cdn-action-arrow">
                                <i class="far fa-chevron-right"></i>
                            </div>
                        </button>
                        <button @onclick="ViewTestPage" class="rv-cdn-action-item">
                            <div class="rv-cdn-action-icon">
                                <i class="far fa-vial"></i>
                            </div>
                            <div class="rv-cdn-action-content">
                                <span class="rv-cdn-action-title">View Test Page</span>
                            </div>
                            <div class="rv-cdn-action-arrow">
                                <i class="far fa-chevron-right"></i>
                            </div>
                        </button>
                        <button @onclick="ManageApiKeys" class="rv-cdn-action-item">
                            <div class="rv-cdn-action-icon">
                                <i class="far fa-key"></i>
                            </div>
                            <div class="rv-cdn-action-content">
                                <span class="rv-cdn-action-title">Manage API Keys</span>
                            </div>
                            <div class="rv-cdn-action-arrow">
                                <i class="far fa-chevron-right"></i>
                            </div>
                        </button>
                        <button @onclick="ClearCache" class="rv-cdn-action-item">
                            <div class="rv-cdn-action-icon">
                                <i class="far fa-broom"></i>
                            </div>
                            <div class="rv-cdn-action-content">
                                <span class="rv-cdn-action-title">Clear CDN Cache</span>
                            </div>
                            <div class="rv-cdn-action-arrow">
                                <i class="far fa-chevron-right"></i>
                            </div>
                        </button>
                    </div>
                </div>
            </div>

            <div class="rv-cdn-card rv-cdn-sidebar-card">
                <div class="rv-cdn-card-header">
                    <h3 class="rv-cdn-card-title">System Information</h3>
                </div>
                <div class="rv-cdn-card-body">
                    <div class="rv-cdn-info-list">
                        <div class="rv-cdn-info-item">
                            <span class="rv-cdn-info-label">Server OS</span>
                            <span class="rv-cdn-info-value">@serverOs</span>
                        </div>
                        <div class="rv-cdn-info-item">
                            <span class="rv-cdn-info-label">ASP.NET Core Version</span>
                            <span class="rv-cdn-info-value">@aspNetVersion</span>
                        </div>
                        <div class="rv-cdn-info-item">
                            <span class="rv-cdn-info-label">Server Time</span>
                            <span class="rv-cdn-info-value">@DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")</span>
                        </div>
                        <div class="rv-cdn-info-item">
                            <span class="rv-cdn-info-label">System Uptime</span>
                            <span class="rv-cdn-info-value">@uptimeDisplay</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (showApiKeyManagement)
{
    <div class="rv-cdn-modal-backdrop" @onclick="() => showApiKeyManagement = false"></div>
    <div class="rv-cdn-modal">
        <div class="rv-cdn-modal-content">
            <div class="rv-cdn-modal-header">
                <h3 class="rv-cdn-modal-title">API Key Management</h3>
                <button type="button" class="rv-cdn-modal-close" @onclick="() => showApiKeyManagement = false">
                    <i class="far fa-times"></i>
                </button>
            </div>
            <div class="rv-cdn-modal-body">
                <div class="rv-cdn-modal-actions">
                    <h4 class="rv-cdn-section-title">Active API Keys</h4>
                    <button @onclick="CreateNewApiKey" class="rv-cdn-btn rv-cdn-btn-primary rv-cdn-btn-sm">
                        <i class="far fa-plus rv-cdn-btn-icon"></i>
                        <span>Create New Key</span>
                    </button>
                </div>

                @if (isLoadingApiKeys)
                {
                    <div class="rv-cdn-loading">
                        <div class="rv-cdn-spinner"></div>
                        <p class="rv-cdn-loading-text">Loading API keys...</p>
                    </div>
                }
                else if (!apiKeys.Any())
                {
                    <div class="rv-cdn-alert rv-cdn-alert-info">
                        <div class="rv-cdn-alert-icon">
                            <i class="far fa-info-circle"></i>
                        </div>
                        <div class="rv-cdn-alert-content">
                            <p>No custom API keys found. The system is using the default API key.</p>
                        </div>
                    </div>
                }
                else
                {
                    <div class="rv-cdn-table-container">
                        <table class="rv-cdn-table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Key</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                    <th>Last Used</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var key in apiKeys)
                                {
                                    <tr>
                                        <td>@key.Name</td>
                                        <td>
                                            <div class="rv-cdn-copy-field">
                                                <input type="text" class="rv-cdn-input rv-cdn-input-sm" value="@key.Key" readonly />
                                                <button class="rv-cdn-copy-btn" @onclick="() => CopyApiKeyToClipboard(key.Key)">
                                                    <i class="far fa-copy"></i>
                                                </button>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="rv-cdn-status-badge @(key.IsActive ? "rv-cdn-status-badge-success" : "rv-cdn-status-badge-danger")">
                                                @(key.IsActive ? "Active" : "Inactive")
                                            </span>
                                        </td>
                                        <td>@key.CreatedDate.ToString("yyyy-MM-dd")</td>
                                        <td>@(key.LastUsedDate.HasValue ? key.LastUsedDate.Value.ToString("yyyy-MM-dd HH:mm") : "Never")</td>
                                        <td>
                                            <div class="rv-cdn-btn-group">
                                                <button @onclick="() => EditApiKey(key)" class="rv-cdn-btn rv-cdn-btn-icon rv-cdn-btn-sm">
                                                    <i class="far fa-edit"></i>
                                                </button>
                                                <button @onclick="() => DeactivateApiKey(key)" class="rv-cdn-btn rv-cdn-btn-icon rv-cdn-btn-sm rv-cdn-btn-danger" disabled="@(!key.IsActive)">
                                                    <i class="far fa-ban"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }

                @if (showNewApiKeyForm)
                {
                    <div class="rv-cdn-card rv-cdn-modal-card">
                        <div class="rv-cdn-card-header">
                            <h4 class="rv-cdn-card-title">@(editingApiKey == null ? "Create New API Key" : "Edit API Key")</h4>
                        </div>
                        <div class="rv-cdn-card-body">
                            <div class="rv-cdn-form-row">
                                <div class="rv-cdn-form-col">
                                    <div class="rv-cdn-form-group">
                                        <label class="rv-cdn-form-label">Key Name</label>
                                        <input type="text" class="rv-cdn-input" @bind="newApiKeyName" placeholder="e.g., Mobile App Key" />
                                    </div>
                                </div>
                                <div class="rv-cdn-form-col">
                                    <div class="rv-cdn-form-group">
                                        <label class="rv-cdn-form-label">Description</label>
                                        <input type="text" class="rv-cdn-input" @bind="newApiKeyDescription" placeholder="Purpose of this API key" />
                                    </div>
                                </div>
                            </div>
                            <div class="rv-cdn-form-row">
                                <div class="rv-cdn-form-col">
                                    <div class="rv-cdn-form-group">
                                        <label class="rv-cdn-form-label">Allowed IPs (Optional)</label>
                                        <input type="text" class="rv-cdn-input" @bind="newApiKeyAllowedIps" placeholder="Comma-separated IPs or ranges" />
                                        <div class="rv-cdn-form-hint">Leave empty to allow all IPs</div>
                                    </div>
                                </div>
                                <div class="rv-cdn-form-col">
                                    <div class="rv-cdn-form-group">
                                        <label class="rv-cdn-form-label">Allowed Domains (Optional)</label>
                                        <input type="text" class="rv-cdn-input" @bind="newApiKeyAllowedDomains" placeholder="Comma-separated domains" />
                                        <div class="rv-cdn-form-hint">Leave empty to allow all domains</div>
                                    </div>
                                </div>
                            </div>
                            <div class="rv-cdn-form-row">
                                <div class="rv-cdn-form-col">
                                    <div class="rv-cdn-form-group">
                                        <label class="rv-cdn-form-label">Expiry Date (Optional)</label>
                                        <input type="date" class="rv-cdn-input" @bind="newApiKeyExpiryDate" />
                                        <div class="rv-cdn-form-hint">Leave empty for no expiry</div>
                                    </div>
                                </div>
                                <div class="rv-cdn-form-col">
                                    <div class="rv-cdn-form-group rv-cdn-form-group-flex">
                                        <div class="rv-cdn-toggle rv-cdn-toggle-large">
                                            <input type="checkbox" id="apiKeyIsActive" class="rv-cdn-toggle-input" @bind="newApiKeyIsActive">
                                            <label for="apiKeyIsActive" class="rv-cdn-toggle-label"></label>
                                        </div>
                                        <label for="apiKeyIsActive" class="rv-cdn-toggle-title rv-cdn-ml-2">Active</label>
                                    </div>
                                </div>
                            </div>
                            <div class="rv-cdn-form-actions">
                                <button @onclick="CancelApiKeyEdit" class="rv-cdn-btn rv-cdn-btn-secondary">Cancel</button>
                                <button @onclick="SaveApiKey" class="rv-cdn-btn rv-cdn-btn-primary">Save API Key</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="rv-cdn-modal-footer">
                <button type="button" class="rv-cdn-btn rv-cdn-btn-secondary" @onclick="() => showApiKeyManagement = false">Close</button>
            </div>
        </div>
    </div>
}

<style>
    /* CDN Admin Styles - Custom namespace to avoid conflicts */
    :root {
        /* Using Roovia color system but scope it to our namespace */
        --rv-cdn-primary: var(--primary, #377f80);
        --rv-cdn-primary-rgb: var(--primary-rgb, 55, 127, 128);
        --rv-cdn-primary-hover: var(--primary-hover, #2d6869);
        --rv-cdn-primary-light: var(--primary-light, rgba(55, 127, 128, 0.1));
        --rv-cdn-primary-lighter: var(--primary-lighter, rgba(55, 127, 128, 0.05));
        --rv-cdn-secondary: var(--secondary, #142a39);
        --rv-cdn-secondary-rgb: var(--secondary-rgb, 20, 42, 57);
        --rv-cdn-secondary-light: var(--secondary-light, rgba(20, 42, 57, 0.1));
        --rv-cdn-success: var(--success, #278e63);
        --rv-cdn-success-rgb: var(--success-rgb, 39, 142, 99);
        --rv-cdn-success-hover: var(--success-hover, #1f7550);
        --rv-cdn-success-light: var(--success-light, rgba(39, 142, 99, 0.1));
        --rv-cdn-warning: var(--warning, #f5a623);
        --rv-cdn-warning-rgb: var(--warning-rgb, 245, 166, 35);
        --rv-cdn-warning-hover: var(--warning-hover, #e09612);
        --rv-cdn-warning-light: var(--warning-light, rgba(245, 166, 35, 0.1));
        --rv-cdn-danger: var(--danger, #d14141);
        --rv-cdn-danger-rgb: var(--danger-rgb, 209, 65, 65);
        --rv-cdn-danger-hover: var(--danger-hover, #b63636);
        --rv-cdn-danger-light: var(--danger-light, rgba(209, 65, 65, 0.1));
        --rv-cdn-info: var(--info, #3080a7);
        --rv-cdn-info-rgb: var(--info-rgb, 48, 128, 167);
        --rv-cdn-info-hover: var(--info-hover, #266a8b);
        --rv-cdn-info-light: var(--info-light, rgba(48, 128, 167, 0.1));
        /* Neutral Backgrounds */
        --rv-cdn-body-bg: var(--body-bg, #f4f8f8);
        --rv-cdn-content-bg: var(--content-bg, #ffffff);
        --rv-cdn-subtle-bg: var(--subtle-bg, #f8fafa);
        /* Text Colors */
        --rv-cdn-text-primary: var(--text-primary, #142a39);
        --rv-cdn-text-secondary: var(--text-secondary, #3a4f5e);
        --rv-cdn-text-muted: var(--text-muted, #6e7e8a);
        /* Borders */
        --rv-cdn-border-color: var(--border-color, rgba(55, 127, 128, 0.15));
        --rv-cdn-border-divider: var(--border-divider, #e5eef0);
        /* Shadows */
        --rv-cdn-shadow-sm: var(--shadow-sm, 0 2px 4px rgba(20, 42, 57, 0.05));
        --rv-cdn-shadow-md: var(--shadow-md, 0 4px 8px rgba(20, 42, 57, 0.08));
        --rv-cdn-shadow-lg: var(--shadow-lg, 0 8px 16px rgba(20, 42, 57, 0.12));
        /* Border Radius */
        --rv-cdn-border-radius-sm: var(--border-radius-sm, 0.25rem);
        --rv-cdn-border-radius-md: var(--border-radius-md, 0.5rem);
        --rv-cdn-border-radius-lg: var(--border-radius-lg, 0.75rem);
        /* Animation */
        --rv-cdn-transition: var(--hover-transition, all 0.25s cubic-bezier(0.4, 0, 0.2, 1));
    }

    /* Layout styles */
    .rv-cdn-container {
        max-width: 1600px;
        margin: 0 auto;
        padding: 1.5rem;
        width: 100%;
    }

    .rv-cdn-header {
        margin-bottom: 2rem;
        border-bottom: 1px solid var(--rv-cdn-border-divider);
        padding-bottom: 1rem;
        animation: rv-cdn-fade-in 0.5s ease;
    }

    .rv-cdn-title {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--rv-cdn-text-primary);
    }

    .rv-cdn-subtitle {
        color: var(--rv-cdn-text-secondary);
        font-size: 1rem;
    }

    .rv-cdn-content {
        display: flex;
        gap: 1.5rem;
    }

    .rv-cdn-main {
        flex: 1 1 65%;
        min-width: 0;
        animation: rv-cdn-slide-in-right 0.5s ease;
    }

    .rv-cdn-sidebar {
        flex: 0 0 35%;
        max-width: 400px;
        animation: rv-cdn-slide-in-left 0.5s ease;
    }

    /* Card styles */
    .rv-cdn-card {
        background-color: var(--rv-cdn-content-bg);
        border-radius: var(--rv-cdn-border-radius-lg);
        box-shadow: var(--rv-cdn-shadow-sm);
        margin-bottom: 1.5rem;
        border: 1px solid var(--rv-cdn-border-divider);
        overflow: hidden;
        transition: var(--rv-cdn-transition);
    }

        .rv-cdn-card:hover {
            box-shadow: var(--rv-cdn-shadow-md);
            transform: translateY(-2px);
        }

    .rv-cdn-card-header {
        padding: 1.25rem;
        border-bottom: 1px solid var(--rv-cdn-border-divider);
        background-color: var(--rv-cdn-subtle-bg);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .rv-cdn-card-header-content {
        flex: 1;
    }

    .rv-cdn-card-title {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--rv-cdn-text-primary);
    }

    .rv-cdn-card-subtitle {
        color: var(--rv-cdn-text-secondary);
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .rv-cdn-card-body {
        padding: 1.5rem;
    }

    .rv-cdn-actions {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    /* Form styles */
    .rv-cdn-form {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .rv-cdn-form-section {
        margin-bottom: 1.5rem;
    }

    .rv-cdn-section-title {
        font-size: 1rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: var(--rv-cdn-text-primary);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .rv-cdn-section-title:after {
            content: '';
            flex: 1;
            height: 1px;
            background-color: var(--rv-cdn-border-divider);
            margin-left: 0.5rem;
        }

    .rv-cdn-form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 0.5rem;
    }

    .rv-cdn-form-col {
        flex: 1 0 calc(50% - 0.5rem);
        min-width: 250px;
    }

    .rv-cdn-form-group {
        margin-bottom: 1.25rem;
    }

    .rv-cdn-form-group-flex {
        display: flex;
        align-items: center;
    }

    .rv-cdn-form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        font-size: 0.875rem;
        color: var(--rv-cdn-text-primary);
    }

    .rv-cdn-form-hint {
        margin-top: 0.375rem;
        font-size: 0.75rem;
        color: var(--rv-cdn-text-muted);
    }

    .rv-cdn-input-group {
        position: relative;
        display: flex;
        align-items: center;
    }

    .rv-cdn-input {
        width: 100%;
        padding: 0.625rem 0.875rem;
        border: 1px solid var(--rv-cdn-border-divider);
        border-radius: var(--rv-cdn-border-radius-md);
        font-size: 0.875rem;
        background-color: var(--rv-cdn-content-bg);
        color: var(--rv-cdn-text-primary);
        transition: var(--rv-cdn-transition);
    }

        .rv-cdn-input:focus {
            border-color: var(--rv-cdn-primary);
            box-shadow: 0 0 0 3px rgba(var(--rv-cdn-primary-rgb), 0.2);
            outline: none;
        }

    .rv-cdn-input-sm {
        padding: 0.375rem 0.625rem;
        font-size: 0.75rem;
    }

    .rv-cdn-input-icon {
        position: absolute;
        left: 0.75rem;
        color: var(--rv-cdn-text-muted);
        font-size: 0.875rem;
        pointer-events: none;
    }

    .rv-cdn-input-group .rv-cdn-input-icon + .rv-cdn-input {
        padding-left: 2.25rem;
    }

    .rv-cdn-input-action {
        position: absolute;
        right: 0.625rem;
        background: none;
        border: none;
        color: var(--rv-cdn-text-muted);
        cursor: pointer;
        font-size: 0.875rem;
        padding: 0.25rem;
        transition: var(--rv-cdn-transition);
        border-radius: var(--rv-cdn-border-radius-sm);
    }

        .rv-cdn-input-action:hover {
            color: var(--rv-cdn-primary);
            background-color: var(--rv-cdn-primary-light);
        }

    .rv-cdn-input-suffix {
        padding: 0 0.75rem;
        background-color: var(--rv-cdn-subtle-bg);
        border: 1px solid var(--rv-cdn-border-divider);
        border-left: none;
        border-radius: 0 var(--rv-cdn-border-radius-md) var(--rv-cdn-border-radius-md) 0;
        font-size: 0.875rem;
        color: var(--rv-cdn-text-secondary);
        display: flex;
        align-items: center;
    }

    .rv-cdn-input-group .rv-cdn-input:first-child {
        border-radius: var(--rv-cdn-border-radius-md) 0 0 var(--rv-cdn-border-radius-md);
    }

    /* Toggle switch */
    .rv-cdn-toggle-options {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .rv-cdn-toggle-option {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
    }

    .rv-cdn-toggle {
        position: relative;
        min-width: 3rem;
        height: 1.5rem;
    }

    .rv-cdn-toggle-large {
        min-width: 3.5rem;
        height: 1.75rem;
    }

    .rv-cdn-toggle-input {
        opacity: 0;
        width: 0;
        height: 0;
        position: absolute;
    }

    .rv-cdn-toggle-label {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: var(--rv-cdn-subtle-bg);
        border: 1px solid var(--rv-cdn-border-divider);
        transition: var(--rv-cdn-transition);
        border-radius: 1.5rem;
    }

        .rv-cdn-toggle-label:before {
            position: absolute;
            content: "";
            height: 1.125rem;
            width: 1.125rem;
            left: 0.1875rem;
            bottom: 0.1875rem;
            background-color: white;
            transition: var(--rv-cdn-transition);
            border-radius: 50%;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

    .rv-cdn-toggle-large .rv-cdn-toggle-label:before {
        height: 1.375rem;
        width: 1.375rem;
    }

    .rv-cdn-toggle-input:checked + .rv-cdn-toggle-label {
        background-color: var(--rv-cdn-primary);
        border-color: var(--rv-cdn-primary);
    }

        .rv-cdn-toggle-input:checked + .rv-cdn-toggle-label:before {
            transform: translateX(1.5rem);
        }

    .rv-cdn-toggle-large .rv-cdn-toggle-input:checked + .rv-cdn-toggle-label:before {
        transform: translateX(1.75rem);
    }

    .rv-cdn-toggle-content {
        flex: 1;
    }

    .rv-cdn-toggle-title {
        font-weight: 500;
        font-size: 0.875rem;
        color: var(--rv-cdn-text-primary);
        margin-bottom: 0.25rem;
        display: block;
    }

    .rv-cdn-toggle-description {
        font-size: 0.75rem;
        color: var(--rv-cdn-text-muted);
    }

    /* Button styles */
    .rv-cdn-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 0.625rem 1rem;
        font-size: 0.875rem;
        font-weight: 500;
        border-radius: var(--rv-cdn-border-radius-md);
        border: none;
        cursor: pointer;
        transition: var(--rv-cdn-transition);
        white-space: nowrap;
    }

        .rv-cdn-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            pointer-events: none;
        }

    .rv-cdn-btn-icon {
        font-size: 0.875rem;
    }

    .rv-cdn-btn-sm {
        padding: 0.375rem 0.75rem;
        font-size: 0.75rem;
    }

    .rv-cdn-btn-primary {
        background-color: var(--rv-cdn-primary);
        color: white;
        box-shadow: 0 1px 2px rgba(var(--rv-cdn-primary-rgb), 0.2);
    }

        .rv-cdn-btn-primary:hover {
            background-color: var(--rv-cdn-primary-hover);
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(var(--rv-cdn-primary-rgb), 0.25);
        }

        .rv-cdn-btn-primary:active {
            transform: translateY(0);
            box-shadow: 0 1px 2px rgba(var(--rv-cdn-primary-rgb), 0.2);
        }

    .rv-cdn-btn-secondary {
        background-color: var(--rv-cdn-subtle-bg);
        color: var(--rv-cdn-text-primary);
        border: 1px solid var(--rv-cdn-border-divider);
    }

        .rv-cdn-btn-secondary:hover {
            background-color: var(--rv-cdn-content-bg);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            transform: translateY(-1px);
        }

        .rv-cdn-btn-secondary:active {
            transform: translateY(0);
            box-shadow: none;
        }

    .rv-cdn-btn-outline {
        background-color: transparent;
        color: var(--rv-cdn-primary);
        border: 1px solid var(--rv-cdn-primary);
    }

        .rv-cdn-btn-outline:hover {
            background-color: var(--rv-cdn-primary-light);
            transform: translateY(-1px);
        }

        .rv-cdn-btn-outline:active {
            transform: translateY(0);
        }

    .rv-cdn-btn-danger {
        background-color: var(--rv-cdn-danger-light);
        color: var(--rv-cdn-danger);
        border: 1px solid var(--rv-cdn-danger-light);
    }

        .rv-cdn-btn-danger:hover {
            background-color: var(--rv-cdn-danger);
            color: white;
        }

    .rv-cdn-btn-icon {
        padding: 0.375rem;
        border-radius: var(--rv-cdn-border-radius-sm);
    }

    .rv-cdn-btn-block {
        display: flex;
        width: 100%;
    }

    .rv-cdn-btn-group {
        display: flex;
        gap: 0.25rem;
    }

    /* Alert styles */
    .rv-cdn-alert {
        display: flex;
        gap: 1rem;
        padding: 1rem;
        border-radius: var(--rv-cdn-border-radius-md);
        margin-bottom: 1.5rem;
        animation: rv-cdn-fade-in 0.5s ease;
    }

    .rv-cdn-alert-info {
        background-color: var(--rv-cdn-info-light);
        border-left: 4px solid var(--rv-cdn-info);
    }

    .rv-cdn-alert-success {
        background-color: var(--rv-cdn-success-light);
        border-left: 4px solid var(--rv-cdn-success);
    }

    .rv-cdn-alert-danger {
        background-color: var(--rv-cdn-danger-light);
        border-left: 4px solid var(--rv-cdn-danger);
    }

    .rv-cdn-alert-warning {
        background-color: var(--rv-cdn-warning-light);
        border-left: 4px solid var(--rv-cdn-warning);
    }

    .rv-cdn-alert-icon {
        font-size: 1.25rem;
        color: var(--rv-cdn-info);
        flex-shrink: 0;
        padding-top: 0.125rem;
    }

    .rv-cdn-alert-success .rv-cdn-alert-icon {
        color: var(--rv-cdn-success);
    }

    .rv-cdn-alert-danger .rv-cdn-alert-icon {
        color: var(--rv-cdn-danger);
    }

    .rv-cdn-alert-warning .rv-cdn-alert-icon {
        color: var(--rv-cdn-warning);
    }

    .rv-cdn-alert-content {
        flex: 1;
    }

        .rv-cdn-alert-content strong {
            display: block;
            margin-bottom: 0.25rem;
            color: var(--rv-cdn-text-primary);
        }

        .rv-cdn-alert-content p {
            margin: 0;
            color: var(--rv-cdn-text-secondary);
            font-size: 0.875rem;
        }

    /* Sidebar specific styles */
    .rv-cdn-sidebar-card {
        background-color: var(--rv-cdn-content-bg);
        border-radius: var(--rv-cdn-border-radius-lg);
    }

        .rv-cdn-sidebar-card:hover {
            transform: translateY(-2px);
        }

    .rv-cdn-sidebar-text {
        color: var(--rv-cdn-text-secondary);
        font-size: 0.875rem;
        margin-bottom: 1rem;
    }

    .rv-cdn-status-list, .rv-cdn-info-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .rv-cdn-status-item, .rv-cdn-info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .rv-cdn-status-label, .rv-cdn-info-label {
        font-size: 0.75rem;
        color: var(--rv-cdn-text-muted);
    }

    .rv-cdn-status-badge {
        font-size: 0.6875rem;
        font-weight: 600;
        padding: 0.25rem 0.5rem;
        border-radius: var(--rv-cdn-border-radius-md);
        text-transform: uppercase;
    }

    .rv-cdn-status-badge-success {
        background-color: var(--rv-cdn-success-light);
        color: var(--rv-cdn-success);
    }

    .rv-cdn-status-badge-danger {
        background-color: var(--rv-cdn-danger-light);
        color: var(--rv-cdn-danger);
    }

    .rv-cdn-status-badge-secondary {
        background-color: var(--rv-cdn-subtle-bg);
        color: var(--rv-cdn-text-secondary);
    }

    .rv-cdn-status-badge-info {
        background-color: var(--rv-cdn-info-light);
        color: var(--rv-cdn-info);
    }

    .rv-cdn-info-value {
        font-size: 0.8125rem;
        color: var(--rv-cdn-text-primary);
        font-weight: 500;
    }

    .rv-cdn-action-list {
        display: flex;
        flex-direction: column;
        gap: 0.375rem;
    }

    .rv-cdn-action-item {
        display: flex;
        align-items: center;
        padding: 0.625rem;
        border-radius: var(--rv-cdn-border-radius-md);
        transition: var(--rv-cdn-transition);
        background: none;
        border: none;
        cursor: pointer;
        text-align: left;
        gap: 0.75rem;
    }

        .rv-cdn-action-item:hover {
            background-color: var(--rv-cdn-primary-light);
        }

    .rv-cdn-action-icon {
        width: 2rem;
        height: 2rem;
        border-radius: var(--rv-cdn-border-radius-md);
        background-color: var(--rv-cdn-subtle-bg);
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--rv-cdn-primary);
        transition: var(--rv-cdn-transition);
        flex-shrink: 0;
    }

    .rv-cdn-action-item:hover .rv-cdn-action-icon {
        background-color: var(--rv-cdn-primary);
        color: white;
        transform: scale(1.05);
    }

    .rv-cdn-action-content {
        flex: 1;
    }

    .rv-cdn-action-title {
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--rv-cdn-text-primary);
    }

    .rv-cdn-action-arrow {
        color: var(--rv-cdn-text-muted);
        font-size: 0.75rem;
        transition: var(--rv-cdn-transition);
    }

    .rv-cdn-action-item:hover .rv-cdn-action-arrow {
        color: var(--rv-cdn-primary);
        transform: translateX(3px);
    }

    /* Modal */
    .rv-cdn-modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        animation: rv-cdn-fade-in 0.3s ease;
    }

    .rv-cdn-modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) scale(0.95);
        background-color: var(--rv-cdn-content-bg);
        border-radius: var(--rv-cdn-border-radius-lg);
        box-shadow: var(--rv-cdn-shadow-lg);
        z-index: 1001;
        width: 90%;
        max-width: 800px;
        max-height: 90vh;
        animation: rv-cdn-modal-in 0.3s cubic-bezier(0.16, 1, 0.3, 1) forwards;
        display: flex;
        flex-direction: column;
    }

    .rv-cdn-modal-content {
        display: flex;
        flex-direction: column;
        max-height: 90vh;
    }

    .rv-cdn-modal-header {
        padding: 1.25rem;
        border-bottom: 1px solid var(--rv-cdn-border-divider);
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: var(--rv-cdn-subtle-bg);
    }

    .rv-cdn-modal-title {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--rv-cdn-text-primary);
    }

    .rv-cdn-modal-close {
        width: 2rem;
        height: 2rem;
        border-radius: 50%;
        background: none;
        border: none;
        color: var(--rv-cdn-text-muted);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: var(--rv-cdn-transition);
        font-size: 1rem;
    }

        .rv-cdn-modal-close:hover {
            background-color: var(--rv-cdn-primary-light);
            color: var(--rv-cdn-primary);
            transform: rotate(90deg);
        }

    .rv-cdn-modal-body {
        padding: 1.5rem;
        overflow-y: auto;
        flex: 1;
    }

    .rv-cdn-modal-footer {
        padding: 1.25rem;
        border-top: 1px solid var(--rv-cdn-border-divider);
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
        background-color: var(--rv-cdn-subtle-bg);
    }

    .rv-cdn-modal-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.25rem;
    }

    .rv-cdn-modal-card {
        margin-top: 1.5rem;
        animation: rv-cdn-slide-up 0.3s ease;
    }

    .rv-cdn-form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 0.75rem;
        margin-top: 1.5rem;
    }

    /* Table styles */
    .rv-cdn-table-container {
        overflow-x: auto;
        margin-bottom: 1.5rem;
        border: 1px solid var(--rv-cdn-border-divider);
        border-radius: var(--rv-cdn-border-radius-md);
    }

    .rv-cdn-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        font-size: 0.875rem;
        color: var(--rv-cdn-text-primary);
    }

        .rv-cdn-table th {
            background-color: var(--rv-cdn-subtle-bg);
            font-weight: 600;
            text-align: left;
            padding: 0.75rem 1rem;
            border-bottom: 1px solid var(--rv-cdn-border-divider);
        }

        .rv-cdn-table td {
            padding: 0.75rem 1rem;
            border-bottom: 1px solid var(--rv-cdn-border-divider);
            vertical-align: middle;
        }

        .rv-cdn-table tr:last-child td {
            border-bottom: none;
        }

        .rv-cdn-table tbody tr {
            transition: var(--rv-cdn-transition);
        }

            .rv-cdn-table tbody tr:hover {
                background-color: var(--rv-cdn-primary-lighter);
            }

    .rv-cdn-copy-field {
        display: flex;
        align-items: center;
    }

    .rv-cdn-copy-btn {
        background: none;
        border: none;
        padding: 0.25rem;
        color: var(--rv-cdn-text-muted);
        cursor: pointer;
        transition: var(--rv-cdn-transition);
        border-radius: var(--rv-cdn-border-radius-sm);
        margin-left: 0.5rem;
    }

        .rv-cdn-copy-btn:hover {
            color: var(--rv-cdn-primary);
            background-color: var(--rv-cdn-primary-light);
        }

    /* Loading and spinner */
    .rv-cdn-loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem 0;
    }

    .rv-cdn-spinner {
        width: 1.5rem;
        height: 1.5rem;
        border: 2px solid rgba(var(--rv-cdn-primary-rgb), 0.2);
        border-radius: 50%;
        border-top-color: var(--rv-cdn-primary);
        animation: rv-cdn-spin 0.8s linear infinite;
        margin-right: 0.5rem;
    }

    .rv-cdn-spinner-sm {
        width: 1rem;
        height: 1rem;
        border-width: 2px;
    }

    .rv-cdn-loading-text {
        font-size: 0.875rem;
        color: var(--rv-cdn-text-secondary);
        margin-top: 1rem;
    }

    /* Animations */
    @@keyframes rv-cdn-fade-in {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    @@keyframes rv-cdn-slide-in-right {
        from

    {
        opacity: 0;
        transform: translateX(20px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    @@keyframes rv-cdn-slide-in-left {
        from

    {
        opacity: 0;
        transform: translateX(-20px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    @@keyframes rv-cdn-modal-in {
        from

    {
        opacity: 0;
        transform: translate(-50%, -50%) scale(0.95);
    }

    to {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
    }

    }

    @@keyframes rv-cdn-slide-up {
        from

    {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    @@keyframes rv-cdn-spin {
        to

    {
        transform: rotate(360deg);
    }

    }

    /* Utility classes */
    .rv-cdn-ml-2 {
        margin-left: 0.5rem;
    }

    /* Responsive styles */
    @@media (max-width: 992px) {
        .rv-cdn-content

    {
        flex-direction: column;
    }

    .rv-cdn-main, .rv-cdn-sidebar {
        flex: 1 1 100%;
        max-width: 100%;
    }

    .rv-cdn-actions {
        margin-top: 1rem;
    }

    .rv-cdn-card-header {
        flex-direction: column;
        align-items: flex-start;
    }

    .rv-cdn-card-header-content {
        margin-bottom: 0.75rem;
    }

    }

    @@media (max-width: 768px) {
        .rv-cdn-container

    {
        padding: 1rem;
    }

    .rv-cdn-form-col {
        flex: 1 1 100%;
    }

    .rv-cdn-modal {
        width: 95%;
        max-height: 95vh;
    }

    .rv-cdn-table th, .rv-cdn-table td {
        padding: 0.5rem 0.75rem;
    }

    .rv-cdn-modal-actions {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }

    }

    @@media (max-width: 576px) {
        .rv-cdn-title

    {
        font-size: 1.5rem;
    }

    .rv-cdn-subtitle {
        font-size: 0.875rem;
    }

    .rv-cdn-card-title {
        font-size: 1.125rem;
    }

    .rv-cdn-modal-title {
        font-size: 1.125rem;
    }

    .rv-cdn-section-title {
        font-size: 0.9375rem;
    }

    .rv-cdn-card-body, .rv-cdn-modal-body {
        padding: 1rem;
    }

    .rv-cdn-btn {
        padding: 0.5rem 0.875rem;
    }

    .rv-cdn-modal-footer {
        flex-direction: column;
    }

        .rv-cdn-modal-footer .rv-cdn-btn {
            width: 100%;
        }

    .rv-cdn-form-actions {
        flex-direction: column;
    }

        .rv-cdn-form-actions .rv-cdn-btn {
            width: 100%;
        }

    }

    @@media (max-width: 400px) {
        .rv-cdn-container

    {
        padding: 0.75rem;
    }

    .rv-cdn-header {
        margin-bottom: 1rem;
    }

    .rv-cdn-title {
        font-size: 1.25rem;
    }

    .rv-cdn-card-header, .rv-cdn-card-body, .rv-cdn-modal-header, .rv-cdn-modal-body, .rv-cdn-modal-footer {
        padding: 0.75rem;
    }

    .rv-cdn-form-label {
        font-size: 0.8125rem;
    }

    .rv-cdn-input {
        font-size: 0.8125rem;
        padding: 0.5rem 0.75rem;
    }

    .rv-cdn-btn {
        font-size: 0.8125rem;
        padding: 0.375rem 0.625rem;
    }

    .rv-cdn-action-icon {
        width: 1.75rem;
        height: 1.75rem;
    }

    .rv-cdn-toggle-options {
        gap: 0.75rem;
    }

    .rv-cdn-modal {
        width: 100%;
        height: 100%;
        max-height: none;
        border-radius: 0;
    }

    }
</style>

@code {
    private CdnConfiguration settings = new CdnConfiguration();
    private bool isSaving = false;
    private bool isTestingConnection = false;
    private bool? isTestSuccessful;
    private string testMessage = "";
    private bool isCdnOnline = false;
    private bool isDirectAccessAvailable = false;
    private bool isDevEnvironment = false;
    private string serverOs = "Linux";
    private string aspNetVersion = ".NET 9.0";
    private string uptimeDisplay = "3 days, 7 hours";
    private DateTime startTime = DateTime.Now.AddDays(-3).AddHours(-7); // Mock start time
    private string configSource = "Database";

    // Using a string representation for categories since it's no longer in the model
    private string categoriesString = "documents,images,hr,weighbridge,lab";
    private List<CdnCategory> categories = new List<CdnCategory>();

    // API Key Management
    private bool showApiKeyManagement = false;
    private bool isLoadingApiKeys = false;
    private List<CdnApiKey> apiKeys = new List<CdnApiKey>();
    private bool showNewApiKeyForm = false;
    private CdnApiKey editingApiKey = null;
    private string newApiKeyName = "";
    private string newApiKeyDescription = "";
    private string newApiKeyAllowedIps = "";
    private string newApiKeyAllowedDomains = "";
    private DateTime? newApiKeyExpiryDate = null;
    private bool newApiKeyIsActive = true;

    protected override async Task OnInitializedAsync()
    {
        // Load categories
        await LoadCategoriesFromDatabase();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load current settings from database
            await LoadConfigFromDatabase();

            // Check CDN status
            await UpdateCdnStatus();

            // Calculate uptime
            UpdateUptime();

            await InvokeAsync(() => this.StateHasChanged());
        }
    }

    private async Task LoadCategoriesFromDatabase()
    {
        try
        {
            categories = await CdnService.GetCategoriesAsync();
            categoriesString = string.Join(",", categories.Select(c => c.Name));
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading categories", ex.Message);
            categoriesString = "documents,images,hr,weighbridge,lab";
        }
    }

    private async Task LoadConfigFromDatabase()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();

            // Get active configuration from the database
            var dbConfig = await context.Set<CdnConfiguration>()
                .Where(c => c.IsActive)
                .OrderByDescending(c => c.Id)
                .FirstOrDefaultAsync();

            if (dbConfig != null)
            {
                settings = dbConfig;
                configSource = "Database";
            }
            else
            {
                // Fallback to appsettings.json
                settings.BaseUrl = Configuration["CDN:BaseUrl"] ?? "";
                settings.StoragePath = Configuration["CDN:StoragePath"] ?? "";
                settings.ApiKey = Configuration["CDN:ApiKey"] ?? "RooviaCDNKey";
                settings.MaxFileSizeMB = 200;
                settings.AllowedFileTypes = ".jpg,.jpeg,.png,.gif,.pdf,.doc,.docx,.xls,.xlsx,.csv,.txt,.mp4,.mp3,.zip";
                settings.EnforceAuthentication = true;
                settings.AllowDirectAccess = true;
                settings.EnableCaching = true;
                configSource = "appsettings.json";
            }

            // Load categories for dropdown or display
            await LoadCategoriesFromDatabase();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading configuration from database", ex.Message);

            // Fallback to appsettings.json
            settings.BaseUrl = Configuration["CDN:BaseUrl"] ?? "";
            settings.StoragePath = Configuration["CDN:StoragePath"] ?? "";
            settings.ApiKey = Configuration["CDN:ApiKey"] ?? "RooviaCDNKey";
            settings.MaxFileSizeMB = 200;
            settings.AllowedFileTypes = ".jpg,.jpeg,.png,.gif,.pdf,.doc,.docx,.xls,.xlsx,.csv,.txt,.mp4,.mp3,.zip";
            settings.EnforceAuthentication = true;
            settings.AllowDirectAccess = true;
            settings.EnableCaching = true;
            configSource = "appsettings.json (Database Error)";
        }
    }

    private async Task SaveSettings()
    {
        try
        {
            isSaving = true;
            StateHasChanged();

            // Wait a moment to show the saving indicator
            await Task.Delay(500);

            using var context = await DbFactory.CreateDbContextAsync();

            // Process categories first (if changed)
            string[] currentCategoryNames = categoriesString.Split(',', StringSplitOptions.RemoveEmptyEntries);
            var existingCategories = await context.Set<CdnCategory>().ToListAsync();

            // Add any new categories
            foreach (var categoryName in currentCategoryNames)
            {
                var trimmedName = categoryName.Trim();
                if (!string.IsNullOrEmpty(trimmedName) && !existingCategories.Any(c => c.Name == trimmedName))
                {
                    var newCategory = new CdnCategory
                        {
                            Name = trimmedName,
                            DisplayName = char.ToUpper(trimmedName[0]) + trimmedName.Substring(1),
                            IsActive = true,
                            CreatedDate = DateTime.Now,
                            CreatedBy = "Admin" // Replace with actual user
                        };

                    context.Add(newCategory);
                }
            }

            // Save category changes first
            await context.SaveChangesAsync();

            // Check if we're updating an existing config or creating a new one
            if (settings.Id > 0)
            {
                // Update existing configuration
                var existingConfig = await context.Set<CdnConfiguration>().FindAsync(settings.Id);
                if (existingConfig != null)
                {
                    // Update properties
                    existingConfig.BaseUrl = settings.BaseUrl;
                    existingConfig.StoragePath = settings.StoragePath;
                    existingConfig.ApiKey = settings.ApiKey;
                    existingConfig.MaxFileSizeMB = settings.MaxFileSizeMB;
                    existingConfig.AllowedFileTypes = settings.AllowedFileTypes;
                    existingConfig.EnforceAuthentication = settings.EnforceAuthentication;
                    existingConfig.AllowDirectAccess = settings.AllowDirectAccess;
                    existingConfig.EnableCaching = settings.EnableCaching;
                    existingConfig.ModifiedDate = DateTime.Now;
                    existingConfig.ModifiedBy = "Admin"; // Replace with actual user
                }
            }
            else
            {
                // Create new configuration
                settings.CreatedDate = DateTime.Now;
                settings.ModifiedDate = DateTime.Now;
                settings.ModifiedBy = "Admin"; // Replace with actual user
                settings.IsActive = true;

                context.Add(settings);

                // Deactivate all other configurations
                var otherConfigs = await context.Set<CdnConfiguration>()
                    .Where(c => c.Id != settings.Id)
                    .ToListAsync();

                foreach (var config in otherConfigs)
                {
                    config.IsActive = false;
                    config.ModifiedDate = DateTime.Now;
                    config.ModifiedBy = "Admin"; // Replace with actual user
                }
            }

            // Save changes
            await context.SaveChangesAsync();

            // Check if API key exists, if not create it
            var existingApiKey = await context.Set<CdnApiKey>()
                .Where(k => k.Key == settings.ApiKey)
                .FirstOrDefaultAsync();

            if (existingApiKey == null)
            {
                // Create API key
                var apiKey = new CdnApiKey
                    {
                        Key = settings.ApiKey,
                        Name = "Default API Key",
                        Description = "Default API key for CDN operations",
                        IsActive = true,
                        CreatedDate = DateTime.Now,
                        CreatedBy = "Admin" // Replace with actual user
                    };

                context.Add(apiKey);
                await context.SaveChangesAsync();
            }

            configSource = "Database";
            await JSRuntime.InvokeVoidAsync("alert", "Settings saved successfully to the database.");

            // Update CDN status
            await UpdateCdnStatus();

            // Refresh categories
            await LoadCategoriesFromDatabase();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error saving settings", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving settings: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task UpdateCdnStatus()
    {
        try
        {
            // Check if direct access is available
            isDirectAccessAvailable = !string.IsNullOrEmpty(settings.StoragePath) && Directory.Exists(settings.StoragePath);

            // Check if development environment
            isDevEnvironment = CdnService.IsDevEnvironment();

            // Check CDN connection
            await CheckCdnStatus();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error updating CDN status", ex.Message);
        }
    }

    private async Task TestConnection()
    {
        try
        {
            isTestingConnection = true;
            isTestSuccessful = null;
            StateHasChanged();

            await Task.Delay(1000); // Simulated test delay

            // Create HTTP client and set API key
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Add("X-Api-Key", settings.ApiKey);

            // Test connectivity to CDN base URL
            var testUrl = $"{settings.BaseUrl.TrimEnd('/')}?key={settings.ApiKey}";
            var response = await httpClient.GetAsync(testUrl);

            isTestSuccessful = response.IsSuccessStatusCode;
            testMessage = isTestSuccessful.Value
                ? "Successfully connected to the CDN. The server is responding correctly."
                : $"Failed to connect to the CDN. Status code: {(int)response.StatusCode} {response.ReasonPhrase}";
        }
        catch (Exception ex)
        {
            isTestSuccessful = false;
            testMessage = $"Error testing connection: {ex.Message}";
        }
        finally
        {
            isTestingConnection = false;
            StateHasChanged();
        }
    }

    private async Task CheckCdnStatus()
    {
        try
        {
            // Create HTTP client and set API key
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Add("X-Api-Key", settings.ApiKey);

            // Test connectivity to CDN base URL
            var testUrl = $"{settings.BaseUrl.TrimEnd('/')}?key={settings.ApiKey}";
            var response = await httpClient.GetAsync(testUrl);
            isCdnOnline = response.IsSuccessStatusCode;
        }
        catch
        {
            isCdnOnline = false;
        }
    }

    private void UpdateUptime()
    {
        var uptime = DateTime.Now - startTime;
        uptimeDisplay = $"{uptime.Days} days, {uptime.Hours} hours";
    }

    private void GenerateApiKey()
    {
        // Generate a new random API key
        settings.ApiKey = Guid.NewGuid().ToString("N").Substring(0, 24);
    }

    private void GoToDashboard()
    {
        NavigationManager.NavigateTo("/cdn-dashboard");
    }

    private void ViewTestPage()
    {
        NavigationManager.NavigateTo("/cdn-test");
    }

    private async Task ClearCache()
    {
        try
        {
            // Create HTTP client
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Add("X-Api-Key", settings.ApiKey);

            // Call API endpoint to clear cache
            var baseUrl = new Uri(NavigationManager.BaseUri).GetLeftPart(UriPartial.Authority);
            var response = await httpClient.PostAsync($"{baseUrl}/api/cdn/maintenance/clearcache", null);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "CDN cache cleared successfully");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("console.error", "Failed to clear cache", errorContent);
                await JSRuntime.InvokeVoidAsync("alert", "Failed to clear CDN cache. Server returned an error.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error clearing cache", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while clearing the CDN cache. Please try again.");
        }
    }

    private async Task ManageApiKeys()
    {
        showApiKeyManagement = true;
        await LoadApiKeys();
    }

    private async Task LoadApiKeys()
    {
        try
        {
            isLoadingApiKeys = true;
            StateHasChanged();

            using var context = await DbFactory.CreateDbContextAsync();

            // Get API keys from database
            apiKeys = await context.Set<CdnApiKey>()
                .OrderByDescending(k => k.IsActive)
                .ThenByDescending(k => k.CreatedDate)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading API keys", ex.Message);
            apiKeys.Clear();
        }
        finally
        {
            isLoadingApiKeys = false;
            StateHasChanged();
        }
    }

    private void CreateNewApiKey()
    {
        editingApiKey = null;
        newApiKeyName = "";
        newApiKeyDescription = "";
        newApiKeyAllowedIps = "";
        newApiKeyAllowedDomains = "";
        newApiKeyExpiryDate = null;
        newApiKeyIsActive = true;
        showNewApiKeyForm = true;
    }

    private void EditApiKey(CdnApiKey apiKey)
    {
        editingApiKey = apiKey;
        newApiKeyName = apiKey.Name;
        newApiKeyDescription = apiKey.Description ?? "";
        newApiKeyAllowedIps = apiKey.AllowedIps ?? "";
        newApiKeyAllowedDomains = apiKey.AllowedDomains ?? "";
        newApiKeyExpiryDate = apiKey.ExpiryDate;
        newApiKeyIsActive = apiKey.IsActive;
        showNewApiKeyForm = true;
    }

    private async Task SaveApiKey()
    {
        if (string.IsNullOrWhiteSpace(newApiKeyName))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a name for the API key.");
            return;
        }

        try
        {
            using var context = await DbFactory.CreateDbContextAsync();

            if (editingApiKey == null)
            {
                // Create new API key
                var apiKey = new CdnApiKey
                    {
                        Key = Guid.NewGuid().ToString("N").Substring(0, 24),
                        Name = newApiKeyName,
                        Description = newApiKeyDescription,
                        IsActive = newApiKeyIsActive,
                        CreatedDate = DateTime.Now,
                        ExpiryDate = newApiKeyExpiryDate,
                        CreatedBy = "Admin", // Replace with actual user
                        AllowedIps = newApiKeyAllowedIps,
                        AllowedDomains = newApiKeyAllowedDomains
                    };

                context.Add(apiKey);
                apiKeys.Add(apiKey);
            }
            else
            {
                // Update existing API key
                var existingApiKey = await context.Set<CdnApiKey>().FindAsync(editingApiKey.Id);
                if (existingApiKey != null)
                {
                    existingApiKey.Name = newApiKeyName;
                    existingApiKey.Description = newApiKeyDescription;
                    existingApiKey.IsActive = newApiKeyIsActive;
                    existingApiKey.ExpiryDate = newApiKeyExpiryDate;
                    existingApiKey.AllowedIps = newApiKeyAllowedIps;
                    existingApiKey.AllowedDomains = newApiKeyAllowedDomains;

                    // Update in the UI list
                    var index = apiKeys.IndexOf(editingApiKey);
                    if (index >= 0)
                    {
                        apiKeys[index] = existingApiKey;
                    }
                }
            }

            await context.SaveChangesAsync();

            showNewApiKeyForm = false;
            editingApiKey = null;
            await LoadApiKeys(); // Refresh the list
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error saving API key", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving API key: {ex.Message}");
        }
    }

    private void CancelApiKeyEdit()
    {
        showNewApiKeyForm = false;
        editingApiKey = null;
    }

    private async Task DeactivateApiKey(CdnApiKey apiKey)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to deactivate the API key '{apiKey.Name}'?");
            if (!confirmed)
                return;

            using var context = await DbFactory.CreateDbContextAsync();

            var existingApiKey = await context.Set<CdnApiKey>().FindAsync(apiKey.Id);
            if (existingApiKey != null)
            {
                existingApiKey.IsActive = false;
                await context.SaveChangesAsync();

                // Update in the UI list
                var index = apiKeys.IndexOf(apiKey);
                if (index >= 0)
                {
                    apiKeys[index].IsActive = false;
                }

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error deactivating API key", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error deactivating API key: {ex.Message}");
        }
    }

    private async Task CopyApiKeyToClipboard(string apiKey)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", apiKey);
        await JSRuntime.InvokeVoidAsync("alert", "API key copied to clipboard");
    }
}