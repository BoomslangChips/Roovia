@using System.Net.Http.Headers
@using Roovia.Interfaces
@rendermode InteractiveServer
@inject ICdnService CdnService
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="cdn-file-manager">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">@Title</h5>
            <div>
                <button @onclick="LoadFiles" class="btn btn-sm btn-outline-primary">
                    <i class="fa-light fa-refresh"></i> Refresh
                </button>
                @if (ShowUploadButton)
                {
                    <button @onclick="() => showUploadDialog = true" class="btn btn-sm btn-primary ms-2">
                        <i class="fa-light fa-upload"></i> Upload Files
                    </button>
                }
            </div>
        </div>
        <div class="card-body">
            @if (IsLoading)
            {
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading files...</p>
                </div>
            }
            else if (!Files.Any())
            {
                <div class="text-center p-4">
                    <p class="text-muted">@EmptyMessage</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th style="width: 40px;"></th>
                                <th>Name</th>
                                <th>Size</th>
                                <th>Date</th>
                                <th style="width: 150px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var file in Files)
                            {
                                <tr>
                                    <td class="text-center">
                                        @if (file.ContentType.StartsWith("image/"))
                                        {
                                            <i class="fa-light fa-image text-primary"></i>
                                        }
                                        else if (file.ContentType.Contains("pdf"))
                                        {
                                            <i class="fa-light fa-file-pdf text-danger"></i>
                                        }
                                        else if (file.ContentType.Contains("word"))
                                        {
                                            <i class="fa-light fa-file-word text-primary"></i>
                                        }
                                        else if (file.ContentType.Contains("excel") || file.ContentType.Contains("sheet"))
                                        {
                                            <i class="fa-light fa-file-excel text-success"></i>
                                        }
                                        else if (file.ContentType.StartsWith("video/"))
                                        {
                                            <i class="fa-light fa-file-video text-danger"></i>
                                        }
                                        else if (file.ContentType.StartsWith("audio/"))
                                        {
                                            <i class="fa-light fa-file-audio text-warning"></i>
                                        }
                                        else
                                        {
                                            <i class="fa-light fa-file text-secondary"></i>
                                        }
                                    </td>
                                    <td>@file.FileName</td>
                                    <td>@FormatFileSize(file.Size)</td>
                                    <td>@file.UploadDate.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>
                                        <div class="btn-group">
                                            <button @onclick="() => ViewFile(file)" class="btn btn-sm btn-outline-primary" title="View file">
                                                <i class="fa-light fa-eye"></i>
                                            </button>
                                            <button @onclick="() => ShowRenameDialog(file)" class="btn btn-sm btn-outline-secondary" title="Rename file">
                                                <i class="fa-light fa-edit"></i>
                                            </button>
                                            @if (AllowDelete)
                                            {
                                                <button @onclick="() => ShowDeleteConfirmation(file)" class="btn btn-sm btn-outline-danger" title="Delete file">
                                                    <i class="fa-light fa-trash"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    @if (showUploadDialog)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Upload Files</h5>
                        <button type="button" class="btn-close" @onclick="() => showUploadDialog = false"></button>
                    </div>
                    <div class="modal-body">
                        <CdnFileUpload Category="@Category"
                                       Title="Upload Files"
                                       Description="Drag and drop files here, or click to browse"
                                       FileTypeHint="@FileTypeHint"
                                       AcceptedFileTypes="@AcceptedFileTypes"
                                       OnFileUploaded="HandleFileUploaded"
                                       OnFilesUploaded="HandleFilesUploaded"
                                       Multiple="true"
                                       MaxFileSize="209715200" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showUploadDialog = false">Close</button>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        </div>
    }

    @if (showRenameDialog)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Rename File</h5>
                        <button type="button" class="btn-close" @onclick="() => showRenameDialog = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="newFileName">New file name:</label>
                            <input type="text" class="form-control" id="newFileName" @bind="newFileName" />
                            <small class="form-text text-muted">Enter the new name without extension.</small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showRenameDialog = false">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="RenameFile">Save</button>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        </div>
    }

    @if (showDeleteDialog)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Deletion</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteDialog = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this file?</p>
                        <p><strong>@(selectedFile?.FileName ?? "")</strong></p>
                        <p class="text-danger">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showDeleteDialog = false">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteFile">Delete</button>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        </div>
    }
</div>

@code {
    [Parameter] public string Title { get; set; } = "File Manager";
    [Parameter] public string Category { get; set; } = "documents";
    [Parameter] public string FilePattern { get; set; } = "*";
    [Parameter] public bool AutoLoad { get; set; } = true;
    [Parameter] public bool AllowDelete { get; set; } = true;
    [Parameter] public string EmptyMessage { get; set; } = "No files found.";
    [Parameter] public string AcceptedFileTypes { get; set; } = ".jpg,.jpeg,.png,.pdf,.doc,.docx,.xls,.xlsx,.csv,.txt,.mp4,.mp3";
    [Parameter] public string FileTypeHint { get; set; } = "Accepted file types: Images, Documents, Media files";
    [Parameter] public bool ShowUploadButton { get; set; } = true;
    [Parameter] public EventCallback<FileInfo> OnFileUploaded { get; set; }
    [Parameter] public EventCallback<FileInfo> OnFileRenamed { get; set; }
    [Parameter] public EventCallback<FileInfo> OnFileDeleted { get; set; }

    private List<FileInfo> Files { get; set; } = new List<FileInfo>();
    private bool IsLoading { get; set; } = false;
    private bool showUploadDialog = false;
    private bool showRenameDialog = false;
    private bool showDeleteDialog = false;
    private FileInfo selectedFile;
    private string newFileName;
    private string apiKey;

    protected override async Task OnInitializedAsync()
    {
        apiKey = CdnService.GetApiKey();

        if (AutoLoad)
        {
            await LoadFiles();
        }
    }

    private async Task LoadFiles()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            // Create HTTP client and set API key
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Add("X-Api-Key", apiKey);

            // Get base URL
            var baseUrl = new Uri(NavigationManager.BaseUri).GetLeftPart(UriPartial.Authority);
            var apiUrl = $"{baseUrl}/api/cdn/files?category={Category}&pattern={FilePattern}";

            var response = await httpClient.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<FilesResponse>();

                if (result != null && result.success)
                {
                    Files = result.files.Select(f => new FileInfo
                        {
                            FileName = f.FileName,
                            Url = f.Url,
                            ContentType = f.ContentType,
                            Size = f.Size,
                            Category = f.Category,
                            UploadDate = f.UploadDate
                        }).ToList();
                }
                else
                {
                    Files.Clear();
                    await JSRuntime.InvokeVoidAsync("console.error", "Failed to load files", result?.message);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("console.error", "Failed to load files", errorContent);
                Files.Clear();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading files", ex.Message);
            Files.Clear();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task ViewFile(FileInfo file)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("openUrlWithApiKey", file.Url, apiKey);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error viewing file", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", "Failed to view file. Please try again.");
        }
    }

    private void ShowRenameDialog(FileInfo file)
    {
        selectedFile = file;
        newFileName = Path.GetFileNameWithoutExtension(file.FileName);
        showRenameDialog = true;
    }

    private async Task RenameFile()
    {
        if (selectedFile == null || string.IsNullOrWhiteSpace(newFileName))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a valid file name.");
            return;
        }

        try
        {
            // Call JS function to rename file
            var result = await JSRuntime.InvokeAsync<RenameResult>("renameFile", selectedFile.Url, newFileName, apiKey);

            if (result.success)
            {
                showRenameDialog = false;

                // Update local file list
                var oldFile = selectedFile;
                var index = Files.IndexOf(oldFile);

                if (index >= 0)
                {
                    // Update with new URL and filename
                    var fileName = Path.GetFileName(result.url);
                    Files[index].Url = result.url;
                    Files[index].FileName = fileName;

                    // Notify parent component
                    await OnFileRenamed.InvokeAsync(Files[index]);
                }

                await JSRuntime.InvokeVoidAsync("alert", "File renamed successfully.");
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to rename file: {result.message}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error renaming file", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while renaming the file. Please try again.");
        }
    }

    private void ShowDeleteConfirmation(FileInfo file)
    {
        selectedFile = file;
        showDeleteDialog = true;
    }

    private async Task DeleteFile()
    {
        if (selectedFile == null)
            return;

        try
        {
            // Create HTTP client and set API key
            var httpClient = HttpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Add("X-Api-Key", apiKey);

            // Use full API URL with the API key in headers
            var baseUrl = new Uri(NavigationManager.BaseUri).GetLeftPart(UriPartial.Authority);
            var apiUrl = $"{baseUrl}/api/cdn/delete?path={Uri.EscapeDataString(selectedFile.Url)}";
            var response = await httpClient.DeleteAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<DeleteResponse>();

                if (result != null && result.success)
                {
                    // Remove from list
                    var fileToRemove = selectedFile;
                    Files.Remove(fileToRemove);

                    // Close dialog
                    showDeleteDialog = false;

                    // Notify parent
                    await OnFileDeleted.InvokeAsync(fileToRemove);

                    StateHasChanged();
                    await JSRuntime.InvokeVoidAsync("console.log", "File deleted successfully:", fileToRemove.FileName);
                }
                else
                {
                    showDeleteDialog = false;
                    await JSRuntime.InvokeVoidAsync("console.error", "Delete failed with success=false", result?.message);
                    await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete file: {result?.message}");
                }
            }
            else
            {
                showDeleteDialog = false;
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("console.error", "Delete failed", errorContent);
                await JSRuntime.InvokeVoidAsync("alert", "Failed to delete file. Server returned an error.");
            }
        }
        catch (Exception ex)
        {
            showDeleteDialog = false;
            await JSRuntime.InvokeVoidAsync("console.error", "Error deleting file", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while deleting the file. Please try again.");
        }
    }

    private void HandleFileUploaded(CdnFileUpload.UploadedFileInfo uploadedFile)
    {
        // Convert to our FileInfo type
        var fileInfo = new FileInfo
            {
                FileName = uploadedFile.FileName,
                Url = uploadedFile.Url,
                ContentType = uploadedFile.ContentType,
                Size = uploadedFile.Size,
                Category = uploadedFile.Category,
                UploadDate = DateTime.Now
            };

        // Add to local list
        Files.Add(fileInfo);

        // Notify parent
        OnFileUploaded.InvokeAsync(fileInfo);
    }

    private async Task HandleFilesUploaded(List<CdnFileUpload.UploadedFileInfo> uploadedFiles)
    {
        // Refresh the file list to show all new files
        await LoadFiles();
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;

        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }

        return $"{len:0.##} {sizes[order]}";
    }

    public class FileInfo
    {
        public string FileName { get; set; }
        public string Url { get; set; }
        public string ContentType { get; set; }
        public long Size { get; set; }
        public string Category { get; set; }
        public DateTime UploadDate { get; set; }
    }

    private class FilesResponse
    {
        public bool success { get; set; }
        public List<FileItem> files { get; set; }
        public string message { get; set; }
    }

    private class FileItem
    {
        public string FileName { get; set; }
        public string Url { get; set; }
        public string ContentType { get; set; }
        public long Size { get; set; }
        public string Category { get; set; }
        public DateTime UploadDate { get; set; }
    }

    private class DeleteResponse
    {
        public bool success { get; set; }
        public string message { get; set; }
    }

    private class RenameResult
    {
        public bool success { get; set; }
        public string url { get; set; }
        public string message { get; set; }
    }
}