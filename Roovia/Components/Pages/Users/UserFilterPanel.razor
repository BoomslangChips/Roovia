@using Roovia.Models.Users
@using Roovia.Models.Helper

<div class="user-filters-panel">
    <div class="filter-section">
        <div class="search-input-wrapper">
            <i class="fa-light fa-search search-icon"></i>
            <input type="text" class="custom-search-input" placeholder="Search users..."
                   @bind="searchValue" @bind:event="oninput" @onkeyup="HandleKeyPress" />
            @if (!string.IsNullOrEmpty(searchValue))
            {
                <button class="clear-search-btn" @onclick="ClearSearch">
                    <i class="fa-light fa-times"></i>
                </button>
            }
        </div>

        <div class="filter-selectors">
            <div class="filter-group">
                <RVDropdown @ref="companyDropdown" TriggerText="@GetCompanyFilterText()" ButtonType="outline" Position="bottom-start"
                            CssClass="filter-dropdown company-dropdown" FullWidth="true">
                    <div class="dropdown-header">
                        <span>Filter by Company</span>
                    </div>
                    <button type="button" class="roovia-dropdown-item @(SelectedCompanyId == null ? "active" : "")"
                            @onclick="async () => await SelectCompany(null)">
                        <i class="fa-light fa-building"></i>
                        <span>All Companies</span>
                        @if (SelectedCompanyId == null)
                        {
                            <i class="fa-light fa-check"></i>
                        }
                    </button>
                    <div class="dropdown-divider"></div>
                    @if (Companies != null)
                    {
                        @foreach (var company in Companies.OrderBy(c => c.Name))
                        {
                            <button type="button" class="roovia-dropdown-item @(SelectedCompanyId == company.Id ? "active" : "")"
                                    @onclick="async () => await SelectCompany(company.Id)">
                                <i class="fa-light fa-building"></i>
                                <span>@company.Name</span>
                                @if (SelectedCompanyId == company.Id)
                                {
                                    <i class="fa-light fa-check"></i>
                                }
                            </button>
                        }
                    }
                </RVDropdown>

                <RVDropdown @ref="branchDropdown" TriggerText="@GetBranchFilterText()" ButtonType="outline" Position="bottom-start"
                            CssClass="filter-dropdown branch-dropdown" Disabled="@(SelectedCompanyId == null || Branches == null || !Branches.Any())"
                            FullWidth="true">
                    <div class="dropdown-header">
                        <span>Filter by Branch</span>
                    </div>
                    <button type="button" class="roovia-dropdown-item @(SelectedBranchId == null ? "active" : "")"
                            @onclick="async () => await SelectBranch(null)">
                        <i class="fa-light fa-code-branch"></i>
                        <span>All Branches</span>
                        @if (SelectedBranchId == null)
                        {
                            <i class="fa-light fa-check"></i>
                        }
                    </button>
                    <div class="dropdown-divider"></div>
                    @if (Branches != null)
                    {
                        @foreach (var branch in Branches.OrderBy(b => b.Name))
                        {
                            <button type="button" class="roovia-dropdown-item @(SelectedBranchId == branch.Id ? "active" : "")"
                                    @onclick="async () => await SelectBranch(branch.Id)">
                                <i class="fa-light fa-code-branch"></i>
                                <span>@branch.Name</span>
                                @if (SelectedBranchId == branch.Id)
                                {
                                    <i class="fa-light fa-check"></i>
                                }
                            </button>
                        }
                    }
                </RVDropdown>

                <RVDropdown @ref="roleDropdown" TriggerText="@GetRoleFilterText()" ButtonType="outline" Position="bottom-start"
                            CssClass="filter-dropdown role-dropdown" FullWidth="true">
                    <div class="dropdown-header">
                        <span>Filter by Role</span>
                    </div>
                    <button type="button" class="roovia-dropdown-item @(SelectedRoleFilter == "all" ? "active" : "")"
                            @onclick='async () => await SelectRole("all")'>
                        <i class="fa-light fa-users"></i>
                        <span>All Roles</span>
                        @if (SelectedRoleFilter == "all")
                        {
                            <i class="fa-light fa-check"></i>
                        }
                    </button>
                    <div class="dropdown-divider"></div>
                    @foreach (var role in Enum.GetValues(typeof(SystemRole)))
                    {
                        var roleValue = role.ToString();
                        <button type="button" class="roovia-dropdown-item @(SelectedRoleFilter == roleValue ? "active" : "")"
                                @onclick="async () => await SelectRole(roleValue)">
                            <i class="@GetRoleIcon((SystemRole)role)"></i>
                            <span>@GetRoleDisplayName((SystemRole)role)</span>
                            @if (SelectedRoleFilter == roleValue)
                            {
                                <i class="fa-light fa-check"></i>
                            }
                        </button>
                    }
                </RVDropdown>

                <RVDropdown @ref="statusDropdown" TriggerText="@GetStatusFilterText()" ButtonType="outline" Position="bottom-start"
                            CssClass="filter-dropdown status-dropdown" FullWidth="true">
                    <div class="dropdown-header">
                        <span>Filter by Status</span>
                    </div>
                    <button type="button" class="roovia-dropdown-item @(SelectedStatusFilter == "all" ? "active" : "")"
                            @onclick='async () => await SelectStatus("all")'>
                        <i class="fa-light fa-users"></i>
                        <span>All Statuses</span>
                        @if (SelectedStatusFilter == "all")
                        {
                            <i class="fa-light fa-check"></i>
                        }
                    </button>
                    <button type="button" class="roovia-dropdown-item @(SelectedStatusFilter == "active" ? "active" : "")"
                            @onclick='async () => await SelectStatus("active")'>
                        <i class="fa-light fa-user-check"></i>
                        <span>Active</span>
                        @if (SelectedStatusFilter == "active")
                        {
                            <i class="fa-light fa-check"></i>
                        }
                    </button>
                    <button type="button" class="roovia-dropdown-item @(SelectedStatusFilter == "inactive" ? "active" : "")"
                            @onclick='async () => await SelectStatus("inactive")'>
                        <i class="fa-light fa-user-slash"></i>
                        <span>Inactive</span>
                        @if (SelectedStatusFilter == "inactive")
                        {
                            <i class="fa-light fa-check"></i>
                        }
                    </button>
                </RVDropdown>
            </div>

            <div class="filter-actions">
                <RVButton ButtonType="secondary" IconLeft="fa-light fa-filter-slash" Text="Clear" OnClick="HandleClearFilters"
                          Disabled="@(!HasActiveFilters)" CssClass="clear-filters-btn" />

                <RVButton ButtonType="outline" IconLeft="fa-light fa-sync" Text="Refresh" OnClick="HandleRefresh" />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<Company>? Companies { get; set; }
    [Parameter] public int? SelectedCompanyId { get; set; }
    [Parameter] public EventCallback<int?> OnCompanySelected { get; set; }

    [Parameter] public List<Branch>? Branches { get; set; }
    [Parameter] public int? SelectedBranchId { get; set; }
    [Parameter] public EventCallback<int?> OnBranchSelected { get; set; }

    [Parameter] public string SelectedRoleFilter { get; set; } = "all";
    [Parameter] public EventCallback<string> OnRoleFilterChanged { get; set; }

    [Parameter] public string SelectedStatusFilter { get; set; } = "all";
    [Parameter] public EventCallback<string> OnStatusFilterChanged { get; set; }

    [Parameter] public string SearchTerm { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnSearchChanged { get; set; }

    [Parameter] public EventCallback OnClearFilters { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }

    private string searchValue = string.Empty;

    // References to the dropdown components
    private RVDropdown companyDropdown;
    private RVDropdown branchDropdown;
    private RVDropdown roleDropdown;
    private RVDropdown statusDropdown;

    protected override void OnParametersSet()
    {
        searchValue = SearchTerm;
    }

    private bool HasActiveFilters =>
        !string.IsNullOrEmpty(SearchTerm) ||
        SelectedCompanyId.HasValue ||
        SelectedBranchId.HasValue ||
        SelectedRoleFilter != "all" ||
        SelectedStatusFilter != "all";

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnSearchChanged.InvokeAsync(searchValue);
        }
    }

    // Updated selection methods that also close the dropdowns
    private async Task SelectCompany(int? companyId)
    {
        if (SelectedCompanyId != companyId)
        {
            await OnCompanySelected.InvokeAsync(companyId);
        }

        // Close the dropdown after selection
        if (companyDropdown != null)
        {
            await companyDropdown.Close();
        }
    }

    private async Task SelectBranch(int? branchId)
    {
        if (SelectedBranchId != branchId)
        {
            await OnBranchSelected.InvokeAsync(branchId);
        }

        // Close the dropdown after selection
        if (branchDropdown != null)
        {
            await branchDropdown.Close();
        }
    }

    private async Task SelectRole(string role)
    {
        if (SelectedRoleFilter != role)
        {
            await OnRoleFilterChanged.InvokeAsync(role);
        }

        // Close the dropdown after selection
        if (roleDropdown != null)
        {
            await roleDropdown.Close();
        }
    }

    private async Task SelectStatus(string status)
    {
        if (SelectedStatusFilter != status)
        {
            await OnStatusFilterChanged.InvokeAsync(status);
        }

        // Close the dropdown after selection
        if (statusDropdown != null)
        {
            await statusDropdown.Close();
        }
    }

    private async Task ClearSearch()
    {
        searchValue = string.Empty;
        await OnSearchChanged.InvokeAsync(searchValue);
    }

    private async Task HandleClearFilters()
    {
        await OnClearFilters.InvokeAsync();
    }

    private async Task HandleRefresh()
    {
        await OnRefresh.InvokeAsync();
    }

    private string GetCompanyFilterText()
    {
        if (SelectedCompanyId.HasValue && Companies != null)
        {
            var company = Companies.FirstOrDefault(c => c.Id == SelectedCompanyId);
            return company != null ? $"Company: {company.Name}" : "Company: All";
        }

        return "Company: All";
    }

    private string GetBranchFilterText()
    {
        if (SelectedBranchId.HasValue && Branches != null)
        {
            var branch = Branches.FirstOrDefault(b => b.Id == SelectedBranchId);
            return branch != null ? $"Branch: {branch.Name}" : "Branch: All";
        }

        return "Branch: All";
    }

    private string GetRoleFilterText()
    {
        if (SelectedRoleFilter != "all")
        {
            if (Enum.TryParse<SystemRole>(SelectedRoleFilter, out var roleEnum))
            {
                return $"Role: {GetRoleDisplayName(roleEnum)}";
            }
        }

        return "Role: All";
    }

    private string GetStatusFilterText()
    {
        return SelectedStatusFilter switch
        {
            "active" => "Status: Active",
            "inactive" => "Status: Inactive",
            _ => "Status: All"
        };
    }

    private string GetRoleDisplayName(SystemRole role)
    {
        return role switch
        {
            SystemRole.GlobalAdmin => "System Admin",
            SystemRole.CompanyAdmin => "Company Admin",
            SystemRole.BranchManager => "Branch Manager",
            SystemRole.PropertyManager => "Property Manager",
            SystemRole.FinancialOfficer => "Financial Officer",
            SystemRole.TenantOfficer => "Tenant Officer",
            SystemRole.ReportsViewer => "Reports Viewer",
            _ => "Unknown"
        };
    }

    private string GetRoleIcon(SystemRole role)
    {
        return role switch
        {
            SystemRole.GlobalAdmin => "fa-light fa-user-crown",
            SystemRole.CompanyAdmin => "fa-light fa-user-tie",
            SystemRole.BranchManager => "fa-light fa-user-hard-hat",
            SystemRole.PropertyManager => "fa-light fa-user-chart",
            SystemRole.FinancialOfficer => "fa-light fa-user-chart",
            SystemRole.TenantOfficer => "fa-light fa-user-headset",
            SystemRole.ReportsViewer => "fa-light fa-user-chart",
            _ => "fa-light fa-user"
        };
    }
}