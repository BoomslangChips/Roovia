@using Roovia.Models.UserCompanyModels
@using Roovia.Models.UserCompanyMappingModels
@using Roovia.Interfaces

<div class="filter-panel">
    <div class="filter-section">
        <div class="search-section">
            <div class="search-input-wrapper">
                <i class="fa-light fa-search search-icon"></i>
                <input type="text" class="search-input" placeholder="Search @SearchTypePlaceholder..."
                       @bind="searchValue" @bind:event="oninput" @onkeyup="HandleKeyPress" />
                @if (!string.IsNullOrEmpty(searchValue))
                {
                    <button class="clear-search-btn" @onclick="ClearSearch" title="Clear search">
                        <i class="fa-light fa-times"></i>
                    </button>
                }
            </div>
            <div class="search-type-chips">
                @foreach (var chip in SearchTypeChips)
                {
                    <button class="chip-item @(chip.IsActive ? "active" : "")"
                            @onclick="() => HandleSearchTypeSelection(chip.Id)">
                        <i class="@chip.Icon"></i>
                        <span>@chip.Label</span>
                    </button>
                }
            </div>
        </div>

        <div class="filter-selectors">
            <div class="filter-group">
                <div class="dropdown filter-dropdown">
                    <button class="dropdown-toggle" @onclick="ToggleCompanyDropdown">
                        @GetCompanyFilterText() <i class="fa-light fa-chevron-down"></i>
                    </button>
                    @if (showCompanyDropdown)
                    {
                        <div class="dropdown-menu company-dropdown">
                            <div class="dropdown-header">
                                <span>Filter by Company</span>
                            </div>
                            <button type="button" class="dropdown-item @(SelectedCompanyId == null ? "active" : "")"
                                    @onclick="async () => await SelectCompany(null)">
                                <i class="fa-light fa-building"></i>
                                <span>All Companies</span>
                                @if (SelectedCompanyId == null)
                                {
                                    <i class="fa-light fa-check"></i>
                                }
                            </button>
                            <div class="dropdown-divider"></div>
                            @if (Companies != null)
                            {
                                @foreach (var company in Companies.OrderBy(c => c.Name))
                                {
                                    <button type="button" class="dropdown-item @(SelectedCompanyId == company.Id ? "active" : "")"
                                            @onclick="async () => await SelectCompany(company.Id)">
                                        <i class="fa-light fa-building"></i>
                                        <span>@company.Name</span>
                                        @if (SelectedCompanyId == company.Id)
                                        {
                                            <i class="fa-light fa-check"></i>
                                        }
                                    </button>
                                }
                            }
                        </div>
                    }
                </div>

                <div class="dropdown filter-dropdown">
                    <button class="dropdown-toggle" @onclick="ToggleRoleDropdown">
                        @GetRoleFilterText() <i class="fa-light fa-chevron-down"></i>
                    </button>
                    @if (showRoleDropdown)
                    {
                        <div class="dropdown-menu role-dropdown">
                            <div class="dropdown-header">
                                <span>Filter by Role</span>
                            </div>
                            <button type="button" class="dropdown-item @(SelectedRoleFilter == "all" ? "active" : "")"
                                    @onclick='async () => await SelectRole("all")'>
                                <i class="fa-light fa-users"></i>
                                <span>All Roles</span>
                                @if (SelectedRoleFilter == "all")
                                {
                                    <i class="fa-light fa-check"></i>
                                }
                            </button>
                            <div class="dropdown-divider"></div>
                            @foreach (var role in Enum.GetValues(typeof(SystemRole)))
                            {
                                var roleValue = role.ToString();
                                <button type="button" class="dropdown-item @(SelectedRoleFilter == roleValue ? "active" : "")"
                                        @onclick="async () => await SelectRole(roleValue)">
                                    <i class="@PermissionFormat.GetRoleIcon((SystemRole)role)"></i>
                                    <span>@PermissionFormat.GetRoleDisplayName((SystemRole)role)</span>
                                    @if (SelectedRoleFilter == roleValue)
                                    {
                                        <i class="fa-light fa-check"></i>
                                    }
                                </button>
                            }
                        </div>
                    }
                </div>

                <div class="dropdown filter-dropdown">
                    <button class="dropdown-toggle" @onclick="ToggleStatusDropdown">
                        @GetStatusFilterText() <i class="fa-light fa-chevron-down"></i>
                    </button>
                    @if (showStatusDropdown)
                    {
                        <div class="dropdown-menu status-dropdown">
                            <div class="dropdown-header">
                                <span>Filter by Status</span>
                            </div>
                            <button type="button" class="dropdown-item @(SelectedStatusFilter == "all" ? "active" : "")"
                                    @onclick='async () => await SelectStatus("all")'>
                                <i class="fa-light fa-users"></i>
                                <span>All Statuses</span>
                                @if (SelectedStatusFilter == "all")
                                {
                                    <i class="fa-light fa-check"></i>
                                }
                            </button>
                            <div class="dropdown-divider"></div>
                            @if (StatusTypes != null && StatusTypes.Any())
                            {
                                @foreach (var status in StatusTypes)
                                {
                                    var statusValue = status.Id.ToString();
                                    <button type="button" class="dropdown-item @(SelectedStatusFilter == statusValue ? "active" : "")"
                                            @onclick="async () => await SelectStatus(statusValue)">
                                        <i class="@GetStatusIcon(status.Name)"></i>
                                        <span>@status.Name</span>
                                        @if (SelectedStatusFilter == statusValue)
                                        {
                                            <i class="fa-light fa-check"></i>
                                        }
                                    </button>
                                }
                            }
                            else
                            {
                                <button type="button" class="dropdown-item @(SelectedStatusFilter == "active" ? "active" : "")"
                                        @onclick='async () => await SelectStatus("active")'>
                                    <i class="fa-light fa-user-check"></i>
                                    <span>Active</span>
                                    @if (SelectedStatusFilter == "active")
                                    {
                                        <i class="fa-light fa-check"></i>
                                    }
                                </button>
                                <button type="button" class="dropdown-item @(SelectedStatusFilter == "inactive" ? "active" : "")"
                                        @onclick='async () => await SelectStatus("inactive")'>
                                    <i class="fa-light fa-user-slash"></i>
                                    <span>Inactive</span>
                                    @if (SelectedStatusFilter == "inactive")
                                    {
                                        <i class="fa-light fa-check"></i>
                                    }
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="filter-actions">
                <button class="filter-btn filter-btn-secondary"
                        @onclick="HandleClearFilters"
                        disabled="@(!HasActiveFilters)">
                    <i class="fa-light fa-filter-slash"></i>
                    <span>Clear</span>
                </button>

                <button class="filter-btn filter-btn-outline" @onclick="HandleRefresh">
                    <i class="fa-light fa-sync"></i>
                    <span>Refresh</span>
                </button>
            </div>
        </div>

        @if (HasActiveFilters)
        {
            <div class="active-filters-indicator">
                <i class="fa-light fa-filter"></i>
                <span>Filters applied</span>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public List<Company>? Companies { get; set; }
    [Parameter] public IEnumerable<dynamic>? StatusTypes { get; set; }
    [Parameter] public List<SubscriptionPlan>? SubscriptionPlans { get; set; }
    [Parameter] public int? SelectedCompanyId { get; set; }
    [Parameter] public EventCallback<int?> OnCompanySelected { get; set; }

    [Parameter] public string SelectedRoleFilter { get; set; } = "all";
    [Parameter] public EventCallback<string> OnRoleFilterChanged { get; set; }

    [Parameter] public string SelectedStatusFilter { get; set; } = "all";
    [Parameter] public EventCallback<string> OnStatusFilterChanged { get; set; }

    [Parameter] public string SearchTerm { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnSearchChanged { get; set; }

    [Parameter] public string SearchType { get; set; } = "users";
    [Parameter] public EventCallback<string> OnSearchTypeChanged { get; set; }

    [Parameter] public EventCallback OnClearFilters { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }

    private string searchValue = string.Empty;
    private bool showCompanyDropdown = false;
    private bool showRoleDropdown = false;
    private bool showStatusDropdown = false;

    // Replace RVChips with a custom model for chips
    private List<ChipItem> SearchTypeChips { get; set; } = new List<ChipItem>();

    public class ChipItem
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Label { get; set; } = "";
        public string Icon { get; set; } = "";
        public bool IsActive { get; set; } = false;
    }

    private string SearchTypePlaceholder => SearchType switch
    {
        "companies" => "companies",
        "branches" => "branches",
        _ => "users"
    };

    protected override void OnInitialized()
    {
        InitializeSearchTypeChips();
    }

    protected override void OnParametersSet()
    {
        searchValue = SearchTerm;
        UpdateSearchTypeChips();
    }

    private void InitializeSearchTypeChips()
    {
        SearchTypeChips = new List<ChipItem>
        {
            new ChipItem
            {
                Label = "Users",
                Icon = "fa-light fa-users",
                IsActive = SearchType == "users"
            },
            new ChipItem
            {
                Label = "Companies",
                Icon = "fa-light fa-building",
                IsActive = SearchType == "companies"
            },
            new ChipItem
            {
                Label = "Branches",
                Icon = "fa-light fa-code-branch",
                IsActive = SearchType == "branches"
            }
        };
    }

    private void UpdateSearchTypeChips()
    {
        foreach (var chip in SearchTypeChips)
        {
            chip.IsActive = chip.Label.ToLower() == SearchType;
        }
    }

    private async Task HandleSearchTypeSelection(string chipId)
    {
        var selectedChip = SearchTypeChips.FirstOrDefault(c => c.Id == chipId);
        if (selectedChip != null)
        {
            // Update all chips - only one can be active at a time
            foreach (var chip in SearchTypeChips)
            {
                chip.IsActive = chip.Id == chipId;
            }

            // Convert chip label to lowercase for the search type
            string newSearchType = selectedChip.Label.ToLower();

            // Only invoke if the search type actually changed
            if (SearchType != newSearchType)
            {
                SearchType = newSearchType;
                await OnSearchTypeChanged.InvokeAsync(SearchType);

                // Clear the search when changing type
                if (!string.IsNullOrEmpty(searchValue))
                {
                    searchValue = string.Empty;
                    await OnSearchChanged.InvokeAsync(searchValue);
                }
            }
        }
    }

    private bool HasActiveFilters =>
    !string.IsNullOrEmpty(SearchTerm) ||
    SelectedCompanyId.HasValue ||
    SelectedRoleFilter != "all" ||
    SelectedStatusFilter != "all";

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnSearchChanged.InvokeAsync(searchValue);
        }
    }

    private void ToggleCompanyDropdown() => showCompanyDropdown = !showCompanyDropdown;
    private void ToggleRoleDropdown() => showRoleDropdown = !showRoleDropdown;
    private void ToggleStatusDropdown() => showStatusDropdown = !showStatusDropdown;

    private async Task SelectCompany(int? companyId)
    {
        if (SelectedCompanyId != companyId)
        {
            await OnCompanySelected.InvokeAsync(companyId);
        }
        showCompanyDropdown = false;
    }

    private async Task SelectRole(string role)
    {
        if (SelectedRoleFilter != role)
        {
            await OnRoleFilterChanged.InvokeAsync(role);
        }
        showRoleDropdown = false;
    }

    private async Task SelectStatus(string status)
    {
        if (SelectedStatusFilter != status)
        {
            await OnStatusFilterChanged.InvokeAsync(status);
        }
        showStatusDropdown = false;
    }

    private async Task ClearSearch()
    {
        searchValue = string.Empty;
        await OnSearchChanged.InvokeAsync(searchValue);
    }

    private async Task HandleClearFilters()
    {
        await OnClearFilters.InvokeAsync();
    }

    private async Task HandleRefresh()
    {
        await OnRefresh.InvokeAsync();
    }

    private string GetCompanyFilterText()
    {
        if (SelectedCompanyId.HasValue && Companies != null)
        {
            var company = Companies.FirstOrDefault(c => c.Id == SelectedCompanyId);
            return company != null ? $"Company: {company.Name}" : "Company: All";
        }

        return "Company: All";
    }

    private string GetRoleFilterText()
    {
        if (SelectedRoleFilter != "all")
        {
            if (Enum.TryParse<SystemRole>(SelectedRoleFilter, out var roleEnum))
            {
                return $"Role: {PermissionFormat.GetRoleDisplayName(roleEnum)}";
            }
        }

        return "Role: All";
    }

    private string GetStatusFilterText()
    {
        if (SelectedStatusFilter == "all")
        {
            return "Status: All";
        }

        // Check if we have status types
        if (StatusTypes != null && StatusTypes.Any())
        {
            if (int.TryParse(SelectedStatusFilter, out var statusId))
            {
                var status = StatusTypes.FirstOrDefault(s => s.Id == statusId);
                if (status != null)
                {
                    return $"Status: {status.Name}";
                }
            }
        }

        // Fallback to simple active/inactive
        return SelectedStatusFilter switch
        {
            "active" => "Status: Active",
            "inactive" => "Status: Inactive",
            _ => "Status: All"
        };
    }

    private string GetStatusIcon(string statusName)
    {
        if (string.IsNullOrEmpty(statusName))
            return "fa-light fa-circle";

        return statusName.ToLower() switch
        {
            "active" => "fa-light fa-user-check",
            "inactive" => "fa-light fa-user-slash",
            "suspended" => "fa-light fa-user-lock",
            "locked" => "fa-light fa-user-lock",
            "trial" => "fa-light fa-user-clock",
            "temporary closed" => "fa-light fa-door-closed",
            _ => "fa-light fa-circle"
        };
    }
}