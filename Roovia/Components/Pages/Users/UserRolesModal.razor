@using Roovia.Interfaces
@using Roovia.Security
@using Roovia.Services
@using Roovia.Services.General
@inject IPermissionService PermissionService
@inject ToastService ToastService
@inject IUser UserService
@inject AuthenticationStateProvider AuthenticationStateProvider

<RVModal IsVisible="true"
         Title="Manage User Roles"
         DefaultFooter="false"
         Icon="fa-light fa-shield-check"
         OnClose="OnClose"
         OnCancel="OnClose"
         OnConfirm="SaveRoles"
         ConfirmText="Save"
         CancelText="Cancel"
         Size="lg">
    <ChildContent>
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <h3 class="loading-text">Loading roles...</h3>
            </div>
        }
        else
        {
            <div class="roles-management-container">
                <div class="user-info-banner">
                    <div class="user-avatar">
                        @if (string.IsNullOrEmpty(user.FirstName) && string.IsNullOrEmpty(user.LastName))
                        {
                            <span>@(user.UserName?.Substring(0, 1).ToUpper() ?? "?")</span>
                        }
                        else
                        {
                            <span>@(user.FirstName?.Substring(0, 1).ToUpper() ?? "")@(user.LastName?.Substring(0, 1).ToUpper() ?? "")</span>
                        }
                    </div>
                    <div class="user-info">
                        <h3>@(string.IsNullOrEmpty(user.FullName) ? user.UserName : user.FullName)</h3>
                        <div class="user-meta">
                            <span class="role-badge @PermissionFormat.GetRoleBadgeClass(user.Role.Value)">@PermissionFormat.GetRoleDisplayName(user.Role.Value)</span>
                            <span class="meta-item">@user.Email</span>
                        </div>
                    </div>
                </div>

                @if (permissionIssue)
                {
                    <div class="alert alert-warning">
                        <i class="fa-light fa-exclamation-triangle"></i>
                        <div class="alert-content">
                            <p>You don't have permission to manage roles for users with equal or higher roles than your own.</p>
                        </div>
                    </div>
                }
                else
                {
                    <div class="roles-filters">
                        <div class="search-wrapper">
                            <i class="fa-light fa-search"></i>
                            <input type="text" placeholder="Search roles..." @bind="searchTerm" @bind:event="oninput" />
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="clear-search" @onclick="() => searchTerm = string.Empty">
                                    <i class="fa-light fa-times"></i>
                                </button>
                            }
                        </div>
                        <div class="filter-controls">
                            <RVDropdown TriggerText="@GetFilterText()" ButtonType="outline" Position="bottom-end"
                                        CssClass="filter-dropdown">
                                <button type="button" class="roovia-dropdown-item @(filterType == "all" ? "active" : "")"
                                        @onclick='() => filterType = "all"'>
                                    <i class="fa-light fa-layer-group"></i>
                                    <span>All Roles</span>
                                    @if (filterType == "all")
                                    {
                                        <i class="fa-light fa-check"></i>
                                    }
                                </button>
                                <button type="button" class="roovia-dropdown-item @(filterType == "assigned" ? "active" : "")"
                                        @onclick='() => filterType = "assigned"'>
                                    <i class="fa-light fa-check-circle"></i>
                                    <span>Assigned Roles</span>
                                    @if (filterType == "assigned")
                                    {
                                        <i class="fa-light fa-check"></i>
                                    }
                                </button>
                                <button type="button" class="roovia-dropdown-item @(filterType == "unassigned" ? "active" : "")"
                                        @onclick='() => filterType = "unassigned"'>
                                    <i class="fa-light fa-circle"></i>
                                    <span>Unassigned Roles</span>
                                    @if (filterType == "unassigned")
                                    {
                                        <i class="fa-light fa-check"></i>
                                    }
                                </button>
                                <div class="dropdown-divider"></div>
                                <button type="button" class="roovia-dropdown-item @(filterType == "preset" ? "active" : "")"
                                        @onclick='() => filterType = "preset"'>
                                    <i class="fa-light fa-shield"></i>
                                    <span>System Roles</span>
                                    @if (filterType == "preset")
                                    {
                                        <i class="fa-light fa-check"></i>
                                    }
                                </button>
                                <button type="button" class="roovia-dropdown-item @(filterType == "custom" ? "active" : "")"
                                        @onclick='() => filterType = "custom"'>
                                    <i class="fa-light fa-pencil"></i>
                                    <span>Custom Roles</span>
                                    @if (filterType == "custom")
                                    {
                                        <i class="fa-light fa-check"></i>
                                    }
                                </button>
                            </RVDropdown>
                        </div>
                    </div>

                    <div class="roles-grid">
                        @foreach (var role in filteredRoles)
                        {
                            bool isAssigned = assignedRoleIds.Contains(role.Id);
                            bool canAssignRole = CanAssignRole(role);
                            <div class="role-card @(role.IsPreset ? "preset" : "custom") @(!role.IsActive ? "inactive" : "")">
                                <div class="role-header">
                                    <div class="role-checkbox">
                                        <RVCheckbox Value="@isAssigned"
                                                    ValueChanged="value => ToggleRole(role.Id, value)"
                                                    Disabled="@(!canAssignRole || !role.IsActive)" />
                                    </div>
                                    <div class="role-icon">
                                        @{
                                            var systemRole = GetSystemRoleFromName(role.Name);
                                            if (systemRole.HasValue)
                                            {
                                                <i class="@PermissionFormat.GetRoleIcon(systemRole)"></i>
                                            }
                                            else if (role.IsPreset)
                                            {
                                                <i class="fa-light fa-shield"></i>
                                            }
                                            else
                                            {
                                                <i class="fa-light fa-tools"></i>
                                            }
                                        }
                                    </div>
                                    <div class="role-title">
                                        <h3>@role.Name</h3>
                                        <div class="role-badges">
                                            @if (role.IsPreset)
                                            {
                                                <span class="badge-preset">System</span>
                                            }
                                            else
                                            {
                                                <span class="badge-custom">Custom</span>
                                            }
                                            <span class="badge-status @(role.IsActive ? "active" : "inactive")">
                                                @(role.IsActive ? "Active" : "Inactive")
                                            </span>
                                            @if (!canAssignRole && role.IsActive)
                                            {
                                                <span class="badge-status">
                                                    <i class="fa-light fa-lock"></i> No Permission
                                                </span>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div class="role-description">
                                    <p>@role.Description</p>
                                </div>
                                @if (isAssigned && userRoles.FirstOrDefault(ur => ur.RoleId == role.Id) is UserRoleAssignment assignment)
                                {
                                    <div class="role-assignment-info">
                                        <div class="assignment-date">
                                            <i class="fa-light fa-calendar-check"></i>
                                            <span>Assigned: @assignment.AssignedDate.ToString("dd MMM yyyy")</span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(assignment.AssignedBy))
                                        {
                                            <div class="assignment-by">
                                                <i class="fa-light fa-user"></i>
                                                <span>By: @assignment.AssignedBy</span>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    @if (!filteredRoles.Any())
                    {
                        <div class="empty-state">
                            <div class="empty-icon">
                                <i class="fa-light fa-shield-slash"></i>
                            </div>
                            <h3>No Roles Found</h3>
                            <p>No roles match your current search or filter criteria.</p>
                            <div class="empty-actions">
                                <RVButton ButtonType="primary" Text="Clear Filters"
                                          OnClick='() => { searchTerm = string.Empty; filterType = "all"; }' />
                            </div>
                        </div>
                    }
                }

                @if (hasChanges)
                {
                    <div class="floating-action-bar">
                        <div class="changes-indicator">
                            <i class="fa-light fa-exclamation-circle"></i>
                            <span>You have unsaved changes</span>
                        </div>
                        <div class="action-buttons">
                            <RVButton ButtonType="secondary" IconLeft="fa-light fa-undo" Text="Reset" OnClick="ResetChanges" />
                            <RVButton ButtonType="primary" IconLeft="fa-light fa-save" Text="Save"
                                      Loading="@isSaving" OnClick="SaveRoles" />
                        </div>
                    </div>
                }
            </div>
        }
    </ChildContent>
</RVModal>

@code {
    [Parameter] public string UserId { get; set; } = string.Empty;
    [Parameter] public int? CompanyId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }

    private ApplicationUser user = new ApplicationUser();
    private ApplicationUser currentUser = null;
    private List<Role> allRoles = new List<Role>();
    private List<UserRoleAssignment> userRoles = new List<UserRoleAssignment>();
    private HashSet<int> assignedRoleIds = new HashSet<int>();
    private HashSet<int> originalAssignedRoleIds = new HashSet<int>();
    private bool isLoading = true;
    private bool isSaving = false;
    private bool permissionIssue = false;
    private string searchTerm = string.Empty;
    private string filterType = "all";

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadData();
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                var response = await UserService.GetUserById(userId);
                if (response.ResponseInfo.Success)
                {
                    currentUser = (ApplicationUser)response.Response;
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load current user: {ex.Message}", "Error");
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;

            // Load user being edited
            var userResponse = await UserService.GetUserById(UserId);
            if (userResponse.ResponseInfo.Success)
            {
                user = (ApplicationUser)userResponse.Response;
                // Check if current user has permission to manage this user's roles
                permissionIssue = !CanManageUserRoles();
            }

            // Load user roles
            var userRolesResponse = await PermissionService.GetUserRoles(UserId);
            if (userRolesResponse.ResponseInfo.Success)
            {
                userRoles = (List<UserRoleAssignment>)userRolesResponse.Response;
                // Set initially assigned roles
                assignedRoleIds = new HashSet<int>(userRoles.Select(ur => ur.RoleId));
                originalAssignedRoleIds = new HashSet<int>(assignedRoleIds);
            }

            // Load all roles
            var rolesResponse = await PermissionService.GetAllRoles();
            if (rolesResponse.ResponseInfo.Success)
            {
                allRoles = (List<Role>)rolesResponse.Response;

                // Filter roles based on CompanyId if provided
                if (CompanyId.HasValue)
                {
                    // Filter to only show roles for this company (both company-specific and system roles)
                    allRoles = allRoles.Where(r =>
                        r.CompanyId == null || // System roles
                        r.CompanyId == CompanyId.Value // Company-specific roles
                    ).ToList();
                }

                // Apply role hierarchy filter based on current user's role
                allRoles = FilterRolesByHierarchy(allRoles);
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load roles: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<Role> FilterRolesByHierarchy(List<Role> roles)
    {
        if (currentUser?.Role == null)
            return roles;

        var rolesToExclude = new List<string>();

        switch (currentUser.Role.Value)
        {
            case SystemRole.SystemAdministrator:
                // System Admin can see all roles
                return roles;

            case SystemRole.CompanyAdministrator:
                // Company Admin cannot assign System Admin or Company Admin
                rolesToExclude.AddRange(new[] {
                    "System Administrator",
                    "Company Administrator"
                });
                break;

            case SystemRole.BranchManager:
                // Branch Manager cannot assign any admin or manager roles
                rolesToExclude.AddRange(new[] {
                    "System Administrator",
                    "Company Administrator",
                    "Branch Manager"
                });
                break;

            case SystemRole.PropertyManager:
                // Property Manager can only assign subordinate roles
                rolesToExclude.AddRange(new[] {
                    "System Administrator",
                    "Company Administrator",
                    "Branch Manager",
                    "Property Manager",
                    "Financial Officer"
                });
                break;

            default:
                // Other roles typically cannot assign any roles
                return new List<Role>();
        }

        return roles.Where(r => !rolesToExclude.Contains(r.Name, StringComparer.OrdinalIgnoreCase)).ToList();
    }

    private bool CanManageUserRoles()
    {
        if (currentUser == null || user == null)
            return false;

        // Can't manage your own roles
        if (currentUser.Id == user.Id)
            return false;

        // System Admin can manage any user's roles
        if (currentUser.Role == SystemRole.SystemAdministrator)
            return true;

        // Company Admin can manage users below them in the hierarchy
        if (currentUser.Role == SystemRole.CompanyAdministrator)
        {
            // Cannot manage System Administrators or other Company Administrators
            if (user.Role == SystemRole.SystemAdministrator ||
                user.Role == SystemRole.CompanyAdministrator)
                return false;

            // Company Admin can only manage users in their company
            return user.CompanyId == currentUser.CompanyId;
        }

        // Branch Manager can only manage users below them in the hierarchy
        if (currentUser.Role == SystemRole.BranchManager)
        {
            // Cannot manage administrators or other managers
            if (user.Role == SystemRole.SystemAdministrator ||
                user.Role == SystemRole.CompanyAdministrator ||
                user.Role == SystemRole.BranchManager)
                return false;

            // Branch Manager can only manage users in their branch
            return user.BranchId == currentUser.BranchId;
        }

        // Property Manager can manage limited roles
        if (currentUser.Role == SystemRole.PropertyManager)
        {
            // Can only manage Tenant Officers and Report Viewers
            if (user.Role == SystemRole.TenantOfficer ||
                user.Role == SystemRole.ReportsViewer)
            {
                // Must be in the same company
                return user.CompanyId == currentUser.CompanyId;
            }
            return false;
        }

        // Other roles can't manage user roles
        return false;
    }

    private bool CanAssignRole(Role role)
    {
        if (currentUser == null)
            return false;

        var targetSystemRole = GetSystemRoleFromName(role.Name);
        if (!targetSystemRole.HasValue)
            return false; // Can't assign unknown roles

        switch (currentUser.Role)
        {
            case SystemRole.SystemAdministrator:
                // System Admin can assign any role
                return true;

            case SystemRole.CompanyAdministrator:
                // Company Admin cannot assign admin roles
                return targetSystemRole.Value != SystemRole.SystemAdministrator &&
                       targetSystemRole.Value != SystemRole.CompanyAdministrator;

            case SystemRole.BranchManager:
                // Branch Manager can only assign operational roles
                return targetSystemRole.Value == SystemRole.PropertyManager ||
                       targetSystemRole.Value == SystemRole.FinancialOfficer ||
                       targetSystemRole.Value == SystemRole.TenantOfficer ||
                       targetSystemRole.Value == SystemRole.ReportsViewer;

            case SystemRole.PropertyManager:
                // Property Manager can only assign support roles
                return targetSystemRole.Value == SystemRole.TenantOfficer ||
                       targetSystemRole.Value == SystemRole.ReportsViewer;

            default:
                // Other roles cannot assign any roles
                return false;
        }
    }

    private SystemRole? GetSystemRoleFromName(string roleName)
    {
        // Map role names to SystemRole enum values
        if (roleName.Contains("System Admin", StringComparison.OrdinalIgnoreCase))
            return SystemRole.SystemAdministrator;
        if (roleName.Contains("Company Admin", StringComparison.OrdinalIgnoreCase))
            return SystemRole.CompanyAdministrator;
        if (roleName.Contains("Branch Manager", StringComparison.OrdinalIgnoreCase))
            return SystemRole.BranchManager;
        if (roleName.Contains("Property Manager", StringComparison.OrdinalIgnoreCase))
            return SystemRole.PropertyManager;
        if (roleName.Contains("Financial Officer", StringComparison.OrdinalIgnoreCase))
            return SystemRole.FinancialOfficer;
        if (roleName.Contains("Tenant Officer", StringComparison.OrdinalIgnoreCase))
            return SystemRole.TenantOfficer;
        if (roleName.Contains("Reports Viewer", StringComparison.OrdinalIgnoreCase))
            return SystemRole.ReportsViewer;

        return null;
    }

    private List<Role> filteredRoles
    {
        get
        {
            var roles = allRoles.AsEnumerable();

            // Apply search
            if (!string.IsNullOrEmpty(searchTerm))
            {
                roles = roles.Where(r =>
                    r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    r.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
            }

            // Apply type filter
            switch (filterType)
            {
                case "assigned":
                    roles = roles.Where(r => assignedRoleIds.Contains(r.Id));
                    break;
                case "unassigned":
                    roles = roles.Where(r => !assignedRoleIds.Contains(r.Id));
                    break;
                case "preset":
                    roles = roles.Where(r => r.IsPreset);
                    break;
                case "custom":
                    roles = roles.Where(r => !r.IsPreset);
                    break;
            }

            return roles.OrderBy(r => r.DisplayOrder).ThenBy(r => r.Name).ToList();
        }
    }

    private bool hasChanges => !assignedRoleIds.SetEquals(originalAssignedRoleIds);

    private void ToggleRole(int roleId, bool isAssigned)
    {
        var role = allRoles.FirstOrDefault(r => r.Id == roleId);
        if (role == null || !CanAssignRole(role))
            return;

        if (isAssigned)
        {
            assignedRoleIds.Add(roleId);
        }
        else
        {
            assignedRoleIds.Remove(roleId);
        }
    }

    private void ResetChanges()
    {
        // Reset to original assigned roles
        assignedRoleIds = new HashSet<int>(originalAssignedRoleIds);
    }

    private async Task SaveRoles()
    {
        if (!hasChanges)
        {
            // Nothing to save
            if (OnClose.HasDelegate)
                await OnClose.InvokeAsync();
            return;
        }

        if (permissionIssue)
        {
            ToastService.ShowError("You don't have permission to manage roles for this user", "Permission Denied");
            return;
        }

        try
        {
            isSaving = true;

            // Determine roles to add and remove
            var rolesToAdd = assignedRoleIds.Except(originalAssignedRoleIds).ToList();
            var rolesToRemove = originalAssignedRoleIds.Except(assignedRoleIds).ToList();

            // Process role removals
            foreach (var roleId in rolesToRemove)
            {
                // Double check permissions for each role
                var role = allRoles.FirstOrDefault(r => r.Id == roleId);
                if (role != null && CanAssignRole(role))
                {
                    await PermissionService.RemoveRoleFromUser(UserId, roleId);
                }
            }

            // Process role additions
            foreach (var roleId in rolesToAdd)
            {
                // Double check permissions for each role
                var role = allRoles.FirstOrDefault(r => r.Id == roleId);
                if (role != null && CanAssignRole(role))
                {
                    await PermissionService.AssignRoleToUser(UserId, roleId);
                }
            }

            ToastService.ShowSuccess("User roles updated successfully", "Success");

            if (OnSaved.HasDelegate)
                await OnSaved.InvokeAsync();

            if (OnClose.HasDelegate)
                await OnClose.InvokeAsync();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to save role assignments: {ex.Message}", "Error");
        }
        finally
        {
            isSaving = false;
        }
    }

    private string GetFilterText()
    {
        return filterType switch
        {
            "assigned" => "Assigned Roles",
            "unassigned" => "Unassigned Roles",
            "preset" => "System Roles",
            "custom" => "Custom Roles",
            _ => "All Roles"
        };
    }
}
<style>
    /* ====== UserRolesModal.razor.css ====== */
    /* Comprehensive styling for the user roles modal component */

    /* ====== Container ====== */
    .roles-management-container {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-5);
    }

    /* ====== User Info Banner ====== */
    .user-info-banner {
        display: flex;
        align-items: center;
        gap: var(--spacing-5);
        padding: var(--spacing-5);
        background: linear-gradient(135deg, var(--primary-light) 0%, rgba(var(--primary-rgb), 0.05) 100%);
        border-radius: var(--border-radius-lg);
        border: 1px solid var(--border-color);
    }

    .user-avatar {
        width: 64px;
        height: 64px;
        border-radius: 50%;
        background-color: var(--primary);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
        font-weight: 600;
        flex-shrink: 0;
        box-shadow: 0 4px 10px rgba(var(--primary-rgb), 0.3);
    }

    .user-info {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-1);
    }

        .user-info h3 {
            font-size: var(--font-size-xl);
            font-weight: 600;
            color: var(--text-primary);
            margin: 0;
        }

    .user-meta {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        gap: var(--spacing-3);
    }

    .role-badge {
        display: inline-flex;
        align-items: center;
        gap: var(--spacing-1);
        padding: var(--spacing-1) var(--spacing-3);
        border-radius: var(--border-radius-pill);
        font-size: var(--font-size-xs);
        font-weight: 600;
        background-color: var(--primary-light);
        color: var(--primary);
    }

        /* Role badge variants */
        .role-badge.admin {
            background-color: rgba(var(--primary-rgb), 0.1);
            color: var(--primary);
        }

        .role-badge.manager {
            background-color: rgba(var(--info-rgb), 0.1);
            color: var(--info);
        }

        .role-badge.staff {
            background-color: rgba(var(--success-rgb), 0.1);
            color: var(--success);
        }

        .role-badge.user {
            background-color: rgba(var(--secondary-rgb), 0.1);
            color: var(--text-secondary);
        }

    .meta-item {
        display: flex;
        align-items: center;
        gap: var(--spacing-1);
        color: var(--text-secondary);
        font-size: var(--font-size-sm);
    }

    /* ====== Alert Box ====== */
    .alert {
        display: flex;
        align-items: flex-start;
        gap: var(--spacing-3);
        padding: var(--spacing-4);
        border-radius: var(--border-radius-md);
        margin-bottom: var(--spacing-4);
    }

        .alert i {
            font-size: 1.25rem;
            margin-top: 2px;
        }

    .alert-content {
        flex: 1;
    }

        .alert-content p {
            margin: 0;
            font-size: var(--font-size-sm);
        }

    .alert-warning {
        background-color: rgba(var(--warning-rgb), 0.1);
        border: 1px solid rgba(var(--warning-rgb), 0.2);
    }

        .alert-warning i,
        .alert-warning p {
            color: var(--warning);
        }

    /* ====== Roles Filters ====== */
    .roles-filters {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: var(--spacing-4);
        margin-bottom: var(--spacing-4);
    }

    .search-wrapper {
        flex: 1;
        position: relative;
        max-width: 400px;
    }

        .search-wrapper i {
            position: absolute;
            left: var(--spacing-3);
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted);
            pointer-events: none;
        }

        .search-wrapper input {
            width: 100%;
            padding: var(--spacing-3) var(--spacing-3) var(--spacing-3) calc(var(--spacing-3) * 2 + 1rem);
            border: 1px solid var(--border-divider);
            border-radius: var(--border-radius-md);
            background-color: var(--input-bg);
            color: var(--text-primary);
            font-size: var(--font-size-sm);
            transition: all 0.2s ease;
            box-shadow: var(--shadow-xs);
        }

            .search-wrapper input:hover {
                border-color: var(--border-color);
            }

            .search-wrapper input:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.15);
                background-color: var(--content-bg);
            }

    .clear-search {
        position: absolute;
        right: var(--spacing-2);
        top: 50%;
        transform: translateY(-50%);
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: var(--subtle-bg);
        border: none;
        border-radius: 50%;
        color: var(--text-secondary);
        font-size: 0.75rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .clear-search:hover {
            background-color: var(--danger-light);
            color: var(--danger);
        }

    .filter-controls {
        display: flex;
        align-items: center;
        gap: var(--spacing-3);
    }

    .filter-dropdown {
        min-width: 200px;
    }

    .roovia-dropdown-item {
        display: flex;
        align-items: center;
        width: 100%;
        padding: var(--spacing-3) var(--spacing-4);
        background: none;
        border: none;
        text-align: left;
        font-size: var(--font-size-sm);
        color: var(--text-secondary);
        cursor: pointer;
        transition: all 0.2s ease;
        gap: var(--spacing-3);
    }

        .roovia-dropdown-item:hover {
            background-color: var(--subtle-bg);
            color: var(--primary);
        }

        .roovia-dropdown-item.active {
            color: var(--primary);
            background-color: var(--primary-light);
            font-weight: 500;
        }

        .roovia-dropdown-item i:first-child {
            width: 16px;
            display: flex;
            justify-content: center;
            font-size: 1rem;
        }

        .roovia-dropdown-item i:last-child {
            margin-left: auto;
            font-size: 0.75rem;
        }

    .dropdown-divider {
        height: 1px;
        background-color: var(--border-divider);
        margin: var(--spacing-2) 0;
    }

    /* ====== Roles Grid ====== */
    .roles-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: var(--spacing-4);
        margin-bottom: var(--spacing-4);
    }

    .role-card {
        background-color: var(--content-bg);
        border-radius: var(--border-radius-lg);
        border: 1px solid var(--border-divider);
        overflow: hidden;
        transition: all 0.3s ease;
        position: relative;
    }

        .role-card:hover {
            box-shadow: var(--shadow-md);
            transform: translateY(-2px);
            border-color: var(--border-color);
        }

        .role-card.preset {
            background-color: rgba(var(--primary-rgb), 0.02);
        }

        .role-card.inactive {
            opacity: 0.7;
        }

    .role-header {
        display: flex;
        align-items: center;
        padding: var(--spacing-4);
        border-bottom: 1px solid var(--border-light);
        gap: var(--spacing-3);
    }

    .role-checkbox {
        display: flex;
        align-items: center;
    }

    .role-icon {
        width: 40px;
        height: 40px;
        border-radius: var(--border-radius-lg);
        background-color: var(--primary-light);
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--primary);
        font-size: 1.25rem;
        flex-shrink: 0;
    }

    .role-title {
        flex: 1;
        min-width: 0;
    }

        .role-title h3 {
            font-size: var(--font-size-base);
            font-weight: 600;
            color: var(--text-primary);
            margin: 0 0 var(--spacing-1) 0;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

    .role-badges {
        display: flex;
        flex-wrap: wrap;
        gap: var(--spacing-2);
    }

    .badge-preset {
        display: inline-flex;
        align-items: center;
        gap: var(--spacing-1);
        padding: 0.125rem 0.5rem;
        border-radius: var(--border-radius-pill);
        font-size: 0.6875rem;
        font-weight: 600;
        text-transform: uppercase;
        background-color: rgba(var(--primary-rgb), 0.1);
        color: var(--primary);
    }

    .badge-custom {
        display: inline-flex;
        align-items: center;
        gap: var(--spacing-1);
        padding: 0.125rem 0.5rem;
        border-radius: var(--border-radius-pill);
        font-size: 0.6875rem;
        font-weight: 600;
        text-transform: uppercase;
        background-color: rgba(var(--info-rgb), 0.1);
        color: var(--info);
    }

    .badge-status {
        display: inline-flex;
        align-items: center;
        gap: var(--spacing-1);
        padding: 0.125rem 0.5rem;
        border-radius: var(--border-radius-pill);
        font-size: 0.6875rem;
        font-weight: 600;
        text-transform: uppercase;
    }

        .badge-status.active {
            background-color: rgba(var(--success-rgb), 0.1);
            color: var(--success);
        }

        .badge-status.inactive {
            background-color: rgba(var(--danger-rgb), 0.1);
            color: var(--danger);
        }

    .role-description {
        padding: var(--spacing-4);
        min-height: 80px;
    }

        .role-description p {
            margin: 0;
            font-size: var(--font-size-sm);
            color: var(--text-secondary);
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
            line-height: 1.5;
        }

    .role-assignment-info {
        padding: var(--spacing-3) var(--spacing-4);
        background-color: var(--subtle-bg);
        border-top: 1px solid var(--border-light);
        display: flex;
        flex-direction: column;
        gap: var(--spacing-2);
    }

    .assignment-date,
    .assignment-by {
        display: flex;
        align-items: center;
        gap: var(--spacing-2);
        font-size: var(--font-size-xs);
        color: var(--text-secondary);
    }

        .assignment-date i,
        .assignment-by i {
            color: var(--text-muted);
            font-size: 0.875rem;
        }

    /* ====== Empty State ====== */
    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--spacing-8) var(--spacing-4);
        background-color: var(--subtle-bg);
        border-radius: var(--border-radius-lg);
        text-align: center;
        border: 1px dashed var(--border-divider);
    }

    .empty-icon {
        font-size: 3rem;
        color: var(--text-light);
        margin-bottom: var(--spacing-4);
    }

    .empty-state h3 {
        font-size: var(--font-size-xl);
        font-weight: 600;
        color: var(--text-primary);
        margin: 0 0 var(--spacing-2) 0;
    }

    .empty-state p {
        margin: 0 0 var(--spacing-5) 0;
        color: var(--text-secondary);
        font-size: var(--font-size-base);
    }

    .empty-actions {
        display: flex;
        gap: var(--spacing-3);
    }
    .roovia-modal-body {
        padding: 10px;
    }
    /* ====== Floating Action Bar ====== */
    .floating-action-bar {
        position: sticky;
        bottom: 0;
        left: 0;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: var(--spacing-3) var(--spacing-6);
        background-color: var(--content-bg);
        border-top: 1px solid var(--border-divider);
        box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.05);
        z-index: 10;
        animation: slide-up 0.3s ease-out;
    }

    .changes-indicator {
        display: flex;
        align-items: center;
        gap: var(--spacing-2);
        color: var(--warning);
        font-weight: 500;
        font-size: var(--font-size-sm);
    }

        .changes-indicator i {
            font-size: 1.25rem;
        }

    .action-buttons {
        display: flex;
        gap: var(--spacing-3);
    }

    /* ====== Loading State ====== */
    .loading-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--spacing-10) var(--spacing-4);
        text-align: center;
    }

    .loading-spinner {
        width: 48px;
        height: 48px;
        border: 4px solid rgba(var(--primary-rgb), 0.1);
        border-top-color: var(--primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: var(--spacing-4);
    }

    .loading-text {
        font-size: var(--font-size-lg);
        color: var(--text-secondary);
        font-weight: 500;
    }

    /* ====== Animations ====== */
    @@keyframes spin {
        to

    {
        transform: rotate(360deg);
    }

    }

    @@keyframes slide-up {
        from

    {
        transform: translateY(100%);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    /* ====== Responsive Styles ====== */
    @@media (max-width: 992px) {
        .roles-filters

    {
        flex-direction: column;
        align-items: stretch;
    }

    .search-wrapper {
        max-width: 100%;
    }

    .roles-grid {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }

    }

    @@media (max-width: 768px) {
        .user-info-banner

    {
        flex-direction: column;
        text-align: center;
        padding: var(--spacing-4);
    }

    .user-meta {
        justify-content: center;
    }

    .floating-action-bar {
        flex-direction: column;
        gap: var(--spacing-3);
        padding: var(--spacing-4);
    }

    .action-buttons {
        width: 100%;
    }

        .action-buttons button {
            flex: 1;
        }

    }

    @@media (max-width: 576px) {
        .roles-grid

    {
        grid-template-columns: 1fr;
    }

    .role-header {
        flex-wrap: wrap;
    }

    .role-checkbox {
        position: absolute;
        top: var(--spacing-3);
        right: var(--spacing-3);
    }

    .empty-actions {
        flex-direction: column;
        width: 100%;
    }

        .empty-actions button {
            width: 100%;
        }

    }
</style>