@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using Roovia.Data
@using Roovia.Interfaces
@using Roovia.Models.BusinessHelperModels
@using Roovia.Models.UserCompanyModels
@using Roovia.Models.ProjectCdnConfigModels
@using Roovia.Security
@using Roovia.Services
@using Roovia.Services.General
@inject IUser UserService
@inject IPermissionService PermissionService
@inject ICdnService CdnService
@inject ToastService ToastService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<div class="ud-modal-backdrop" @onclick="OnClose"></div>

<div class="ud-modal-wrapper">
    <div class="ud-modal-header">
        <div class="ud-modal-title">
            <i class="fa-light fa-user"></i>
            <span>User Details</span>
        </div>
        <button class="ud-close-button" @onclick="OnClose">
            <i class="fa-light fa-times"></i>
        </button>
    </div>

    <div class="ud-modal-body">
        @if (isLoading)
        {
            <div class="ud-loading">
                <div class="ud-spinner"></div>
                <span class="ud-loading-text">Loading user details...</span>
            </div>
        }
        else if (user != null)
        {
            <div class="ud-profile">
                <div class="ud-profile-header">
                    <div class="ud-avatar-container">
                        @if (user.ProfilePictureId.HasValue && user.ProfilePicture != null)
                        {
                            <div class="ud-avatar ud-has-image">
                                <img src="@user.ProfilePicture.Url" alt="@GetUserDisplayName()" />
                            </div>
                        }
                        else
                        {
                            <div class="ud-avatar">
                                @if (string.IsNullOrEmpty(user.FirstName) && string.IsNullOrEmpty(user.LastName))
                                {
                                    @(user.UserName?.Substring(0, 1).ToUpper() ?? "?")
                                }
                                else
                                {
                                    @(user.FirstName?.Substring(0, 1).ToUpper() ?? "")
                                    @(user.LastName?.Substring(0, 1).ToUpper() ?? "")
                                }
                            </div>
                        }
                        <div class="ud-status-indicator @(user.IsActive ? "ud-active" : "ud-inactive")"></div>
                    </div>

                    <div class="ud-user-info">
                        <h2 class="ud-user-name">@GetUserDisplayName()</h2>

                        <div class="ud-badges-container">
                            <span class="ud-role-badge @GetRoleBadgeClass(user.Role)">
                                <i class="@GetRoleIconClass(user.Role)"></i>
                                @GetRoleDisplayName(user.Role)
                            </span>
                            <span class="ud-status-badge @(user.IsActive ? "ud-active" : "ud-inactive")">
                                <i class="fa-light fa-@(user.IsActive ? "check-circle" : "times-circle")"></i>
                                @(user.IsActive ? "Active" : "Inactive")
                            </span>
                        </div>

                        <div class="ud-meta-list">
                            @if (!string.IsNullOrEmpty(user.JobTitle))
                            {
                                <span class="ud-meta-item"><i class="fa-light fa-briefcase"></i>@user.JobTitle</span>
                            }
                            @if (!string.IsNullOrEmpty(user.Email))
                            {
                                <span class="ud-meta-item"><i class="fa-light fa-envelope"></i>@user.Email</span>
                            }
                            @if (!string.IsNullOrEmpty(user.PhoneNumber))
                            {
                                <span class="ud-meta-item"><i class="fa-light fa-phone"></i>@user.PhoneNumber</span>
                            }
                        </div>
                    </div>

                    <div class="ud-user-actions">
                        <button class="ud-button ud-button-primary" @onclick="HandleEdit">
                            <i class="fa-light fa-edit"></i>
                            <span>Edit</span>
                        </button>
                    </div>
                </div>

                <div class="ud-tabs-container">
                    <div class="ud-tabs-header">
                        @foreach (var tab in tabs)
                        {
                            <button class="ud-tab-button @(activeTab == tab.Id ? "ud-active" : "")"
                                    @onclick="() => SetActiveTab(tab.Id)">
                                <i class="@tab.Icon ud-icon"></i>
                                <span class="ud-text">@tab.Title</span>
                            </button>
                        }
                    </div>

                    <div class="ud-tab-content">
                        @* Basic Info Tab *@
                        <div class="ud-tab-pane @(activeTab == "info" ? "ud-active" : "")">
                            <div class="ud-card-grid">
                                <div class="ud-info-card">
                                    <div class="ud-card-header">
                                        <i class="fa-light fa-user-circle ud-card-header-icon"></i>
                                        <h3 class="ud-card-title">Basic Information</h3>
                                    </div>
                                    <div class="ud-card-body">
                                        <div class="ud-info-group">
                                            <span class="ud-info-label">Username</span>
                                            <span class="ud-info-value">@user.UserName</span>
                                        </div>
                                        <div class="ud-info-group">
                                            <span class="ud-info-label">First Name</span>
                                            <span class="ud-info-value">@(string.IsNullOrEmpty(user.FirstName) ? "-" : user.FirstName)</span>
                                        </div>
                                        <div class="ud-info-group">
                                            <span class="ud-info-label">Last Name</span>
                                            <span class="ud-info-value">@(string.IsNullOrEmpty(user.LastName) ? "-" : user.LastName)</span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(user.IdNumber))
                                        {
                                            <div class="ud-info-group">
                                                <span class="ud-info-label">ID Number</span>
                                                <span class="ud-info-value">@user.IdNumber</span>
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(user.EmployeeNumber))
                                        {
                                            <div class="ud-info-group">
                                                <span class="ud-info-label">Employee #</span>
                                                <span class="ud-info-value">@user.EmployeeNumber</span>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <div class="ud-info-card">
                                    <div class="ud-card-header">
                                        <i class="fa-light fa-shield-check ud-card-header-icon"></i>
                                        <h3 class="ud-card-title">Account Status</h3>
                                    </div>
                                    <div class="ud-card-body">
                                        <div class="ud-info-group">
                                            <span class="ud-info-label">Account Status</span>
                                            <span class="ud-status-badge @(user.IsActive ? "ud-active" : "ud-inactive")">
                                                @(user.IsActive ? "Active" : "Inactive")
                                            </span>
                                        </div>
                                        <div class="ud-info-group">
                                            <span class="ud-info-label">Email Confirmed</span>
                                            <span class="ud-status-badge @(user.EmailConfirmed ? "ud-active" : "ud-inactive")">
                                                @(user.EmailConfirmed ? "Yes" : "No")
                                            </span>
                                        </div>
                                        <div class="ud-info-group">
                                            <span class="ud-info-label">Two-Factor Auth</span>
                                            <span class="ud-status-badge @(user.TwoFactorEnabled ? "ud-active" : "ud-inactive")">
                                                @(user.TwoFactorEnabled ? "Enabled" : "Disabled")
                                            </span>
                                        </div>
                                        <div class="ud-info-group">
                                            <span class="ud-info-label">Created On</span>
                                            <span class="ud-info-value">@(user.CreatedDate?.ToString("dd MMM yyyy") ?? "-")</span>
                                        </div>
                                        @if (user.LastLoginDate.HasValue)
                                        {
                                            <div class="ud-info-group">
                                                <span class="ud-info-label">Last Login</span>
                                                <span class="ud-info-value">@user.LastLoginDate?.ToString("dd MMM yyyy")</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        @* Contact Tab *@
                        <div class="ud-tab-pane @(activeTab == "contact" ? "ud-active" : "")">
                            <div class="ud-card-grid">
                                <div class="ud-info-card">
                                    <div class="ud-card-header">
                                        <i class="fa-light fa-address-book ud-card-header-icon"></i>
                                        <h3 class="ud-card-title">Contact Information</h3>
                                    </div>
                                    <div class="ud-card-body">
                                        <div class="ud-info-group">
                                            <span class="ud-info-label">Primary Email</span>
                                            <a href="mailto:@user.Email" class="ud-info-value ud-email">
                                                <i class="fa-light fa-envelope"></i> @user.Email
                                            </a>
                                        </div>
                                        <div class="ud-info-group">
                                            <span class="ud-info-label">Primary Phone</span>
                                            @if (!string.IsNullOrEmpty(user.PhoneNumber))
                                            {
                                                <a href="tel:@user.PhoneNumber" class="ud-info-value ud-phone">
                                                    <i class="fa-light fa-phone"></i> @user.PhoneNumber
                                                </a>
                                            }
                                            else
                                            {
                                                <span class="ud-info-value">-</span>
                                            }
                                        </div>
                                    </div>
                                </div>

                                <div class="ud-info-card">
                                    <div class="ud-card-header">
                                        <i class="fa-light fa-envelope-open ud-card-header-icon"></i>
                                        <h3 class="ud-card-title">Additional Emails</h3>
                                    </div>
                                    <div class="ud-card-body">
                                        @if (user.EmailAddresses != null && user.EmailAddresses.Any(e => !e.IsPrimary))
                                        {
                                            foreach (var email in user.EmailAddresses.Where(e => !e.IsPrimary).OrderBy(e => e.Description))
                                            {
                                                <div class="ud-info-group">
                                                    <span class="ud-info-label">
                                                        @(string.IsNullOrEmpty(email.Description) ? "Email" : email.Description)
                                                    </span>
                                                    <a href="mailto:@email.EmailAddress" class="ud-info-value ud-email">
                                                        <i class="fa-light fa-envelope"></i> @email.EmailAddress
                                                    </a>
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <div class="ud-empty-state">
                                                <i class="fa-light fa-inbox-empty ud-empty-icon"></i>
                                                <p class="ud-empty-text">No additional email addresses</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        @* Company Tab *@
                        <div class="ud-tab-pane @(activeTab == "company" ? "ud-active" : "")">
                            <div class="ud-card-grid">
                                <div class="ud-info-card">
                                    <div class="ud-card-header">
                                        <i class="fa-light fa-building ud-card-header-icon"></i>
                                        <h3 class="ud-card-title">Company & Branch</h3>
                                    </div>
                                    <div class="ud-card-body">
                                        <div class="ud-info-group">
                                            <span class="ud-info-label">Company</span>
                                            <div class="ud-info-value">
                                                @if (user.Company != null)
                                                {
                                                    <div class="ud-company-display">
                                                        @if (user.Company.MainLogo != null)
                                                        {
                                                            <div class="ud-company-logo">
                                                                <img src="@user.Company.MainLogo.Url" alt="@user.Company.Name" />
                                                            </div>
                                                        }
                                                        <span>@user.Company.Name</span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span>-</span>
                                                }
                                            </div>
                                        </div>

                                        <div class="ud-info-group">
                                            <span class="ud-info-label">Branch</span>
                                            <div class="ud-info-value">
                                                @if (user.Branch != null)
                                                {
                                                    <div class="ud-company-display">
                                                        @if (user.Branch.MainLogo != null)
                                                        {
                                                            <div class="ud-branch-logo">
                                                                <img src="@user.Branch.MainLogo.Url" alt="@user.Branch.Name" />
                                                            </div>
                                                        }
                                                        <span>@user.Branch.Name</span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span>-</span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                @if (user.Branch?.Address != null)
                                {
                                    <div class="ud-info-card">
                                        <div class="ud-card-header">
                                            <i class="fa-light fa-map-marker-alt ud-card-header-icon"></i>
                                            <h3 class="ud-card-title">Branch Address</h3>
                                        </div>
                                        <div class="ud-card-body">
                                            <div class="ud-address-container">
                                                @if (!string.IsNullOrEmpty(user.Branch.Address.ComplexName))
                                                {
                                                    <div class="ud-address-line"><i class="fa-light fa-building"></i> @user.Branch.Address.ComplexName</div>
                                                }
                                                @if (!string.IsNullOrEmpty(user.Branch.Address.Street))
                                                {
                                                    <div class="ud-address-line"><i class="fa-light fa-road"></i> @user.Branch.Address.Street</div>
                                                }
                                                @if (!string.IsNullOrEmpty(user.Branch.Address.Suburb))
                                                {
                                                    <div class="ud-address-line"><i class="fa-light fa-map"></i> @user.Branch.Address.Suburb</div>
                                                }
                                                @if (!string.IsNullOrEmpty(user.Branch.Address.City))
                                                {
                                                    <div class="ud-address-line">
                                                        <i class="fa-light fa-city"></i>
                                                        @user.Branch.Address.City@(!string.IsNullOrEmpty(user.Branch.Address.Province) ? $", {user.Branch.Address.Province}" : "")
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(user.Branch.Address.PostalCode))
                                                {
                                                    <div class="ud-address-line"><i class="fa-light fa-mailbox"></i> @user.Branch.Address.PostalCode</div>
                                                }
                                                @if (!string.IsNullOrEmpty(user.Branch.Address.Country))
                                                {
                                                    <div class="ud-address-line"><i class="fa-light fa-globe"></i> @user.Branch.Address.Country</div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                        @* Roles Tab *@
                        <div class="ud-tab-pane @(activeTab == "roles" ? "ud-active" : "")">
                            <div class="ud-role-summary">
                                <div class="ud-role-icon">
                                    <i class="@GetRoleIconClass(user.Role)"></i>
                                </div>
                                <div class="ud-role-details">
                                    <h3 class="ud-role-title">@GetRoleDisplayName(user.Role)</h3>
                                    <p class="ud-role-description">@GetRoleDescription(user.Role)</p>
                                </div>
                            </div>

                            <div class="ud-info-card">
                                <div class="ud-card-header">
                                    <i class="fa-light fa-user-shield ud-card-header-icon"></i>
                                    <h3 class="ud-card-title">Custom Roles</h3>
                                    <button class="ud-button ud-button-outline ud-button-small ud-card-header-action" @onclick="HandleRolesClick">
                                        <i class="fa-light fa-shield-check"></i>
                                        <span>Manage</span>
                                    </button>
                                </div>
                                <div class="ud-card-body">
                                    @if (isLoadingRoles)
                                    {
                                        <div class="ud-loading-inline">
                                            <div class="ud-spinner-small"></div>
                                            <span>Loading roles...</span>
                                        </div>
                                    }
                                    else if (userRoles != null && userRoles.Any())
                                    {
                                        <div class="ud-roles-list">
                                            @foreach (var roleAssignment in userRoles.OrderBy(r => r.Role?.Name))
                                            {
                                                <div class="ud-role-item">
                                                    <div class="ud-role-header">
                                                        <div class="ud-role-badge-icon">
                                                            <i class="fa-light fa-@(roleAssignment.Role?.IsPreset == true ? "shield" : "user-shield")"></i>
                                                        </div>
                                                        <div class="ud-role-name">@roleAssignment.Role?.Name</div>
                                                        <div class="ud-type-badge @(roleAssignment.Role?.IsPreset == true ? "ud-preset" : "ud-custom")">
                                                            @(roleAssignment.Role?.IsPreset == true ? "System" : "Custom")
                                                        </div>
                                                    </div>
                                                    @if (!string.IsNullOrEmpty(roleAssignment.Role?.Description))
                                                    {
                                                        <div class="ud-role-description-text">
                                                            @roleAssignment.Role?.Description
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="ud-empty-state">
                                            <i class="fa-light fa-user-slash ud-empty-icon"></i>
                                            <p class="ud-empty-text">No custom roles assigned</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        @* Activity Tab *@
                        <div class="ud-tab-pane @(activeTab == "activity" ? "ud-active" : "")">
                            <div class="ud-card-grid">
                                <div class="ud-info-card">
                                    <div class="ud-card-header">
                                        <i class="fa-light fa-sign-in ud-card-header-icon"></i>
                                        <h3 class="ud-card-title">Login Activity</h3>
                                    </div>
                                    <div class="ud-card-body">
                                        @if (userLoginActivity != null && userLoginActivity.Count > 0)
                                        {
                                            <div class="ud-activity-list">
                                                @foreach (var activity in userLoginActivity.Take(5))
                                                {
                                                    <div class="ud-activity-item @(activity.Success ? "ud-success" : "ud-failure")">
                                                        <div class="ud-activity-icon">
                                                            <i class="fa-light fa-@(activity.Success ? "sign-in" : "ban")"></i>
                                                        </div>
                                                        <div class="ud-activity-content">
                                                            <div class="ud-activity-title">
                                                                @(activity.Success ? "Successful login" : "Failed login attempt")
                                                            </div>
                                                            <div class="ud-activity-meta">
                                                                <span class="ud-activity-time">@activity.Timestamp.ToString("dd MMM yyyy, HH:mm")</span>
                                                                @if (!string.IsNullOrEmpty(activity.IpAddress))
                                                                {
                                                                    <span class="ud-activity-ip">@activity.IpAddress</span>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="ud-empty-state">
                                                <i class="fa-light fa-chart-line-down ud-empty-icon"></i>
                                                <p class="ud-empty-text">No login activity recorded</p>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <div class="ud-info-card">
                                    <div class="ud-card-header">
                                        <i class="fa-light fa-history ud-card-header-icon"></i>
                                        <h3 class="ud-card-title">System Activity</h3>
                                    </div>
                                    <div class="ud-card-body">
                                        @if (userSystemActivity != null && userSystemActivity.Count > 0)
                                        {
                                            <div class="ud-activity-list">
                                                @foreach (var activity in userSystemActivity.Take(5))
                                                {
                                                    <div class="ud-activity-item">
                                                        <div class="ud-activity-icon">
                                                            <i class="fa-light fa-@GetActivityIcon(activity.Action)"></i>
                                                        </div>
                                                        <div class="ud-activity-content">
                                                            <div class="ud-activity-title">
                                                                <strong>@activity.Action</strong> @activity.EntityType
                                                                @if (!string.IsNullOrEmpty(activity.EntityName))
                                                                {
                                                                    <span class="ud-entity-name">@activity.EntityName</span>
                                                                }
                                                            </div>
                                                            <div class="ud-activity-meta">
                                                                <span class="ud-activity-time">@activity.Timestamp.ToString("dd MMM yyyy, HH:mm")</span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="ud-empty-state">
                                                <i class="fa-light fa-history ud-empty-icon"></i>
                                                <p class="ud-empty-text">No system activity recorded</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="ud-error-state">
                <div class="ud-error-icon"><i class="fa-light fa-exclamation-triangle"></i></div>
                <h3 class="ud-error-title">User Not Found</h3>
                <p class="ud-error-message">The requested user could not be found or you don't have permission to view this user.</p>
                <button class="ud-button ud-button-primary" @onclick="OnClose">
                    <i class="fa-light fa-arrow-left"></i>
                    <span>Go Back</span>
                </button>
            </div>
        }
    </div>

    <div class="ud-modal-footer">
        <button class="ud-button ud-button-outline" @onclick="OnClose">
            <i class="fa-light fa-times"></i>
            <span>Close</span>
        </button>
        @if (user != null)
        {
            <button class="ud-button ud-button-primary" @onclick="HandleEdit">
                <i class="fa-light fa-edit"></i>
                <span>Edit User</span>
            </button>
        }
    </div>
</div>

@code {
    [Parameter] public string UserId { get; set; } = string.Empty;
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnEdit { get; set; }

    private ApplicationUser? user;
    private bool isLoading = true;
    private string activeTab = "info";
    private string permissionSearchTerm = "";

    // Tab configuration
    private List<TabInfo> tabs = new List<TabInfo>();

    // Roles and permissions
    private List<UserRoleAssignment>? userRoles;
    private List<string>? userPermissions;
    private Dictionary<string, List<string>> userPermissionsByCategory = new Dictionary<string, List<string>>();
    private Dictionary<string, List<string>> filteredPermissionsByCategory = new Dictionary<string, List<string>>();
    private Dictionary<string, Permission> userPermissionsDetails = new Dictionary<string, Permission>();
    private bool isLoadingRoles = false;
    private bool isLoadingPermissions = false;

    // User activity data
    private List<UserLoginActivity> userLoginActivity = new List<UserLoginActivity>();
    private List<UserSystemActivity> userSystemActivity = new List<UserSystemActivity>();
    private bool isLoadingActivity = false;

    private class TabInfo
    {
        public string Id { get; set; } = "";
        public string Title { get; set; } = "";
        public string Icon { get; set; } = "";
    }

    // Custom data models for activity
    private class UserLoginActivity
    {
        public DateTime Timestamp { get; set; }
        public bool Success { get; set; }
        public string? IpAddress { get; set; }
        public string? UserAgent { get; set; }
    }

    private class UserSystemActivity
    {
        public DateTime Timestamp { get; set; }
        public string Action { get; set; } = "";
        public string EntityType { get; set; } = "";
        public string? EntityName { get; set; }
        public string? EntityId { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        ConfigureTabs();
        await LoadUserData();
    }

    private void ConfigureTabs()
    {
        tabs = new List<TabInfo>
        {
            new TabInfo { Id = "info", Title = "Info", Icon = "fa-light fa-user" },
            new TabInfo { Id = "contact", Title = "Contact", Icon = "fa-light fa-address-card" },
            new TabInfo { Id = "company", Title = "Company", Icon = "fa-light fa-building" },
            new TabInfo { Id = "roles", Title = "Roles", Icon = "fa-light fa-shield-check" },
            new TabInfo { Id = "activity", Title = "Activity", Icon = "fa-light fa-chart-line" }
        };
    }

    private async Task LoadUserData()
    {
        try
        {
            isLoading = true;

            var response = await UserService.GetUserWithDetails(UserId);
            if (response.ResponseInfo.Success)
            {
                user = (ApplicationUser)response.Response;

                // Pre-load roles, permissions, and activity data
                await Task.WhenAll(
                    LoadUserRoles(),
                    LoadUserPermissions(),
                    LoadUserActivity()
                );
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load user: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUserRoles()
    {
        try
        {
            isLoadingRoles = true;

            var response = await PermissionService.GetUserRoles(UserId);
            if (response.ResponseInfo.Success)
            {
                userRoles = (List<UserRoleAssignment>)response.Response;
            }
            else
            {
                userRoles = new List<UserRoleAssignment>();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load user roles: {ex.Message}", "Error");
            userRoles = new List<UserRoleAssignment>();
        }
        finally
        {
            isLoadingRoles = false;
        }
    }

    private async Task LoadUserPermissions()
    {
        try
        {
            isLoadingPermissions = true;
            userPermissions = await PermissionService.GetUserPermissions(UserId);
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load user permissions: {ex.Message}", "Error");
            userPermissions = new List<string>();
        }
        finally
        {
            isLoadingPermissions = false;
        }
    }

    private async Task LoadUserActivity()
    {
        try
        {
            isLoadingActivity = true;

            // Mock login activity data for demonstration
            if (user != null)
            {
                // Create some sample login activity
                if (user.LastLoginDate.HasValue)
                {
                    userLoginActivity.Add(new UserLoginActivity
                        {
                            Timestamp = user.LastLoginDate.Value,
                            Success = true,
                            IpAddress = user.LastLoginIpAddress
                        });

                    // Add some additional mock entries
                    var random = new Random();
                    var date = user.LastLoginDate.Value;
                    for (int i = 0; i < 5; i++)
                    {
                        date = date.AddDays(-random.Next(1, 5));
                        userLoginActivity.Add(new UserLoginActivity
                            {
                                Timestamp = date,
                                Success = random.Next(0, 5) > 0, // 80% success rate
                                IpAddress = $"192.168.1.{random.Next(2, 254)}"
                            });
                    }

                    // Sort by timestamp descending
                    userLoginActivity = userLoginActivity.OrderByDescending(a => a.Timestamp).ToList();
                }

                // Create some sample system activity data
                var actions = new[] { "Created", "Updated", "Viewed", "Deleted", "Exported" };
                var entityTypes = new[] { "Property", "Tenant", "Payment", "Document", "Report" };
                var names = new[] { "Test Property", "John Smith", "Invoice #1234", "Lease Agreement", "Monthly Report" };

                var activityDate = DateTime.Now.AddDays(-1);
                for (int i = 0; i < 10; i++)
                {
                    var random = new Random();
                    activityDate = activityDate.AddHours(-random.Next(1, 12));
                    userSystemActivity.Add(new UserSystemActivity
                        {
                            Timestamp = activityDate,
                            Action = actions[random.Next(0, actions.Length)],
                            EntityType = entityTypes[random.Next(0, entityTypes.Length)],
                            EntityName = names[random.Next(0, names.Length)],
                            EntityId = random.Next(1, 1000).ToString()
                        });
                }

                // Sort by timestamp descending
                userSystemActivity = userSystemActivity.OrderByDescending(a => a.Timestamp).ToList();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load user activity: {ex.Message}", "Error");
        }
        finally
        {
            isLoadingActivity = false;
        }
    }

    private string GetUserDisplayName()
    {
        if (user == null)
            return "Unknown User";

        if (!string.IsNullOrEmpty(user.FirstName) && !string.IsNullOrEmpty(user.LastName))
        {
            return $"{user.FirstName} {user.LastName}";
        }
        else if (!string.IsNullOrEmpty(user.FirstName))
        {
            return user.FirstName;
        }
        else if (!string.IsNullOrEmpty(user.LastName))
        {
            return user.LastName;
        }

        return user.UserName ?? "Unknown User";
    }

    private string GetRoleBadgeClass(SystemRole? role)
    {
        if (!role.HasValue) return "role-user";

        return role.Value.ToString().ToLowerInvariant() switch
        {
            "systemadministrator" => "role-admin",
            "companyadministrator" => "role-company",
            "branchmanager" => "role-manager",
            _ => "role-user"
        };
    }

    private string GetRoleIconClass(SystemRole? role)
    {
        if (!role.HasValue) return "fa-light fa-user";

        return role.Value.ToString().ToLowerInvariant() switch
        {
            "systemadministrator" => "fa-light fa-user-crown",
            "companyadministrator" => "fa-light fa-user-tie",
            "branchmanager" => "fa-light fa-user-chart",
            _ => "fa-light fa-user"
        };
    }

    private string GetRoleDisplayName(SystemRole? role)
    {
        if (!role.HasValue) return "User";

        return role.Value.ToString().ToLowerInvariant() switch
        {
            "systemadministrator" => "System Admin",
            "companyadministrator" => "Company Admin",
            "branchmanager" => "Branch Manager",
            "propertymanager" => "Property Manager",
            "standarduser" => "Standard User",
            _ => role.Value.ToString()
        };
    }

    private string GetRoleDescription(SystemRole? role)
    {
        if (!role.HasValue) return "Standard system user with limited access.";

        return role.Value.ToString().ToLowerInvariant() switch
        {
            "systemadministrator" => "Full system access with complete control over all companies, branches, and users.",
            "companyadministrator" => "Company-level access with control over company branches and users.",
            "branchmanager" => "Branch-level access to manage users and operations within a specific branch.",
            "propertymanager" => "Access to manage properties, tenants, and maintenance requests.",
            "standarduser" => "Standard system user with limited access.",
            _ => "User with custom access level."
        };
    }

    private string GetActivityIcon(string action)
    {
        return action.ToLower() switch
        {
            "created" => "plus-circle",
            "updated" => "edit",
            "viewed" => "eye",
            "deleted" => "trash",
            "exported" => "file-export",
            _ => "history"
        };
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private async Task HandleEdit()
    {
        if (OnEdit.HasDelegate)
        {
            await OnEdit.InvokeAsync();
        }
    }

    private void HandleRolesClick()
    {
        // Redirect to roles management
        HandleEdit();
    }
}