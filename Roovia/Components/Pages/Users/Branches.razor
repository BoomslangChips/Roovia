@* @page "/branches"
@page "/branches/{CompanyId:int}"
@using Roovia.Interfaces


@using Roovia.Services
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "AdminAccess")]
@rendermode InteractiveServer
@inject IUser UserService
@inject NavigationManager NavigationManager
@inject ToastService ToastService

<div class="branches-page">
    <div class="admin-header-section">
        <div class="admin-header-content">
            <div class="header-text-content">
                <div class="header-icon">
                    <i class="fa-light fa-code-branch"></i>
                </div>
                <div class="header-title-group">
                    <h1 class="header-title">Branch Management</h1>
                    <p class="header-subtitle">
                        @if (currentCompany != null)
                        {
                            <span>
                                Manage branches for
                                <a href="/companies" @onclick:preventDefault @onclick="GoToCompanies">
                                    @currentCompany.Name
                                </a>
                            </span>
                        }
                        else
                        {
                            <span>Manage branches across all companies</span>
                        }
                    </p>
                </div>
            </div>

            <div class="header-action-panel">
                <RVButton Type="button" ButtonType="primary" IconLeft="fa-light fa-plus" Text="Create Branch"
                          OnClick="CreateBranch" CssClass="create-branch-btn" />
                @if (currentCompany == null)
                {
                    <RVButton Type="button" ButtonType="outline" IconLeft="fa-light fa-building" Text="View Companies"
                              OnClick="GoToCompanies" CssClass="view-companies-btn" />
                }
            </div>
        </div>
    </div>

    <div class="admin-main-container">
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <h3 class="loading-text">Loading branches...</h3>
            </div>
        }
        else
        {
            <CardView CssClass="management-card">
                <HeaderActions>
                    <div class="branch-filters">
                        <div class="search-input-wrapper">
                            <i class="fa-light fa-search search-icon"></i>
                            <input type="text" class="custom-search-input" placeholder="Search branches..."
                                   @bind="searchValue" @bind:event="oninput" @onkeyup="HandleKeyPress" />
                            @if (!string.IsNullOrEmpty(searchValue))
                            {
                                <button class="clear-search-btn" @onclick="ClearSearch">
                                    <i class="fa-light fa-times"></i>
                                </button>
                            }
                        </div>

                        <div class="filter-selectors">
                            @if (currentCompany == null)
                            {
                                <RVDropdown TriggerText="@($"Company: {(selectedCompany == null ? "All" : selectedCompany.Name)}")"
                                            ButtonType="outline" Position="bottom-start" CssClass="filter-dropdown">
                                    <button type="button" class="roovia-dropdown-item @(selectedCompany == null ? "active" : "")"
                                            @onclick='() => FilterByCompany(null)'>
                                        <i class="fa-light fa-building"></i>
                                        <span>All Companies</span>
                                        @if (selectedCompany == null)
                                        {
                                            <i class="fa-light fa-check"></i>
                                        }
                                    </button>
                                    <div class="dropdown-divider"></div>
                                    @foreach (var company in companies.OrderBy(c => c.Name))
                                    {
                                        <button type="button" class="roovia-dropdown-item @(selectedCompany?.Id == company.Id ? "active" : "")"
                                                @onclick='() => FilterByCompany(company)'>
                                            <i class="fa-light fa-building"></i>
                                            <span>@company.Name</span>
                                            @if (selectedCompany?.Id == company.Id)
                                            {
                                                <i class="fa-light fa-check"></i>
                                            }
                                        </button>
                                    }
                                </RVDropdown>
                            }

                            <RVDropdown TriggerText="@($"Status: {(statusFilter == "all" ? "All" : statusFilter == "active" ? "Active" : "Inactive")}")"
                                        ButtonType="outline" Position="bottom-start" CssClass="filter-dropdown">
                                <button type="button" class="roovia-dropdown-item @(statusFilter == "all" ? "active" : "")"
                                        @onclick='() => FilterByStatus("all")'>
                                    <i class="fa-light fa-filter"></i>
                                    <span>All Statuses</span>
                                    @if (statusFilter == "all")
                                    {
                                        <i class="fa-light fa-check"></i>
                                    }
                                </button>
                                <button type="button" class="roovia-dropdown-item @(statusFilter == "active" ? "active" : "")"
                                        @onclick='() => FilterByStatus("active")'>
                                    <i class="fa-light fa-check-circle"></i>
                                    <span>Active</span>
                                    @if (statusFilter == "active")
                                    {
                                        <i class="fa-light fa-check"></i>
                                    }
                                </button>
                                <button type="button" class="roovia-dropdown-item @(statusFilter == "inactive" ? "active" : "")"
                                        @onclick='() => FilterByStatus("inactive")'>
                                    <i class="fa-light fa-times-circle"></i>
                                    <span>Inactive</span>
                                    @if (statusFilter == "inactive")
                                    {
                                        <i class="fa-light fa-check"></i>
                                    }
                                </button>
                            </RVDropdown>

                            <RVButton Type="button" ButtonType="secondary" IconLeft="fa-light fa-filter-slash" Text="Clear Filters"
                                      OnClick="ClearFilters" Disabled="@(!HasActiveFilters)" CssClass="clear-filters-btn" />

                            <RVButton Type="button" ButtonType="outline" IconLeft="fa-light fa-sync" Text="Refresh"
                                      OnClick="LoadBranches" />
                        </div>
                    </div>
                </HeaderActions>
                <ChildContent>
                    <div class="branches-grid">
                        @if (filteredBranches.Any())
                        {
                            @foreach (var branch in filteredBranches)
                            {
                                <div class="branch-card" @onclick="() => ViewBranch(branch.Id)">
                                    <div class="branch-card-header">
                                        <div class="branch-icon">
                                            <i class="fa-light fa-code-branch"></i>
                                        </div>
                                        <div class="branch-info">
                                            <h3 class="branch-name">@branch.Name</h3>
                                            <div class="branch-meta">
                                                <span class="company-name">
                                                    <i class="fa-light fa-building"></i>
                                                    @(branch.Company?.Name ?? "Unknown Company")
                                                </span>
                                                <span class="status-badge @(branch.IsActive ? "status-online" : "status-offline")">
                                                    @(branch.IsActive ? "Active" : "Inactive")
                                                </span>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="branch-card-content">
                                        <div class="branch-details">
                                            @{
                                                var primaryEmail = branch.EmailAddresses?.FirstOrDefault(e => e.IsPrimary);
                                                var primaryPhone = branch.ContactNumbers?.FirstOrDefault(c => c.IsPrimary);
                                            }

                                            @if (primaryEmail != null)
                                            {
                                                <div class="detail-item">
                                                    <i class="fa-light fa-envelope"></i>
                                                    <a href="mailto:@primaryEmail.EmailAddress" @onclick:stopPropagation="true">@primaryEmail.EmailAddress</a>
                                                </div>
                                            }

                                            @if (primaryPhone != null)
                                            {
                                                <div class="detail-item">
                                                    <i class="fa-light fa-phone"></i>
                                                    <a href="tel:@primaryPhone.Number" @onclick:stopPropagation="true">@primaryPhone.Number</a>
                                                </div>
                                            }

                                            @if (branch.Address != null)
                                            {
                                                <div class="address-summary">
                                                    <i class="fa-light fa-map-marker-alt"></i>
                                                    <span>
                                                        @(!string.IsNullOrEmpty(branch.Address.City) ? $"{branch.Address.City}, " : "")
                                                        @(!string.IsNullOrEmpty(branch.Address.Province) ? branch.Address.Province : "")
                                                    </span>
                                                </div>
                                            }
                                        </div>

                                        <div class="branch-stats">
                                            <div class="stat-item">
                                                <span class="stat-value">@(branch.Users?.Count ?? 0)</span>
                                                <span class="stat-label">Users</span>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="branch-card-actions">
                                        <RVButton Type="button" ButtonType="outline" Size="sm" IconLeft="fa-light fa-eye" Text="View"
                                                  OnClick="(e) => { ViewBranch(branch.Id); }" />
                                        <RVButton Type="button" ButtonType="outline" Size="sm" IconLeft="fa-light fa-edit" Text="Edit"
                                                  OnClick="(e) => {  EditBranch(branch.Id); }" />
                                        <RVButton Type="button" ButtonType="outline" Size="sm" IconLeft="fa-light fa-users" Text="Users"
                                                  OnClick="(e) => { NavigateToUsers(branch.Id); }" />
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <EmptyState Title="No branches found"
                                        Description="No branches match your current filters or no branches have been created yet."
                                        Icon="fa-light fa-code-branch-slash"
                                        ActionText="Create Branch"
                                        OnAction="CreateBranch" />
                        }
                    </div>
                </ChildContent>
            </CardView>
        }
    </div>
</div>

@if (showBranchDialog)
{
    <BranchDialog BranchModel="selectedBranch"
                  CompanyId="@(currentCompany?.Id ?? 0)"
                  IsEdit="!isNewBranch"
                  CanEdit="true"
                  CanEditCompany="@(currentCompany == null)"
                  OnSave="SaveBranch"
                  OnCancel="CloseBranchDialog" />
}

<style>
    .branches-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 1.5rem;
    }

    .branch-card {
        background-color: var(--content-bg);
        border-radius: var(--border-radius-lg);
        border: 1px solid var(--border-divider);
        box-shadow: var(--shadow-sm);
        overflow: hidden;
        transition: var(--card-transition);
        cursor: pointer;
    }

        .branch-card:hover {
            box-shadow: var(--shadow-md);
            transform: translateY(-3px);
        }

    .branch-card-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1.25rem;
        border-bottom: 1px solid var(--border-divider);
    }

    .branch-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 50px;
        border-radius: 12px;
        background-color: var(--primary-light);
        color: var(--primary);
        font-size: 1.5rem;
    }

    .branch-info {
        flex: 1;
    }

    .branch-name {
        margin: 0 0 0.25rem 0;
        font-size: 1.125rem;
        font-weight: 600;
    }

    .branch-meta {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        font-size: 0.875rem;
        color: var(--text-secondary);
    }

    .company-name {
        display: flex;
        align-items: center;
        gap: 0.35rem;
    }

    .branch-card-content {
        padding: 1.25rem;
    }

    .branch-details {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin-bottom: 1.25rem;
    }

    .detail-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        color: var(--text-secondary);
    }

        .detail-item i, .address-summary i {
            color: var(--text-muted);
            width: 16px;
            text-align: center;
        }

        .detail-item a {
            color: var(--primary);
            text-decoration: none;
        }

            .detail-item a:hover {
                text-decoration: underline;
            }

    .address-summary {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        color: var(--text-secondary);
    }

    .branch-stats {
        display: flex;
        gap: 1rem;
        padding-top: 1rem;
        border-top: 1px solid var(--border-divider);
    }

    .stat-item {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .stat-value {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--primary);
    }

    .stat-label {
        font-size: 0.75rem;
        color: var(--text-muted);
    }

    .branch-card-actions {
        display: flex;
        gap: 0.5rem;
        padding: 1rem 1.25rem;
        border-top: 1px solid var(--border-divider);
        background-color: var(--subtle-bg);
    }

    .branch-filters {
        display: flex;
        align-items: center;
        gap: 1rem;
        width: 100%;
    }

    .search-input-wrapper {
        position: relative;
        flex: 1;
    }

    .search-icon {
        position: absolute;
        left: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-muted);
    }

    .custom-search-input {
        width: 100%;
        padding: 0.625rem 2.5rem 0.625rem 2.25rem;
        border: 1px solid var(--border-divider);
        border-radius: var(--border-radius-md);
        font-size: 0.875rem;
        background-color: var(--input-bg);
        color: var(--text-primary);
    }

        .custom-search-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.2);
        }

    .clear-search-btn {
        position: absolute;
        right: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: var(--text-muted);
        cursor: pointer;
        padding: 0.25rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .clear-search-btn:hover {
            color: var(--text-primary);
        }

    .filter-selectors {
        display: flex;
        gap: 0.75rem;
    }

    .filter-dropdown {
        min-width: 150px;
    }
</style>

@code {
    [Parameter]
    public int CompanyId { get; set; }

    private List<Company> companies = new List<Company>();
    private List<Branch> branches = new List<Branch>();
    private bool isLoading = true;
    private string searchValue = string.Empty;
    private string statusFilter = "all";
    private Company? selectedCompany = null;
    private Company? currentCompany = null;

    // Branch dialog
    private bool showBranchDialog = false;
    private Branch selectedBranch = new Branch();
    private bool isNewBranch = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();

        // If CompanyId is provided, set the current company
        if (CompanyId > 0)
        {
            var company = companies.FirstOrDefault(c => c.Id == CompanyId);
            if (company != null)
            {
                currentCompany = company;
                await LoadBranchesForCompany(CompanyId);
            }
            else
            {
                await LoadBranches();
            }
        }
        else
        {
            await LoadBranches();
        }
    }

    private async Task LoadCompanies()
    {
        try
        {
            var response = await UserService.GetAllCompanies();
            if (response.ResponseInfo.Success)
            {
                companies = (List<Company>)response.Response;
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading companies: {ex.Message}", "Error");
        }
    }

    private async Task LoadBranches()
    {
        isLoading = true;
        branches.Clear();

        try
        {
            // If we have companies, load branches for each company
            foreach (var company in companies)
            {
                var response = await UserService.GetBranchesByCompany(company.Id);
                if (response.ResponseInfo.Success)
                {
                    var companyBranches = (List<Branch>)response.Response;
                    foreach (var branch in companyBranches)
                    {
                        branch.Company = company;
                    }
                    branches.AddRange(companyBranches);
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading branches: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadBranchesForCompany(int companyId)
    {
        isLoading = true;
        branches.Clear();

        try
        {
            var response = await UserService.GetBranchesByCompany(companyId);
            if (response.ResponseInfo.Success)
            {
                var companyBranches = (List<Branch>)response.Response;
                var company = companies.FirstOrDefault(c => c.Id == companyId);

                foreach (var branch in companyBranches)
                {
                    branch.Company = company;
                }

                branches.AddRange(companyBranches);
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading branches: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<Branch> filteredBranches => branches
        .Where(b => string.IsNullOrEmpty(searchValue) ||
                    b.Name?.Contains(searchValue, StringComparison.OrdinalIgnoreCase) == true ||
                    b.Company?.Name?.Contains(searchValue, StringComparison.OrdinalIgnoreCase) == true)
        .Where(b => statusFilter == "all" ||
                    (statusFilter == "active" && b.IsActive) ||
                    (statusFilter == "inactive" && !b.IsActive))
        .Where(b => selectedCompany == null || b.CompanyId == selectedCompany.Id)
        .OrderBy(b => b.Company?.Name)
        .ThenBy(b => b.Name);

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Task.CompletedTask; // Just to make the method async as required
        }
    }

    private void ClearSearch()
    {
        searchValue = string.Empty;
    }

    private void FilterByStatus(string status)
    {
        statusFilter = status;
    }

    private void FilterByCompany(Company? company)
    {
        selectedCompany = company;
    }

    private void ClearFilters()
    {
        searchValue = string.Empty;
        statusFilter = "all";
        selectedCompany = null;
    }

    private bool HasActiveFilters =>
        !string.IsNullOrEmpty(searchValue) ||
        statusFilter != "all" ||
        selectedCompany != null;

    private void GoToCompanies()
    {
        NavigationManager.NavigateTo("/companies");
    }

    private void CreateBranch()
    {
        selectedBranch = new Branch
            {
                CompanyId = currentCompany?.Id ?? 0,
                IsActive = true,
                Address = new Address { Country = "South Africa" },
                EmailAddresses = new List<Email>(),
                ContactNumbers = new List<ContactNumber>(),
                Logos = new List<BranchLogo>(),
                CreatedOn = DateTime.Now
            };
        isNewBranch = true;
        showBranchDialog = true;
    }

    private async Task ViewBranch(int branchId)
    {
        try
        {
            var response = await UserService.GetBranchById(branchId);
            if (response.ResponseInfo.Success)
            {
                selectedBranch = (Branch)response.Response;
                isNewBranch = false;
                showBranchDialog = true;
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading branch: {ex.Message}", "Error");
        }
    }

    private async Task EditBranch(int branchId)
    {
        await ViewBranch(branchId);
    }

    private void NavigateToUsers(int branchId)
    {
        // Assuming there's a filter option in the Users page to show users by branch
        NavigationManager.NavigateTo($"/users?branchId={branchId}");
    }

    private async Task<bool> SaveBranch(Branch branch)
    {
        try
        {
            ResponseModel response;

            if (branch.Id == 0)
            {
                // Create new branch
                response = await UserService.CreateBranch(branch);
            }
            else
            {
                // Update existing branch
                response = await UserService.UpdateBranch(branch.Id, branch);
            }

            if (response.ResponseInfo.Success)
            {
                ToastService.ShowSuccess(
                    branch.Id == 0 ?
                        $"Branch '{branch.Name}' created successfully" :
                        $"Branch '{branch.Name}' updated successfully",
                    "Success");

                // Reload branches
                if (currentCompany != null)
                {
                    await LoadBranchesForCompany(currentCompany.Id);
                }
                else
                {
                    await LoadBranches();
                }

                showBranchDialog = false;
                return true;
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
                return false;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving branch: {ex.Message}", "Error");
            return false;
        }
    }

    private void CloseBranchDialog()
    {
        showBranchDialog = false;
    }
} *@