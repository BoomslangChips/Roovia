inject NavigationManager NavigationManager

<div class="user-card">
    <div class="user-card-avatar">
        @if (string.IsNullOrEmpty(User.FirstName) && string.IsNullOrEmpty(User.LastName))
        {
            <div class="avatar-initials">@(User.UserName?.Substring(0, 1).ToUpper() ?? "?")</div>
        }
        else
        {
            <div class="avatar-initials">@(User.FirstName?.Substring(0, 1).ToUpper() ?? "")@(User.LastName?.Substring(0, 1).ToUpper() ?? "")</div>
        }
    </div>

    <div class="user-card-info">
        <div class="user-card-header">
            <h4>@(string.IsNullOrEmpty(User.FullName) ? User.UserName : User.FullName)</h4>
            <div class="user-badges">
                <span class="role-badge @GetRoleBadgeClass(User.Role)">
                    @GetRoleDisplayName(User.Role)
                </span>
                <span class="status-badge @(User.IsActive ? "status-active" : "status-inactive")">
                    @(User.IsActive ? "Active" : "Inactive")
                </span>
            </div>
        </div>

        <div class="user-card-details">
            <div class="detail-item">
                <i class="fa-light fa-envelope"></i>
                <span>@User.Email</span>
            </div>
            @if (!string.IsNullOrEmpty(User.PhoneNumber))
            {
                <div class="detail-item">
                    <i class="fa-light fa-phone"></i>
                    <span>@User.PhoneNumber</span>
                </div>
            }
            @if (User.Company != null)
            {
                <div class="detail-item">
                    <i class="fa-light fa-building"></i>
                    <span>@User.Company.Name</span>
                </div>
            }
            @if (User.Branch != null)
            {
                <div class="detail-item">
                    <i class="fa-light fa-code-branch"></i>
                    <span>@User.Branch.Name</span>
                </div>
            }
        </div>
    </div>

    <div class="user-card-actions">
        <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-eye"
                  OnClick="HandleView" CssClass="action-btn"
                  Title="View User Details" />

        <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-edit"
                  OnClick="HandleEdit" CssClass="action-btn"
                  Disabled="@DisableActions"
                  Title="@(DisableActions ? "You don't have permission to edit this user" : "Edit User")" />

        @*         <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-shield-check"
                  OnClick="HandleRoles" CssClass="action-btn"
                  Disabled="@DisableActions"
                  Title="@(DisableActions ? "You don't have permission to manage this user's roles" : "Manage Roles")" />
 *@
        <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-key"
                  OnClick="HandleResetPassword" CssClass="action-btn"
                  Disabled="@DisableActions"
                  Title="@(DisableActions ? "You don't have permission to reset this user's password" : "Reset Password")" />

        @*         <RVButton ButtonType="@(User.IsActive ? "outline-danger" : "outline-success")"
                  Size="xs" IconLeft="@(User.IsActive ? "fa-light fa-user-slash" : "fa-light fa-user-check")"
                  OnClick="HandleToggleStatus" CssClass="action-btn"
                  Disabled="@DisableActions"
                  Title="@(DisableActions ? "You don't have permission to change this user's status" : User.IsActive ? "Deactivate User" : "Activate User")" /> *@
    </div>
</div>

@code {
    [Parameter] public ApplicationUser User { get; set; } = null!;
    [Parameter] public EventCallback<string> OnView { get; set; }
    [Parameter] public EventCallback<string> OnEdit { get; set; }
    [Parameter] public EventCallback<string> OnRoles { get; set; }
    [Parameter] public EventCallback<string> OnResetPassword { get; set; }
    [Parameter] public EventCallback<ApplicationUser> OnToggleStatus { get; set; }
    [Parameter] public bool DisableActions { get; set; } = false;

    private void HandleView()
    {
        OnView.InvokeAsync(User.Id);
    }

    private void HandleEdit()
    {
        if (!DisableActions)
        {
            OnEdit.InvokeAsync(User.Id);
        }
    }

    private void HandleRoles()
    {
        if (!DisableActions)
        {
            OnRoles.InvokeAsync(User.Id);
        }
    }

    private void HandleResetPassword()
    {
        if (!DisableActions)
        {
            OnResetPassword.InvokeAsync(User.Id);
        }
    }

    private void HandleToggleStatus()
    {
        if (!DisableActions)
        {
            OnToggleStatus.InvokeAsync(User);
        }
    }

    private string GetRoleBadgeClass(SystemRole? role)
    {
        return role switch
        {
            SystemRole.CEOExecutive => "role-executive",
            SystemRole.SystemAdministrator => "role-admin",
            SystemRole.CompanyAdministrator => "role-company-admin",
            SystemRole.CompanyFinancialDirector => "role-financial-director",
            SystemRole.RegionalManager => "role-regional-manager",
            SystemRole.BranchManager => "role-branch-manager",
            SystemRole.SeniorPropertyManager => "role-senior-property-manager",
            SystemRole.PropertyManager => "role-property-manager",
            SystemRole.AssistantPropertyManager => "role-assistant-property-manager",
            SystemRole.FinancialManager => "role-financial-manager",
            SystemRole.SeniorAccountant => "role-senior-accountant",
            SystemRole.Accountant => "role-accountant",
            SystemRole.AccountsClerk => "role-accounts-clerk",
            SystemRole.TenantRelationsManager => "role-tenant-relations",
            SystemRole.TenantOfficer => "role-tenant",
            SystemRole.LeasingAgent => "role-leasing",
            SystemRole.MaintenanceManager => "role-maintenance-manager",
            SystemRole.MaintenanceCoordinator => "role-maintenance",
            SystemRole.SeniorInspector => "role-senior-inspector",
            SystemRole.PropertyInspector => "role-inspector",
            SystemRole.CustomerSupportManager => "role-support-manager",
            SystemRole.CustomerSupportAgent => "role-support",
            SystemRole.ComplianceOfficer => "role-compliance",
            SystemRole.LegalOfficer => "role-legal",
            SystemRole.DataAnalyst => "role-analyst",
            SystemRole.ReportsViewer => "role-reports",
            SystemRole.Auditor => "role-auditor",
            SystemRole.PropertyOwnerPortal => "role-owner",
            SystemRole.TenantPortal => "role-tenant-portal",
            SystemRole.VendorPortal => "role-vendor",
            _ => "role-default"
        };
    }

    private string GetRoleDisplayName(SystemRole? role)
    {
        return role switch
        {
            SystemRole.CEOExecutive => "CEO/Executive",
            SystemRole.SystemAdministrator => "System Admin",
            SystemRole.CompanyAdministrator => "Company Admin",
            SystemRole.CompanyFinancialDirector => "Financial Director",
            SystemRole.RegionalManager => "Regional Manager",
            SystemRole.BranchManager => "Branch Manager",
            SystemRole.SeniorPropertyManager => "Sr. Property Manager",
            SystemRole.PropertyManager => "Property Manager",
            SystemRole.AssistantPropertyManager => "Asst. Property Manager",
            SystemRole.FinancialManager => "Financial Manager",
            SystemRole.SeniorAccountant => "Sr. Accountant",
            SystemRole.Accountant => "Accountant",
            SystemRole.AccountsClerk => "Accounts Clerk",
            SystemRole.TenantRelationsManager => "Tenant Relations",
            SystemRole.TenantOfficer => "Tenant Officer",
            SystemRole.LeasingAgent => "Leasing Agent",
            SystemRole.MaintenanceManager => "Maintenance Manager",
            SystemRole.MaintenanceCoordinator => "Maintenance Coord.",
            SystemRole.SeniorInspector => "Sr. Inspector",
            SystemRole.PropertyInspector => "Inspector",
            SystemRole.CustomerSupportManager => "Support Manager",
            SystemRole.CustomerSupportAgent => "Support Agent",
            SystemRole.ComplianceOfficer => "Compliance",
            SystemRole.LegalOfficer => "Legal Officer",
            SystemRole.DataAnalyst => "Data Analyst",
            SystemRole.ReportsViewer => "Reports Viewer",
            SystemRole.Auditor => "Auditor",
            SystemRole.PropertyOwnerPortal => "Property Owner",
            SystemRole.TenantPortal => "Tenant Portal",
            SystemRole.VendorPortal => "Vendor Portal",
            _ => "Unknown"
        };
    }
}