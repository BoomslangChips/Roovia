@using Roovia.Interfaces
@using Roovia.Models.BusinessHelperModels
@using Roovia.Models.UserCompanyMappingModels
@using Roovia.Models.UserCompanyModels
@inject NavigationManager NavigationManager
@inject ICdnService CdnService

<div class="user-card">
    <div class="user-card-avatar">
        @if (User.ProfilePictureId.HasValue && User.ProfilePicture != null)
        {
            <img src="@User.ProfilePicture.Url" alt="@User.FullName" class="avatar-photo" />
        }
        else
        {
            <div class="avatar-initials">
                @if (string.IsNullOrEmpty(User.FirstName) && string.IsNullOrEmpty(User.LastName))
                {
                    @(User.UserName?.Substring(0, 1).ToUpper() ?? "?")
                }
                else
                {
                    @(User.FirstName?.Substring(0, 1).ToUpper() ?? "")
                    @(User.LastName?.Substring(0, 1).ToUpper() ?? "")
                }
            </div>
        }
    </div>

    <div class="user-card-content">
        <div class="user-card-info">
            <div class="user-card-header">
                <h4>@(string.IsNullOrEmpty(User.FullName) ? User.UserName : User.FullName)</h4>
                <div class="user-badges">
                    @if (User.Role.HasValue)
                    {
                        <span class="role-badge @PermissionFormat.GetRoleBadgeClass(User.Role.Value)">
                            @PermissionFormat.GetRoleDisplayName(User.Role.Value)
                        </span>
                    }
                    @if (CustomRoles != null && CustomRoles.Any())
                    {
                        @foreach (var customRole in CustomRoles)
                        {
                            @if (customRole.Role != null)
                            {
                                <span class="role-badge role-custom">
                                    @customRole.Role.Name
                                </span>
                            }
                        }
                    }
                    @if (User.Status != null)
                    {
                        <span class="status-badge @(User.IsActive ? "status-active" : "status-inactive")">
                            @User.Status.Name
                        </span>
                    }
                    else
                    {
                        <span class="status-badge @(User.IsActive ? "status-active" : "status-inactive")">
                            @(User.IsActive ? "Active" : "Inactive")
                        </span>
                    }
                </div>
            </div>

            <div class="user-card-details">
                <div class="detail-item">
                    <i class="fa-light fa-envelope"></i>
                    <span>@User.Email</span>
                </div>
                @if (!string.IsNullOrEmpty(User.PhoneNumber))
                {
                    <div class="detail-item">
                        <i class="fa-light fa-phone"></i>
                        <span>@User.PhoneNumber</span>
                    </div>
                }
                @if (!string.IsNullOrEmpty(User.EmployeeNumber))
                {
                    <div class="detail-item">
                        <i class="fa-light fa-id-badge"></i>
                        <span>@User.EmployeeNumber</span>
                    </div>
                }
                @if (!string.IsNullOrEmpty(User.JobTitle))
                {
                    <div class="detail-item">
                        <i class="fa-light fa-briefcase"></i>
                        <span>@User.JobTitle</span>
                    </div>
                }
                @if (User.Company != null)
                {
                    <div class="detail-item">
                        <i class="fa-light fa-building"></i>
                        <span>@User.Company.Name</span>
                    </div>
                }
                @if (User.Branch != null)
                {
                    <div class="detail-item">
                        <i class="fa-light fa-code-branch"></i>
                        <span>@User.Branch.Name</span>
                    </div>
                }
                @if (User.LastLoginDate.HasValue)
                {
                    <div class="detail-item">
                        <i class="fa-light fa-clock"></i>
                        <span>Last login: @User.LastLoginDate.Value.ToString("MMM dd, yyyy")</span>
                    </div>
                }
            </div>
        </div>

        <div class="user-card-actions">
            <button class="user-btn user-btn-outline"
                    @onclick="HandleView"
                    title="View Details">
                <i class="fa-light fa-eye"></i>
            </button>

            <button class="user-btn user-btn-outline"
                    @onclick="HandleEdit"
                    disabled="@DisableActions"
                    title="@(DisableActions ? "No permission" : "Edit User")">
                <i class="fa-light fa-edit"></i>
            </button>

            <button class="user-btn user-btn-outline"
                    @onclick="HandleRoles"
                    disabled="@DisableActions"
                    title="@(DisableActions ? "No permission" : "Roles")">
                <i class="fa-light fa-shield-check"></i>
            </button>

            <button class="user-btn user-btn-outline"
                    @onclick="HandlePermissions"
                    disabled="@DisableActions"
                    title="@(DisableActions ? "No permission" : "Permissions")">
                <i class="fa-light fa-lock"></i>
            </button>

            <button class="user-btn user-btn-outline"
                    @onclick="HandleResetPassword"
                    disabled="@DisableActions"
                    title="@(DisableActions ? "No permission" : "Reset Password")">
                <i class="fa-light fa-key"></i>
            </button>

            <button class="user-btn @(User.IsActive ? "user-btn-outline-danger" : "user-btn-outline-success")"
                    @onclick="HandleToggleStatus"
                    disabled="@DisableActions"
                    title="@(DisableActions ? "No permission" : User.IsActive ? "Deactivate" : "Activate")">
                <i class="@(User.IsActive ? "fa-light fa-user-slash" : "fa-light fa-user-check")"></i>
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public ApplicationUser User { get; set; } = null!;
    [Parameter] public List<UserRoleAssignment>? CustomRoles { get; set; }
    [Parameter] public EventCallback<string> OnView { get; set; }
    [Parameter] public EventCallback<string> OnEdit { get; set; }
    [Parameter] public EventCallback<string> OnRoles { get; set; }
    [Parameter] public EventCallback<string> OnPermissions { get; set; }
    [Parameter] public EventCallback<string> OnResetPassword { get; set; }
    [Parameter] public EventCallback<ApplicationUser> OnToggleStatus { get; set; }
    [Parameter] public bool DisableActions { get; set; } = false;

    private void HandleView()
    {
        OnView.InvokeAsync(User.Id);
    }

    private void HandleEdit()
    {
        if (!DisableActions)
        {
            OnEdit.InvokeAsync(User.Id);
        }
    }

    private void HandleRoles()
    {
        if (!DisableActions)
        {
            OnRoles.InvokeAsync(User.Id);
        }
    }

    private void HandlePermissions()
    {
        if (!DisableActions)
        {
            OnPermissions.InvokeAsync(User.Id);
        }
    }

    private void HandleResetPassword()
    {
        if (!DisableActions)
        {
            OnResetPassword.InvokeAsync(User.Id);
        }
    }

    private void HandleToggleStatus()
    {
        if (!DisableActions)
        {
            OnToggleStatus.InvokeAsync(User);
        }
    }
}