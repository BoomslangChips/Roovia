
@using Roovia.Interfaces
@using Roovia.Services
@using Roovia.Services.General
@inject IUser UserService
@inject IJSRuntime JSRuntime
@inject ToastService ToastService

<RVModal IsVisible="true"
         Title="Reset Password"
         Icon="fa-light fa-key"
         OnClose="OnClose"
         OnCancel="OnClose"
         Size="md"
         DefaultFooter="false">
    <ChildContent>
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <h3 class="loading-text">Resetting password...</h3>
            </div>
        }
        else if (passwordReset)
        {
            <div class="password-reset-success">
                <div class="password-reset-icon">
                    <i class="fa-light fa-check-circle"></i>
                </div>
                <h3>Password Reset Successfully</h3>
                <p>The password for <strong>@user.FullName</strong> has been reset.</p>

                <div class="new-password-container">
                    <div class="new-password-header">
                        <h4><i class="fa-light fa-key"></i> New Password</h4>
                        <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-copy"
                                  Text="Copy" OnClick="CopyPasswordToClipboard" />
                    </div>
                    <div class="new-password-display">
                        <div class="password-field">
                            <input type="@(showPassword ? "text" : "password")" readonly value="@newPassword"
                                   id="new-password-input" class="password-input" />
                            <button class="toggle-visibility" @onclick="TogglePasswordVisibility">
                                <i class="@(showPassword ? "fa-light fa-eye-slash" : "fa-light fa-eye")"></i>
                            </button>
                        </div>
                    </div>
                    <div class="password-note">
                        <i class="fa-light fa-info-circle"></i>
                        <span>Please share this password securely with the user. They will be prompted to change it on first login.</span>
                    </div>
                </div>

                <div class="modal-actions">
                    <RVButton ButtonType="primary" Text="Close" OnClick="OnClose" />
                </div>
            </div>
        }
        else
        {
            <div class="password-reset-confirmation">
                <div class="alert alert-warning">
                    <i class="fa-light fa-exclamation-triangle"></i>
                    <div class="alert-content">
                        <p>Are you sure you want to reset the password for <strong>@user.FullName</strong>?</p>
                        <p>This action will generate a new random password and invalidate the current one.</p>
                    </div>
                </div>

                <div class="options-container">
                    <div class="option-item">
                        <RVCheckbox Value="@requireChange"
                                    ValueChanged="(value) => requireChange = value"
                                    Id="require-change-checkbox" />
                        <label for="require-change-checkbox">
                            <span>Require password change on next login</span>
                        </label>
                    </div>
                </div>

                <div class="modal-actions">
                    <RVButton ButtonType="secondary" Text="Cancel" OnClick="OnClose" />
                    <RVButton ButtonType="primary" Text="Reset Password" OnClick="ResetPassword" />
                </div>
            </div>
        }
    </ChildContent>
</RVModal>

<style>
    .loading-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--spacing-6) var(--spacing-4);
        text-align: center;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(var(--primary-rgb), 0.2);
        border-top-color: var(--primary);
        border-radius: 50%;
        animation: spin 1s infinite linear;
        margin-bottom: var(--spacing-3);
    }

    .loading-text {
        color: var(--text-secondary);
        font-size: var(--font-size-base);
        font-weight: 500;
    }

    @@keyframes spin {
        to

    {
        transform: rotate(360deg);
    }

    }

    .password-reset-success, .password-reset-confirmation {
        padding: var(--spacing-3);
    }

    .password-reset-icon {
        width: 64px;
        height: 64px;
        border-radius: 50%;
        background-color: var(--success-light);
        color: var(--success);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 32px;
        margin: 0 auto var(--spacing-3) auto;
    }

    .password-reset-success h3, .password-reset-confirmation h3 {
        text-align: center;
        margin-bottom: var(--spacing-3);
        font-size: var(--font-size-lg);
        font-weight: 600;
    }

    .password-reset-success p {
        text-align: center;
        margin-bottom: var(--spacing-4);
        color: var(--text-secondary);
    }

    .new-password-container {
        background-color: var(--subtle-bg);
        border: 1px solid var(--border-divider);
        border-radius: var(--border-radius-md);
        padding: var(--spacing-3);
        margin-bottom: var(--spacing-4);
    }

    .new-password-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--spacing-2);
    }

        .new-password-header h4 {
            font-size: var(--font-size-sm);
            font-weight: 600;
            margin: 0;
            display: flex;
            align-items: center;
            gap: var(--spacing-1);
        }

    .new-password-display {
        background-color: var(--content-bg);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius-sm);
        padding: var(--spacing-1) var(--spacing-2);
        margin-bottom: var(--spacing-2);
    }

    .password-field {
        display: flex;
        align-items: center;
    }

    .password-input {
        flex: 1;
        border: none;
        background: transparent;
        color: var(--text-primary);
        font-family: monospace;
        font-size: var(--font-size-base);
        padding: var(--spacing-1) 0;
        width: 100%;
    }

        .password-input:focus {
            outline: none;
        }

    .toggle-visibility {
        background: none;
        border: none;
        cursor: pointer;
        color: var(--text-muted);
        padding: 0 var(--spacing-1);
    }

        .toggle-visibility:hover {
            color: var(--primary);
        }

    .password-note {
        display: flex;
        align-items: flex-start;
        gap: var(--spacing-1);
        font-size: var(--font-size-xs);
        color: var(--text-muted);
    }

        .password-note i {
            margin-top: 3px;
        }

    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: var(--spacing-2);
        margin-top: var(--spacing-3);
    }

    .alert {
        padding: var(--spacing-3);
        border-radius: var(--border-radius-md);
        display: flex;
        align-items: flex-start;
        gap: var(--spacing-2);
        margin-bottom: var(--spacing-3);
    }

    .alert-warning {
        background-color: var(--warning-light);
        color: var(--warning-dark);
    }

    .alert i {
        font-size: var(--font-size-lg);
        flex-shrink: 0;
        margin-top: var(--spacing-1);
    }

    .alert-content {
        flex: 1;
    }

        .alert-content p {
            margin: 0 0 var(--spacing-1) 0;
        }

            .alert-content p:last-child {
                margin-bottom: 0;
            }

    .options-container {
        margin-bottom: var(--spacing-3);
    }

    .option-item {
        display: flex;
        align-items: center;
        gap: var(--spacing-2);
        margin-bottom: var(--spacing-1);
    }

        .option-item label {
            cursor: pointer;
            user-select: none;
        }
</style>

@code {
    [Parameter] public ApplicationUser User { get; set; } = null!;
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnPasswordReset { get; set; }

    private ApplicationUser user => User ?? new ApplicationUser();
    private bool isLoading = false;
    private bool passwordReset = false;
    private bool requireChange = true;
    private bool showPassword = false;
    private string newPassword = string.Empty;

    private async Task ResetPassword()
    {
        if (user == null) return;

        try
        {
            isLoading = true;

            // Call the API to reset password
            var response = await UserService.ResetUserPassword(user.Id, requireChange);

            if (response.ResponseInfo.Success)
            {
                // Get the new password from the response
                newPassword = response.Response.ToString();
                passwordReset = true;

                // Notify parent component
                if (OnPasswordReset.HasDelegate)
                {
                    await OnPasswordReset.InvokeAsync();
                }

                ToastService.ShowSuccess($"Password for {user.FullName} has been reset", "Success");
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to reset password: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task CopyPasswordToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", newPassword);
            ToastService.ShowSuccess("Password copied to clipboard", "Success");
        }
        catch
        {
            ToastService.ShowError("Failed to copy password to clipboard", "Error");
        }
    }
}