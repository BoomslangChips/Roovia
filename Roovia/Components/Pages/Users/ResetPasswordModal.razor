@using Roovia.Interfaces
@using Roovia.Services
@using Roovia.Services.General
@inject IUser UserService
@inject IJSRuntime JSRuntime
@inject ToastService ToastService

<div class="modal-backdrop" @onclick="OnClose"></div>
<div class="custom-modal custom-modal-md">
    <div class="modal-header">
        <div class="modal-title">
            <i class="fa-light fa-key"></i>
            <span>Reset Password</span>
        </div>
        <button class="modal-close" @onclick="OnClose">
            <i class="fa-light fa-times"></i>
        </button>
    </div>
    <div class="modal-body">
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <h3 class="loading-text">Resetting password...</h3>
            </div>
        }
        else if (passwordReset)
        {
            <div class="password-reset-success">
                <div class="password-reset-icon">
                    <i class="fa-light fa-check-circle"></i>
                </div>
                <h3>Password Reset Successfully</h3>
                <p>The password for <strong>@user.FullName</strong> has been reset.</p>

                <div class="new-password-container">
                    <div class="new-password-header">
                        <h4><i class="fa-light fa-key"></i> New Password</h4>
                        <button class="reset-btn reset-btn-outline reset-btn-sm" @onclick="CopyPasswordToClipboard">
                            <i class="fa-light fa-copy"></i>
                            <span>Copy</span>
                        </button>
                    </div>
                    <div class="new-password-display">
                        <div class="password-field">
                            <input type="@(showPassword ? "text" : "password")" readonly value="@newPassword"
                                   id="new-password-input" class="password-input" />
                            <button class="toggle-visibility" @onclick="TogglePasswordVisibility">
                                <i class="@(showPassword ? "fa-light fa-eye-slash" : "fa-light fa-eye")"></i>
                            </button>
                        </div>
                    </div>
                    <div class="password-note">
                        <i class="fa-light fa-info-circle"></i>
                        <span>Please share this password securely with the user. They will be prompted to change it on first login.</span>
                    </div>
                </div>

                <div class="modal-actions">
                    <button class="reset-btn reset-btn-primary" @onclick="OnClose">Close</button>
                </div>
            </div>
        }
        else
        {
            <div class="password-reset-confirmation">
                <div class="alert alert-warning">
                    <i class="fa-light fa-exclamation-triangle"></i>
                    <div class="alert-content">
                        <p>Are you sure you want to reset the password for <strong>@user.FullName</strong>?</p>
                        <p>This action will generate a new random password and invalidate the current one.</p>
                    </div>
                </div>

                <div class="options-container">
                    <div class="option-item">
                        <div class="checkbox-container">
                            <input type="checkbox" id="require-change-checkbox"
                                   checked="@requireChange"
                                   @onchange="e => requireChange = (bool)e.Value" />
                            <label for="require-change-checkbox">
                                <span>Require password change on next login</span>
                            </label>
                        </div>
                    </div>
                </div>

                <div class="modal-actions">
                    <button class="reset-btn reset-btn-secondary" @onclick="OnClose">Cancel</button>
                    <button class="reset-btn reset-btn-primary" @onclick="ResetPassword">Reset Password</button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public ApplicationUser User { get; set; } = null!;
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnPasswordReset { get; set; }

    private ApplicationUser user => User ?? new ApplicationUser();
    private bool isLoading = false;
    private bool passwordReset = false;
    private bool requireChange = true;
    private bool showPassword = false;
    private string newPassword = string.Empty;

    private async Task ResetPassword()
    {
        if (user == null) return;

        try
        {
            isLoading = true;

            // Call the API to reset password
            var response = await UserService.ResetUserPassword(user.Id, requireChange);

            if (response.ResponseInfo.Success)
            {
                // Get the new password from the response
                newPassword = response.Response.ToString();
                passwordReset = true;

                // Notify parent component
                if (OnPasswordReset.HasDelegate)
                {
                    await OnPasswordReset.InvokeAsync();
                }

                ToastService.ShowSuccess($"Password for {user.FullName} has been reset", "Success");
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to reset password: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task CopyPasswordToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", newPassword);
            ToastService.ShowSuccess("Password copied to clipboard", "Success");
        }
        catch
        {
            ToastService.ShowError("Failed to copy password to clipboard", "Error");
        }
    }
}