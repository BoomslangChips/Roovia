@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Roovia.Components.Elements.Forms
@using Roovia.Data
@using Roovia.Interfaces
@using Roovia.Models.BusinessHelperModels
@using Roovia.Models.BusinessMappingModels
@using Roovia.Models.UserCompanyModels
@using Roovia.Models.ProjectCdnConfigModels
@using Roovia.Security
@using Roovia.Services
@using Roovia.Services.General
@inject IUser UserService
@inject UserManager<ApplicationUser> UserManager
@inject ToastService ToastService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IPermissionService PermissionService
@inject ICdnService CdnService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<RVModal IsVisible="true"
         Title="@(isNewUser ? "Create User" : "Edit User")"
         Icon="@(isNewUser ? "fa-light fa-user-plus" : "fa-light fa-user-edit")"
         OnClose="OnClose"
         OnCancel="OnClose"
         OnConfirm="SaveUser"
         ConfirmText="@(isNewUser ? "Create" : "Save")"
         CancelText="Cancel"
         Size="lg">
    <ChildContent>
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <h3 class="loading-text">Loading user details...</h3>
            </div>
        }
        else if (!hasAccessPermission)
        {
            <div class="alert alert-danger">
                <i class="fa-light fa-exclamation-triangle"></i>
                <div class="alert-content">
                    <p>You do not have permission to manage users.</p>
                </div>
            </div>
        }
        else if (!canEditThisUser)
        {
            <div class="alert alert-danger">
                <i class="fa-light fa-exclamation-triangle"></i>
                <div class="alert-content">
                    <p>You do not have permission to edit this user.</p>
                </div>
            </div>
        }
        else
        {
            <EditForm Model="userModel" OnValidSubmit="SaveUser" FormName="editUser" class="user-edit-form">
                <DataAnnotationsValidator />
                <FluentValidationValidator />

                <RVTab Tabs="topLevelTabs" Size="sm" Style="boxed" OnTabChange="HandleTopLevelTabChange">
                    <RVTabPanel TabId="basic" IsActive='activeTopTab == "basic"'>
                        <div class="form-section animate-fade-in">
                            <div class="section-title">
                                <h4><i class="fa-light fa-user-circle"></i> User Information</h4>
                                <p>Enter the basic information for this user</p>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="firstName">First Name</label>
                                    <RVTextbox Id="firstName"
                                               Value="@userModel.FirstName"
                                               ValueChanged="value => userModel.FirstName = value"
                                               Placeholder="Enter first name" />
                                    <ValidationMessage For="@(() => userModel.FirstName)" />
                                </div>

                                <div class="form-group">
                                    <label for="lastName">Last Name</label>
                                    <RVTextbox Id="lastName"
                                               Value="@userModel.LastName"
                                               ValueChanged="value => userModel.LastName = value"
                                               Placeholder="Enter last name" />
                                    <ValidationMessage For="@(() => userModel.LastName)" />
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="userName">Username</label>
                                    <RVTextbox Id="userName"
                                               Value="@userModel.UserName"
                                               ValueChanged="value => userModel.UserName = value"
                                               Placeholder="Enter username"
                                               Disabled="@(!isNewUser)"
                                               IconLeft="fa-light fa-user" />
                                    <ValidationMessage For="@(() => userModel.UserName)" />
                                </div>

                                <div class="form-group">
                                    <label for="idNumber">ID Number</label>
                                    <RVTextbox Id="idNumber"
                                               Value="@userModel.IdNumber"
                                               ValueChanged="value => userModel.IdNumber = value"
                                               Placeholder="Enter ID number"
                                               IconLeft="fa-light fa-id-card" />
                                    <ValidationMessage For="@(() => userModel.IdNumber)" />
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="jobTitle">Job Title</label>
                                <RVTextbox Id="jobTitle"
                                           Value="@userModel.JobTitle"
                                           ValueChanged="value => userModel.JobTitle = value"
                                           Placeholder="Enter job title"
                                           IconLeft="fa-light fa-briefcase" />
                                <ValidationMessage For="@(() => userModel.JobTitle)" />
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="department">Department</label>
                                    <RVTextbox Id="department"
                                               Value="@userModel.Department"
                                               ValueChanged="value => userModel.Department = value"
                                               Placeholder="Enter department"
                                               IconLeft="fa-light fa-building-user" />
                                    <ValidationMessage For="@(() => userModel.Department)" />
                                </div>

                                <div class="form-group">
                                    <label for="employeeNumber">Employee Number</label>
                                    <RVTextbox Id="employeeNumber"
                                               Value="@userModel.EmployeeNumber"
                                               ValueChanged="value => userModel.EmployeeNumber = value"
                                               Placeholder="Enter employee number"
                                               IconLeft="fa-light fa-hashtag" />
                                    <ValidationMessage For="@(() => userModel.EmployeeNumber)" />
                                </div>
                            </div>

                            @if (!isNewUser)
                            {
                                <div class="form-row">
                                    <div class="form-group">
                                        <label for="userStatus">Status</label>
                                        <RVSelect Id="userStatus"
                                                  Value="@(userModel.StatusId?.ToString() ?? "")"
                                                  ValueChanged="HandleStatusChange"
                                                  Placeholder="Select status"
                                                  IconLeft="fa-light fa-check-circle">
                                            <option value="">-- Select Status --</option>
                                            @if (UserStatusTypes != null)
                                            {
                                                @foreach (var status in UserStatusTypes)
                                                {
                                                    <option value="@status.Id">@status.Name</option>
                                                }
                                            }
                                        </RVSelect>
                                    </div>

                                    <div class="form-group">
                                        <RVSwitch Label="Active"
                                                  Value="userModel.IsActive"
                                                  ValueChanged="value => userModel.IsActive = value"
                                                  HelperText="Inactive users will not be able to log in to the system" />
                                    </div>
                                </div>
                            }

                            <div class="profile-image-section">
                                <div class="section-subtitle">
                                    <h5><i class="fa-light fa-image-user"></i> Profile Picture</h5>
                                </div>
                                <div class="profile-image-container">
                                    <div class="profile-image-preview">
                                        @if (userModel.ProfilePictureId.HasValue && userModel.ProfilePicture != null)
                                        {
                                            <img src="@userModel.ProfilePicture.Url" alt="Profile Picture" />
                                        }
                                        else
                                        {
                                            <div class="profile-image-placeholder">
                                                <i class="fa-light fa-user"></i>
                                            </div>
                                        }
                                    </div>
                                    <div class="profile-image-controls">
                                        <InputFile OnChange="HandleProfileImageUpload" accept=".jpg,.jpeg,.png" id="profile-image-upload" class="d-none" />
                                        <RVButton ButtonType="outline" Size="sm" IconLeft="fa-light fa-upload" Text="Upload Image"
                                                  OnClick="() => ClickProfileImageUpload()" />
                                        @if (userModel.ProfilePictureId.HasValue)
                                        {
                                            <RVButton ButtonType="outline-danger" Size="sm" IconLeft="fa-light fa-trash" Text="Remove"
                                                      OnClick="RemoveProfileImage" />
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </RVTabPanel>

                    <RVTabPanel TabId="contact" IsActive='activeTopTab == "contact"'>
                        <div class="form-section animate-fade-in">
                            <div class="section-title">
                                <h4><i class="fa-light fa-address-book"></i> Contact Information</h4>
                                <p>Enter the contact details for this user</p>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="email">Primary Email Address</label>
                                    <RVTextbox Id="email"
                                               Type="email"
                                               Value="@userModel.Email"
                                               ValueChanged="value => userModel.Email = value"
                                               Placeholder="Enter email address"
                                               IconLeft="fa-light fa-envelope" />
                                    <ValidationMessage For="@(() => userModel.Email)" />
                                </div>

                                <div class="form-group">
                                    <label for="phoneNumber">Primary Phone Number</label>
                                    <RVTextbox Id="phoneNumber"
                                               Type="tel"
                                               Value="@userModel.PhoneNumber"
                                               ValueChanged="value => userModel.PhoneNumber = value"
                                               Placeholder="Enter phone number"
                                               IconLeft="fa-light fa-phone" />
                                    <ValidationMessage For="@(() => userModel.PhoneNumber)" />
                                </div>
                            </div>

                            <!-- Additional Email Addresses Section -->
                            <div class="additional-contacts">
                                <div class="section-subtitle">
                                    <h5><i class="fa-light fa-envelope"></i> Additional Email Addresses</h5>
                                    <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-plus" Text="Add Email"
                                              OnClick="AddEmail" CssClass="add-btn" />
                                </div>

                                @if (additionalEmails.Any())
                                {
                                    <div class="email-list">
                                        @foreach (var email in additionalEmails)
                                        {
                                            <div class="email-item">
                                                <div class="email-content">
                                                    <RVTextbox Value="@email.EmailAddress"
                                                               ValueChanged="value => UpdateEmailAddress(email, value)"
                                                               Placeholder="Enter email address"
                                                               IconLeft="fa-light fa-envelope"
                                                               Size="sm" />
                                                    <RVTextbox Value="@email.Description"
                                                               ValueChanged="value => UpdateEmailDescription(email, value)"
                                                               Placeholder="Description (e.g. Work, Personal)"
                                                               IconLeft="fa-light fa-tag"
                                                               Size="sm" />
                                                </div>
                                                <RVButton ButtonType="outline-danger" Size="xs" IconLeft="fa-light fa-trash"
                                                          OnClick="() => RemoveEmail(email)" CssClass="remove-btn" />
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="empty-list">
                                        <i class="fa-light fa-inbox-empty"></i>
                                        <p>No additional email addresses added</p>
                                    </div>
                                }
                            </div>

                            <!-- Additional Phone Numbers Section -->
                            <div class="additional-contacts">
                                <div class="section-subtitle">
                                    <h5><i class="fa-light fa-phone"></i> Additional Phone Numbers</h5>
                                    <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-plus" Text="Add Phone"
                                              OnClick="AddPhone" CssClass="add-btn" />
                                </div>

                                @if (additionalPhones.Any())
                                {
                                    <div class="phone-list">
                                        @foreach (var phone in additionalPhones)
                                        {
                                            <div class="phone-item">
                                                <div class="phone-content">
                                                    <RVTextbox Value="@phone.Number"
                                                               ValueChanged="value => UpdatePhoneNumber(phone, value)"
                                                               Placeholder="Enter phone number"
                                                               IconLeft="fa-light fa-phone"
                                                               Size="sm" />
                                                    <RVSelect Value="@phone.ContactNumberTypeId.ToString()"
                                                              ValueChanged="value => UpdatePhoneType(phone, value)"
                                                              Placeholder="Select type"
                                                              IconLeft="fa-light fa-phone-office"
                                                              Size="sm">
                                                        @foreach (var type in contactNumberTypes)
                                                        {
                                                            <option value="@type.Id">@type.Name</option>
                                                        }
                                                    </RVSelect>
                                                    <RVTextbox Value="@phone.Description"
                                                               ValueChanged="value => UpdatePhoneDescription(phone, value)"
                                                               Placeholder="Description"
                                                               IconLeft="fa-light fa-tag"
                                                               Size="sm" />
                                                </div>
                                                <RVButton ButtonType="outline-danger" Size="xs" IconLeft="fa-light fa-trash"
                                                          OnClick="() => RemovePhone(phone)" CssClass="remove-btn" />
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="empty-list">
                                        <i class="fa-light fa-phone-slash"></i>
                                        <p>No additional phone numbers added</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </RVTabPanel>

                    <RVTabPanel TabId="access" IsActive='activeTopTab == "access"'>
                        <div class="form-section animate-fade-in">
                            <div class="section-title">
                                <h4><i class="fa-light fa-shield-check"></i> Access & Roles</h4>
                                <p>Manage user roles, permissions, and security settings</p>
                            </div>

                            <RVTab Tabs="accessTabs" Size="sm" Style="pills" OnTabChange="HandleAccessTabChange">
                                <RVTabPanel TabId="roles" IsActive='activeAccessTab == "roles"'>
                                    <div class="access-card">
                                        <div class="section-subtitle">
                                            <h5><i class="fa-light fa-user-shield"></i> System Role</h5>
                                        </div>

                                        <div class="form-group">
                                            <label for="systemRole">Base System Role</label>
                                            <RVSelect Id="systemRole"
                                                      Value="@selectedRole"
                                                      ValueChanged="value => selectedRole = value"
                                                      Placeholder="Select role"
                                                      Disabled="@(!canChangeRole)"
                                                      IconLeft="fa-light fa-shield-check">
                                                @foreach (var role in availableRoles)
                                                {
                                                    <option value="@role">@PermissionFormat.GetRoleDisplayName((SystemRole)Enum.Parse(typeof(SystemRole), role))</option>
                                                }
                                            </RVSelect>
                                            <div class="field-info">
                                                <i class="fa-light fa-info-circle"></i>
                                                <span>This defines the user's base system role and associated permissions</span>
                                            </div>
                                        </div>

                                        <div class="role-description">
                                            @if (!string.IsNullOrEmpty(selectedRole) && Enum.TryParse<SystemRole>(selectedRole, out var selectedRoleEnum))
                                            {
                                                <div class="role-icon">
                                                    <i class="@PermissionFormat.GetRoleIcon(selectedRoleEnum)"></i>
                                                </div>
                                                <div class="role-details">
                                                    <h5>@PermissionFormat.GetRoleDisplayName(selectedRoleEnum)</h5>
                                                    <p>@PermissionFormat.GetRoleDescription(selectedRoleEnum)</p>
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <div class="access-card">
                                        <div class="section-subtitle">
                                            <h5><i class="fa-light fa-building"></i> Company Access</h5>
                                        </div>

                                        <div class="form-group">
                                            <label for="company">Company</label>
                                            <RVSelect Id="company"
                                                      Value="@(userModel.CompanyId.HasValue ? userModel.CompanyId.Value.ToString() : "")"
                                                      ValueChanged="HandleCompanyChange"
                                                      Placeholder="Select company"
                                                      Disabled="@(!canAssignAnyCompany)"
                                                      IconLeft="fa-light fa-building">
                                                <option value="">-- None --</option>
                                                @if (availableCompanies != null)
                                                {
                                                    @foreach (var company in availableCompanies.OrderBy(c => c.Name))
                                                    {
                                                        <option value="@company.Id">@company.Name</option>
                                                    }
                                                }
                                            </RVSelect>
                                            <div class="field-info">
                                                <i class="fa-light fa-info-circle"></i>
                                                <span>Assign the user to a company to grant access to company data</span>
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label for="branch">Branch</label>
                                            <RVSelect Id="branch"
                                                      Value="@(userModel.BranchId.HasValue ? userModel.BranchId.Value.ToString() : "")"
                                                      ValueChanged="HandleBranchChange"
                                                      Placeholder="Select branch"
                                                      Disabled="@(!canAssignBranch || !userModel.CompanyId.HasValue || availableBranches.Count == 0)"
                                                      IconLeft="fa-light fa-code-branch">
                                                <option value="">-- None --</option>
                                                @foreach (var branch in availableBranches.OrderBy(b => b.Name))
                                                {
                                                    <option value="@branch.Id">@branch.Name</option>
                                                }
                                            </RVSelect>
                                            <div class="field-info">
                                                <i class="fa-light fa-info-circle"></i>
                                                <span>Assign the user to a specific branch within the company</span>
                                            </div>
                                        </div>
                                    </div>

                                    @if (isNewUser)
                                    {
                                        <div class="permissions-info-card">
                                            <div class="info-box">
                                                <div class="info-icon"><i class="fa-light fa-info-circle"></i></div>
                                                <div class="info-content">
                                                    <h5>Permissions Management</h5>
                                                    <p>You'll be able to manage specific permissions after creating the user. Permission management allows you to grant or deny specific capabilities beyond their base role.</p>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </RVTabPanel>

                                <RVTabPanel TabId="permissions" IsActive='activeAccessTab == "permissions"'>
                                    @if (!isNewUser)
                                    {
                                        <div class="permissions-container">
                                            <UserPermissionsPanel @ref="permissionsPanel" UserId="@UserId" OnSaved="HandlePermissionsSaved" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="permissions-info-card">
                                            <div class="info-box">
                                                <div class="info-icon"><i class="fa-light fa-info-circle"></i></div>
                                                <div class="info-content">
                                                    <h5>Permissions Management</h5>
                                                    <p>You'll be able to manage specific permissions after creating the user. Permission management allows you to grant or deny specific capabilities beyond their base role.</p>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </RVTabPanel>

                                <RVTabPanel TabId="security" IsActive='activeAccessTab == "security"'>
                                    @if (!isNewUser)
                                    {
                                        <div class="security-card">
                                            <div class="section-subtitle">
                                                <h5><i class="fa-light fa-key"></i> Password Management</h5>
                                            </div>

                                            <div class="password-options">
                                                <RVButton ButtonType="primary"
                                                          IconLeft="fa-light fa-key"
                                                          Text="Reset Password"
                                                          OnClick="ShowResetPasswordConfirmation" />

                                                <div class="form-group mt-3">
                                                    <RVSwitch Label="Require password change on next login"
                                                              Value="userModel.RequireChangePasswordOnLogin"
                                                              ValueChanged="value => userModel.RequireChangePasswordOnLogin = value"
                                                              HelperText="User will be prompted to change their password when they next log in" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="security-card">
                                            <div class="section-subtitle">
                                                <h5><i class="fa-light fa-shield-check"></i> Account Security</h5>
                                            </div>

                                            <div class="form-row">
                                                <div class="form-group">
                                                    <RVSwitch Label="Email Confirmed"
                                                              Value="userModel.EmailConfirmed"
                                                              ValueChanged="value => userModel.EmailConfirmed = value"
                                                              HelperText="Toggle whether the user's email address is confirmed" />
                                                </div>

                                                <div class="form-group">
                                                    <RVSwitch Label="Two-Factor Authentication"
                                                              Value="userModel.IsTwoFactorRequired"
                                                              ValueChanged="value => userModel.IsTwoFactorRequired = value"
                                                              HelperText="Toggle whether two-factor authentication is required for this user" />
                                                </div>
                                            </div>

                                            @if (userModel.IsTwoFactorRequired)
                                            {
                                                <div class="form-group">
                                                    <label for="twoFactorMethod">Preferred Two-Factor Method</label>
                                                    <RVSelect Id="twoFactorMethod"
                                                              Value="@userModel.PreferredTwoFactorMethod"
                                                              ValueChanged="value => userModel.PreferredTwoFactorMethod = value"
                                                              Placeholder="Select preferred method"
                                                              IconLeft="fa-light fa-mobile">
                                                        <option value="Email">Email</option>
                                                        <option value="SMS">SMS</option>
                                                        <option value="Authenticator">Authenticator App</option>
                                                    </RVSelect>
                                                </div>
                                            }
                                        </div>

                                        <div class="security-card">
                                            <div class="section-subtitle">
                                                <h5><i class="fa-light fa-clock-rotate-left"></i> Account History</h5>
                                            </div>

                                            <div class="account-history">
                                                <div class="history-item">
                                                    <div class="history-label">Created:</div>
                                                    <div class="history-value">
                                                        @(userModel.CreatedDate?.ToString("dd MMM yyyy HH:mm") ?? "Unknown")
                                                        @if (!string.IsNullOrEmpty(userModel.CreatedBy))
                                                        {
                                                            <span>by @userModel.CreatedBy</span>
                                                        }
                                                    </div>
                                                </div>
                                                @if (userModel.LastLoginDate.HasValue)
                                                {
                                                    <div class="history-item">
                                                        <div class="history-label">Last Login:</div>
                                                        <div class="history-value">
                                                            @userModel.LastLoginDate?.ToString("dd MMM yyyy HH:mm")
                                                            @if (!string.IsNullOrEmpty(userModel.LastLoginIpAddress))
                                                            {
                                                                <span>from @userModel.LastLoginIpAddress</span>
                                                            }
                                                        </div>
                                                    </div>
                                                }
                                                @if (userModel.UpdatedDate.HasValue)
                                                {
                                                    <div class="history-item">
                                                        <div class="history-label">Last Updated:</div>
                                                        <div class="history-value">
                                                            @userModel.UpdatedDate?.ToString("dd MMM yyyy HH:mm")
                                                            @if (!string.IsNullOrEmpty(userModel.UpdatedBy))
                                                            {
                                                                <span>by @userModel.UpdatedBy</span>
                                                            }
                                                        </div>
                                                    </div>
                                                }
                                                @if (userModel.LoginFailureCount > 0)
                                                {
                                                    <div class="history-item">
                                                        <div class="history-label">Failed Logins:</div>
                                                        <div class="history-value">
                                                            @userModel.LoginFailureCount
                                                            @if (userModel.LastLoginFailureDate.HasValue)
                                                            {
                                                                <span>(last attempt: @userModel.LastLoginFailureDate?.ToString("dd MMM yyyy HH:mm"))</span>
                                                            }
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="password-section">
                                            <div class="section-title">
                                                <h4><i class="fa-light fa-key"></i> User Password</h4>
                                                <p>Set an initial password for the user</p>
                                            </div>

                                            <div class="form-row">
                                                <div class="form-group">
                                                    <label for="password">Password</label>
                                                    <RVTextbox Id="password"
                                                               Type="password"
                                                               Value="@password"
                                                               ValueChanged="value => password = value"
                                                               Placeholder="Enter password"
                                                               IconLeft="fa-light fa-lock" />
                                                    @if (!string.IsNullOrEmpty(passwordError))
                                                    {
                                                        <div class="validation-message">@passwordError</div>
                                                    }
                                                </div>

                                                <div class="form-group">
                                                    <label for="confirmPassword">Confirm Password</label>
                                                    <RVTextbox Id="confirmPassword"
                                                               Type="password"
                                                               Value="@confirmPassword"
                                                               ValueChanged="value => confirmPassword = value"
                                                               Placeholder="Confirm password"
                                                               IconLeft="fa-light fa-lock" />
                                                    @if (!string.IsNullOrEmpty(confirmPasswordError))
                                                    {
                                                        <div class="validation-message">@confirmPasswordError</div>
                                                    }
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <RVSwitch Label="Require password change on first login"
                                                          Value="requirePasswordChange"
                                                          ValueChanged="value => requirePasswordChange = value"
                                                          HelperText="User will be prompted to change their password when they first log in" />
                                            </div>
                                        </div>
                                    }
                                </RVTabPanel>

                                <RVTabPanel TabId="preferences" IsActive='activeAccessTab == "preferences"'>
                                    <div class="preferences-section">
                                        <div class="section-title">
                                            <h4><i class="fa-light fa-sliders"></i> User Preferences</h4>
                                            <p>Configure user display and notification preferences</p>
                                        </div>

                                        <div class="form-group">
                                            <label for="theme">Theme Preference</label>
                                            <RVSelect Id="theme"
                                                      Value="@selectedTheme"
                                                      ValueChanged="value => selectedTheme = value"
                                                      Placeholder="Select theme"
                                                      IconLeft="fa-light fa-palette">
                                                <option value="system">System Default</option>
                                                <option value="light">Light Mode</option>
                                                <option value="dark">Dark Mode</option>
                                                @foreach (var theme in customThemes)
                                                {
                                                    <option value="@theme.Id">@theme.Name</option>
                                                }
                                            </RVSelect>
                                        </div>

                                        <div class="form-group">
                                            <RVSwitch Label="Email notifications"
                                                      Value="emailNotifications"
                                                      ValueChanged="value => emailNotifications = value"
                                                      HelperText="Receive notifications via email" />
                                        </div>

                                        <div class="form-group">
                                            <RVSwitch Label="SMS notifications"
                                                      Value="smsNotifications"
                                                      ValueChanged="value => smsNotifications = value"
                                                      HelperText="Receive notifications via SMS (requires valid phone number)" />
                                        </div>

                                        <div class="form-group">
                                            <RVSwitch Label="Web notifications"
                                                      Value="webNotifications"
                                                      ValueChanged="value => webNotifications = value"
                                                      HelperText="Receive notifications in the web interface" />
                                        </div>
                                    </div>
                                </RVTabPanel>
                            </RVTab>
                        </div>
                    </RVTabPanel>
                </RVTab>
            </EditForm>
        }
    </ChildContent>
</RVModal>

@if (showResetPasswordModal)
{
    <RVModal IsVisible="true"
             Title="Reset Password"
             Icon="fa-light fa-key"
             OnClose="() => showResetPasswordModal = false"
             OnCancel="() => showResetPasswordModal = false"
             OnConfirm="ResetPassword"
             ConfirmText="Reset Password"
             CancelText="Cancel"
             Size="md">
        <ChildContent>
            <div class="reset-password-form">
                <div class="alert alert-warning">
                    <i class="fa-light fa-exclamation-triangle"></i>
                    <div class="alert-content">
                        <p>You are about to reset the password for <strong>@GetUserDisplayName()</strong>.</p>
                        <p>The user will receive a password reset link via email.</p>
                    </div>
                </div>

                <div class="form-group">
                    <RVSwitch Label="Force password change on next login"
                              Value="forcePasswordChange"
                              ValueChanged="value => forcePasswordChange = value"
                              HelperText="The user will be required to change their password when they next log in" />
                </div>
            </div>
        </ChildContent>
    </RVModal>
}

@code {
    [Parameter] public string? UserId { get; set; }
    [Parameter] public List<Company>? Companies { get; set; }
    [Parameter] public IEnumerable<UserStatusType>? UserStatusTypes { get; set; }
    [Parameter] public int SelectedBranchId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }

    private ApplicationUser userModel = new ApplicationUser();
    private bool isLoading = true;
    private bool isNewUser => string.IsNullOrEmpty(UserId);
    private string activeTopTab = "basic";
    private string activeAccessTab = "roles";
    private List<Email> additionalEmails = new List<Email>();
    private List<ContactNumber> additionalPhones = new List<ContactNumber>();
    private List<Branch> availableBranches = new List<Branch>();
    private List<Company> availableCompanies = new List<Company>();
    private List<ContactNumberType> contactNumberTypes = new List<ContactNumberType>();
    private List<ThemeType> customThemes = new List<ThemeType>();

    // Permission flags
    private bool hasAccessPermission = false;
    private bool canEditThisUser = true;
    private bool canAssignAnyCompany = false;
    private bool canAssignBranch = false;
    private bool canChangeRole = true;

    // Password fields
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string passwordError = string.Empty;
    private string confirmPasswordError = string.Empty;
    private bool requirePasswordChange = true; // For new users

    // Dropdown selections
    private string selectedRole = SystemRole.PropertyManager.ToString();
    private string initialRole = string.Empty; // To track if role has changed
    private int? initialCompanyId;
    private int? initialBranchId;
    private string selectedTheme = "system";
    private bool emailNotifications = true;
    private bool smsNotifications = false;
    private bool webNotifications = true;

    // Current user info
    private string currentUserId = string.Empty;
    private SystemRole? currentUserRole;
    private int? currentUserCompanyId;
    private int? currentUserBranchId;
    private List<string> availableRoles = new List<string>();
    private bool hasManageUsersPermission = false;
    private bool hasManageRolesPermission = false;

    // Reset password
    private bool showResetPasswordModal = false;
    private bool forcePasswordChange = true;

    // File upload
    private IBrowserFile? profileImageFile;
    private bool isUploadingProfileImage = false;

    // Top-level tab configuration
    private List<RVTab.RVTabItem> topLevelTabs = new List<RVTab.RVTabItem>();

    // Access tab configuration
    private List<RVTab.RVTabItem> accessTabs = new List<RVTab.RVTabItem>();

    // Reference to the permissions panel
    private UserPermissionsPanel permissionsPanel;

    // Track whether permissions have been modified
    private bool permissionsModified = false;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserInfo();

        // Check if user has permission to access this page
        if (!hasManageUsersPermission)
        {
            hasAccessPermission = false;
            isLoading = false;
            return;
        }

        hasAccessPermission = true;

        await LoadContactNumberTypes();
        await LoadCustomThemes();
        await LoadAvailableCompaniesAndBranches();
        await LoadAvailableRoles();
        ConfigureTabs();
        await LoadData();
    }

    private async Task GetCurrentUserInfo()
    {
        try
        {
            // Get the current user's ID and role
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                // Get user ID
                var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
                if (userIdClaim != null)
                {
                    currentUserId = userIdClaim.Value;
                }

                // Get current user's permissions
                var userPermissions = await PermissionService.GetUserPermissions(currentUserId);
                hasManageUsersPermission = userPermissions.Contains("settings.users");
                hasManageRolesPermission = userPermissions.Contains("settings.permissions");

                // Get current user's role and company/branch
                using var dbContext = await DbContextFactory.CreateDbContextAsync();
                var currentUser = await dbContext.Users.FirstOrDefaultAsync(u => u.Id == currentUserId);
                if (currentUser != null)
                {
                    if (currentUser.Role.HasValue)
                    {
                        currentUserRole = currentUser.Role.Value;
                    }

                    currentUserCompanyId = currentUser.CompanyId;
                    currentUserBranchId = currentUser.BranchId;
                }
            }
        }
        catch (Exception ex)
        {
            // If there's an error, we'll fall back to default permissions
            ToastService.ShowError($"Error fetching current user: {ex.Message}", "Error");
            currentUserRole = SystemRole.PropertyManager;
            currentUserCompanyId = null;
            currentUserBranchId = null;
            hasManageUsersPermission = false;
            hasManageRolesPermission = false;
        }
    }

    private async Task LoadContactNumberTypes()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            contactNumberTypes = await dbContext.ContactNumberTypes
                .Where(t => t.IsActive)
                .OrderBy(t => t.DisplayOrder)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading contact number types: {ex.Message}", "Error");
            contactNumberTypes = new List<ContactNumberType>();
        }
    }

    private async Task LoadCustomThemes()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            customThemes = await dbContext.ThemeTypes
                .Where(t => t.IsActive)
                .OrderBy(t => t.DisplayOrder)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading themes: {ex.Message}", "Error");
            customThemes = new List<ThemeType>();
        }
    }

    private async Task LoadAvailableCompaniesAndBranches()
    {
        if (Companies == null)
        {
            availableCompanies = new List<Company>();
            return;
        }

        try
        {
            // Filter companies based on current user's role and company
            if (currentUserRole == SystemRole.SystemAdministrator)
            {
                // System admin can see all companies
                availableCompanies = Companies.ToList();
                canAssignAnyCompany = true;
                canAssignBranch = true;
            }
            else if (currentUserRole == SystemRole.CompanyAdministrator && currentUserCompanyId.HasValue)
            {
                // Company admin can only see their own company
                availableCompanies = Companies
                    .Where(c => c.Id == currentUserCompanyId.Value)
                    .ToList();
                canAssignAnyCompany = false; // Can't change company, only displayed for information
                canAssignBranch = true; // Can change branch within their company
            }
            else if (currentUserRole == SystemRole.BranchManager && currentUserCompanyId.HasValue)
            {
                // Branch manager can only see their own company
                availableCompanies = Companies
                    .Where(c => c.Id == currentUserCompanyId.Value)
                    .ToList();
                canAssignAnyCompany = false;
                canAssignBranch = false; // Can only assign to their own branch, handled in branch selection
            }
            else
            {
                // Other roles shouldn't be able to access this page
                availableCompanies = new List<Company>();
                canAssignAnyCompany = false;
                canAssignBranch = false;
            }

            // If editing existing user and we're a branch manager, preload the branches
            if (!isNewUser && currentUserRole == SystemRole.BranchManager && currentUserCompanyId.HasValue)
            {
                // Load user's branch options (restricted to branch manager's branch)
                var response = await UserService.GetBranchesByCompany(currentUserCompanyId.Value);
                if (response.ResponseInfo.Success)
                {
                    var allBranches = (List<Branch>)response.Response;
                    // Branch manager can only see their branch
                    availableBranches = allBranches
                        .Where(b => currentUserBranchId.HasValue && b.Id == currentUserBranchId.Value)
                        .ToList();
                }
            }

            // If a specific branch was selected through the parameter, ensure it's loaded
            if (SelectedBranchId > 0 && !isNewUser)
            {
                var branchResponse = await UserService.GetBranchById(SelectedBranchId);
                if (branchResponse.ResponseInfo.Success)
                {
                    var selectedBranch = (Branch)branchResponse.Response;

                    // Check if branch is already in the list
                    if (!availableBranches.Any(b => b.Id == SelectedBranchId))
                    {
                        // Add to available branches if user has access
                        var companyResponse = await UserService.GetCompanyById(selectedBranch.CompanyId);
                        if (companyResponse.ResponseInfo.Success)
                        {
                            var company = (Company)companyResponse.Response;

                            // Add branch only if it belongs to an available company
                            if (availableCompanies.Any(c => c.Id == company.Id))
                            {
                                selectedBranch.Company = company;
                                availableBranches.Add(selectedBranch);
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load companies: {ex.Message}", "Error");
        }
    }

    private async Task LoadAvailableRoles()
    {
        // Default to only showing property manager role
        availableRoles = new List<string> { SystemRole.PropertyManager.ToString() };

        if (currentUserRole.HasValue && hasManageUsersPermission)
        {
            switch (currentUserRole.Value)
            {
                case SystemRole.SystemAdministrator:
                    // System admin can assign all roles
                    availableRoles = Enum.GetNames(typeof(SystemRole)).ToList();
                    break;

                case SystemRole.CompanyAdministrator:
                    // Company admin can assign roles below their level
                    availableRoles = new List<string>
                    {
                        SystemRole.BranchManager.ToString(),
                        SystemRole.PropertyManager.ToString(),
                        SystemRole.FinancialOfficer.ToString(),
                        SystemRole.TenantOfficer.ToString(),
                        SystemRole.ReportsViewer.ToString()
                    };
                    break;

                case SystemRole.BranchManager:
                    // Branch manager can assign roles below their level
                    availableRoles = new List<string>
                    {
                        SystemRole.PropertyManager.ToString(),
                        SystemRole.FinancialOfficer.ToString(),
                        SystemRole.TenantOfficer.ToString(),
                        SystemRole.ReportsViewer.ToString()
                    };
                    break;

                case SystemRole.PropertyManager:
                    // Property manager can only assign tenant officer and reports viewer
                    availableRoles = new List<string>
                    {
                        SystemRole.TenantOfficer.ToString(),
                        SystemRole.ReportsViewer.ToString()
                    };
                    break;

                default:
                    // Other roles can only assign reports viewer
                    availableRoles = new List<string>
                    {
                        SystemRole.ReportsViewer.ToString()
                    };
                    break;
            }
        }
    }

    private void ConfigureTabs()
    {
        // Configure top-level tabs
        topLevelTabs = new List<RVTab.RVTabItem>
        {
            new RVTab.RVTabItem
            {
                Id = "basic",
                Title = "Basic Info",
                Icon = "fa-light fa-user",
                IsActive = activeTopTab == "basic"
            },
            new RVTab.RVTabItem
            {
                Id = "contact",
                Title = "Contact Details",
                Icon = "fa-light fa-address-card",
                IsActive = activeTopTab == "contact"
            },
            new RVTab.RVTabItem
            {
                Id = "access",
                Title = "Access & Security",
                Icon = "fa-light fa-shield-check",
                IsActive = activeTopTab == "access"
            }
        };

        // Configure access tabs
        accessTabs = new List<RVTab.RVTabItem>
        {
            new RVTab.RVTabItem
            {
                Id = "roles",
                Title = "System Role",
                Icon = "fa-light fa-user-shield",
                IsActive = activeAccessTab == "roles"
            },
            new RVTab.RVTabItem
            {
                Id = "permissions",
                Title = "Permissions",
                Icon = "fa-light fa-lock",
                IsActive = activeAccessTab == "permissions"
            },
            new RVTab.RVTabItem
            {
                Id = "security",
                Title = "Security",
                Icon = "fa-light fa-shield-alt",
                IsActive = activeAccessTab == "security"
            },
            new RVTab.RVTabItem
            {
                Id = "preferences",
                Title = "Preferences",
                Icon = "fa-light fa-sliders",
                IsActive = activeAccessTab == "preferences"
            }
        };
    }

    private void HandleTopLevelTabChange(string tabId)
    {
        activeTopTab = tabId;
        StateHasChanged();
    }

    private void HandleAccessTabChange(string tabId)
    {
        activeAccessTab = tabId;
        StateHasChanged();
    }

    private void HandlePermissionsSaved()
    {
        permissionsModified = true;
        ToastService.ShowSuccess("User permissions updated successfully", "Success");
    }

    private void HandleStatusChange(string value)
    {
        if (int.TryParse(value, out var statusId))
        {
            userModel.StatusId = statusId;
        }
        else
        {
            userModel.StatusId = null;
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;

            if (!isNewUser)
            {
                // Load user
                var response = await UserService.GetUserById(UserId!);
                if (response.ResponseInfo.Success)
                {
                    userModel = (ApplicationUser)response.Response;
                    selectedRole = userModel.Role?.ToString() ?? SystemRole.PropertyManager.ToString();
                    initialRole = selectedRole; // Store initial role for comparison
                    initialCompanyId = userModel.CompanyId;
                    initialBranchId = userModel.BranchId;

                    // Load user preferences
                    if (!string.IsNullOrEmpty(userModel.UserPreferences))
                    {
                        try
                        {
                            var preferences = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(userModel.UserPreferences);
                            if (preferences != null)
                            {
                                if (preferences.TryGetValue("theme", out var theme))
                                {
                                    selectedTheme = theme.ToString();
                                }

                                if (preferences.TryGetValue("notifications", out var notificationsObj))
                                {
                                    var notifications = notificationsObj as System.Text.Json.JsonElement?;
                                    if (notifications.HasValue)
                                    {
                                        emailNotifications = notifications.Value.TryGetProperty("email", out var email) && email.GetBoolean();
                                        smsNotifications = notifications.Value.TryGetProperty("sms", out var sms) && sms.GetBoolean();
                                        webNotifications = notifications.Value.TryGetProperty("web", out var web) && web.GetBoolean();
                                    }
                                }
                            }
                        }
                        catch
                        {
                            // If preferences can't be parsed, use defaults
                        }
                    }

                    // Check if current user has permission to edit this user
                    if (!CanEditUser(userModel))
                    {
                        canEditThisUser = false;
                        isLoading = false;
                        return;
                    }

                    // Verify the current user has permission to edit this user's role
                    if (!CanAssignRole(selectedRole))
                    {
                        // If current user can't assign the existing role, make the dropdown read-only
                        canChangeRole = false;
                    }

                    // Load additional emails and phones
                    if (userModel.EmailAddresses != null)
                    {
                        additionalEmails = userModel.EmailAddresses
                            .Where(e => !e.IsPrimary)
                            .ToList();
                    }

                    if (userModel.ContactNumbers != null)
                    {
                        additionalPhones = userModel.ContactNumbers
                            .Where(c => !c.IsPrimary)
                            .ToList();
                    }

                    // If user being edited is in a different company than what the current user can access
                    if (userModel.CompanyId.HasValue &&
                        !availableCompanies.Any(c => c.Id == userModel.CompanyId.Value))
                    {
                        // Add the user's company to the available companies list for display
                        // But don't allow changing it (handled by canAssignAnyCompany flag)
                        using var dbContext = await DbContextFactory.CreateDbContextAsync();
                        var userCompany = await dbContext.Companies.FirstOrDefaultAsync(c => c.Id == userModel.CompanyId.Value);
                        if (userCompany != null)
                        {
                            availableCompanies.Add(userCompany);
                        }
                    }

                    // Load branches appropriate to the user's company
                    if (userModel.CompanyId.HasValue)
                    {
                        await LoadBranchesForUser(userModel.CompanyId.Value, userModel.BranchId);
                    }
                }
                else
                {
                    ToastService.ShowError(response.ResponseInfo.Message, "Error");
                    if (OnClose.HasDelegate)
                        await OnClose.InvokeAsync();
                    return;
                }
            }
            else
            {
                // New user
                userModel = new ApplicationUser
                    {
                        IsActive = true,
                        CreatedDate = DateTime.Now,
                        CreatedBy = currentUserId,
                        StatusId = UserStatusTypes?.FirstOrDefault(s => s.Name == "Active")?.Id
                    };

                // Set default role based on available roles
                if (availableRoles.Any())
                {
                    selectedRole = availableRoles.First();
                    if (Enum.TryParse<SystemRole>(selectedRole, out var role))
                    {
                        userModel.Role = role;
                    }
                }

                // For new users, set the company to current user's company if the current user
                // is not a system admin
                if (currentUserRole != SystemRole.SystemAdministrator && currentUserCompanyId.HasValue)
                {
                    userModel.CompanyId = currentUserCompanyId;

                    // For branch managers, also set the branch
                    if (currentUserRole == SystemRole.BranchManager && currentUserBranchId.HasValue)
                    {
                        userModel.BranchId = currentUserBranchId;
                    }
                    // Use the selected branch ID if provided
                    else if (SelectedBranchId > 0)
                    {
                        // Verify the branch belongs to the company
                        var branchResponse = await UserService.GetBranchById(SelectedBranchId);
                        if (branchResponse.ResponseInfo.Success)
                        {
                            var branch = (Branch)branchResponse.Response;
                            if (branch.CompanyId == userModel.CompanyId)
                            {
                                userModel.BranchId = SelectedBranchId;
                            }
                        }
                    }

                    // Load available branches
                    await LoadBranchesForUser(userModel.CompanyId.Value, userModel.BranchId);
                }
                else if (currentUserRole == SystemRole.SystemAdministrator && SelectedBranchId > 0)
                {
                    // For system admin, if a branch was specified, load its company and set both
                    var branchResponse = await UserService.GetBranchById(SelectedBranchId);
                    if (branchResponse.ResponseInfo.Success)
                    {
                        var branch = (Branch)branchResponse.Response;
                        userModel.CompanyId = branch.CompanyId;
                        userModel.BranchId = SelectedBranchId;

                        // Load available branches for this company
                        await LoadBranchesForUser(branch.CompanyId, SelectedBranchId);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load user: {ex.Message}", "Error");
            if (OnClose.HasDelegate)
                await OnClose.InvokeAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool CanEditUser(ApplicationUser user)
    {
        if (!hasManageUsersPermission)
            return false;

        if (currentUserRole == SystemRole.SystemAdministrator)
            return true;

        // Can't edit users with higher or equal roles
        if (user.Role.HasValue)
        {
            // Company admins can't edit system admins
            if (currentUserRole == SystemRole.CompanyAdministrator &&
                user.Role.Value == SystemRole.SystemAdministrator)
                return false;

            // Branch managers can't edit system admins or company admins
            if (currentUserRole == SystemRole.BranchManager &&
                (user.Role.Value == SystemRole.SystemAdministrator || user.Role.Value == SystemRole.CompanyAdministrator))
                return false;
        }

        // Check company/branch restrictions
        if (currentUserRole == SystemRole.CompanyAdministrator)
        {
            // Company admin can only edit users in their company
            return user.CompanyId.HasValue && user.CompanyId.Value == currentUserCompanyId;
        }
        else if (currentUserRole == SystemRole.BranchManager)
        {
            // Branch manager can only edit users in their branch
            return user.CompanyId.HasValue && user.CompanyId.Value == currentUserCompanyId &&
                   user.BranchId.HasValue && user.BranchId.Value == currentUserBranchId;
        }

        return true;
    }

    private bool CanAssignRole(string roleName)
    {
        if (!currentUserRole.HasValue || !hasManageUsersPermission)
            return false;

        if (Enum.TryParse<SystemRole>(roleName, out var targetRole))
        {
            // Determine if current user can assign this role based on hierarchy
            switch (currentUserRole.Value)
            {
                case SystemRole.SystemAdministrator:
                    // System admin can assign any role
                    return true;

                case SystemRole.CompanyAdministrator:
                    // Company admin can't assign system admin roles
                    return targetRole != SystemRole.SystemAdministrator;

                case SystemRole.BranchManager:
                    // Branch manager can't assign system admin or company admin roles
                    return targetRole != SystemRole.SystemAdministrator &&
                           targetRole != SystemRole.CompanyAdministrator;

                default:
                    // Other roles can only assign property manager and reports viewer
                    return targetRole == SystemRole.PropertyManager ||
                           targetRole == SystemRole.ReportsViewer;
            }
        }

        return false;
    }

    private async Task LoadBranchesForUser(int companyId, int? userBranchId)
    {
        try
        {
            // Load all branches for the company
            var response = await UserService.GetBranchesByCompany(companyId);
            if (response.ResponseInfo.Success)
            {
                var allBranches = (List<Branch>)response.Response;

                if (currentUserRole == SystemRole.SystemAdministrator || currentUserRole == SystemRole.CompanyAdministrator)
                {
                    // System admin and company admin can see all branches in the company
                    availableBranches = allBranches;
                }
                else if (currentUserRole == SystemRole.BranchManager && currentUserBranchId.HasValue)
                {
                    // Branch manager can only see their branch
                    availableBranches = allBranches
                        .Where(b => b.Id == currentUserBranchId.Value)
                        .ToList();

                    // If the user has a branch that's not in the list, add it just for display
                    if (userBranchId.HasValue && userBranchId.Value != currentUserBranchId.Value)
                    {
                        var userBranch = allBranches.FirstOrDefault(b => b.Id == userBranchId.Value);
                        if (userBranch != null)
                        {
                            // Add the branch but user can't change to it
                            availableBranches.Add(userBranch);
                        }
                    }
                }
                else
                {
                    availableBranches = new List<Branch>();
                }

                // If a specific branch is selected but not in the available branches, add it
                if (SelectedBranchId > 0 && !availableBranches.Any(b => b.Id == SelectedBranchId))
                {
                    var selectedBranch = allBranches.FirstOrDefault(b => b.Id == SelectedBranchId);
                    if (selectedBranch != null && selectedBranch.CompanyId == companyId)
                    {
                        availableBranches.Add(selectedBranch);
                    }
                }
            }
            else
            {
                availableBranches = new List<Branch>();
            }
        }
        catch
        {
            availableBranches = new List<Branch>();
        }
    }

    private void AddEmail()
    {
        additionalEmails.Add(new Email
            {
                IsPrimary = false,
                IsActive = true,
                RelatedEntityType = "User",
                CreatedOn = DateTime.Now
            });
    }

    private void RemoveEmail(Email email)
    {
        additionalEmails.Remove(email);
    }

    private void UpdateEmailAddress(Email email, string value)
    {
        email.EmailAddress = value;
    }

    private void UpdateEmailDescription(Email email, string value)
    {
        email.Description = value;
    }

    private void AddPhone()
    {
        additionalPhones.Add(new ContactNumber
            {
                ContactNumberTypeId = contactNumberTypes.FirstOrDefault()?.Id ?? 1,
                IsPrimary = false,
                IsActive = true,
                RelatedEntityType = "User",
                CreatedOn = DateTime.Now
            });
    }

    private void RemovePhone(ContactNumber phone)
    {
        additionalPhones.Remove(phone);
    }

    private void UpdatePhoneNumber(ContactNumber phone, string value)
    {
        phone.Number = value;
    }

    private void UpdatePhoneType(ContactNumber phone, string value)
    {
        if (int.TryParse(value, out var typeId))
        {
            phone.ContactNumberTypeId = typeId;
        }
    }

    private void UpdatePhoneDescription(ContactNumber phone, string value)
    {
        phone.Description = value;
    }

    private async Task HandleCompanyChange(string companyId)
    {
        // If the user can't change companies, don't allow it
        if (!canAssignAnyCompany)
        {
            if (string.IsNullOrEmpty(companyId))
            {
                // If trying to clear the company, revert back to original value
                if (initialCompanyId.HasValue)
                {
                    userModel.CompanyId = initialCompanyId;
                }
                return;
            }

            // Check if the company being set is the initial company
            if (int.TryParse(companyId, out var cId) && initialCompanyId.HasValue && cId != initialCompanyId.Value)
            {
                // If different from initial company, don't allow change
                ToastService.ShowError("You do not have permission to change the company", "Permission Denied");
                return;
            }
        }

        if (int.TryParse(companyId, out var id))
        {
            userModel.CompanyId = id;
            await LoadBranchesForUser(id, userModel.BranchId);

            // When company changes, clear branch unless it's also available in the new company
            if (userModel.BranchId.HasValue &&
                !availableBranches.Any(b => b.Id == userModel.BranchId.Value))
            {
                userModel.BranchId = null;
            }

            // If a specific branch was selected via parameter, try to set it if it matches the company
            if (SelectedBranchId > 0 && isNewUser)
            {
                var branchResponse = await UserService.GetBranchById(SelectedBranchId);
                if (branchResponse.ResponseInfo.Success)
                {
                    var branch = (Branch)branchResponse.Response;
                    if (branch.CompanyId == id)
                    {
                        userModel.BranchId = SelectedBranchId;
                    }
                }
            }
        }
        else
        {
            userModel.CompanyId = null;
            userModel.BranchId = null;
            availableBranches.Clear();
        }
    }

    private void HandleBranchChange(string branchId)
    {
        // If branch manager or company is fixed, validate branch assignment
        if (!canAssignBranch)
        {
            if (string.IsNullOrEmpty(branchId))
            {
                // If trying to clear the branch, revert back to original value
                if (initialBranchId.HasValue)
                {
                    userModel.BranchId = initialBranchId;
                }
                return;
            }

            // If branch manager, can only assign to their branch
            if (currentUserRole == SystemRole.BranchManager &&
                int.TryParse(branchId, out var bId) &&
                currentUserBranchId.HasValue && bId != currentUserBranchId.Value)
            {
                ToastService.ShowError("You can only assign users to your own branch", "Permission Denied");
                return;
            }
        }

        if (int.TryParse(branchId, out var id))
        {
            userModel.BranchId = id;
        }
        else
        {
            userModel.BranchId = null;
        }
    }

    private void ShowResetPasswordConfirmation()
    {
        showResetPasswordModal = true;
    }

    private async Task ResetPassword()
    {
        try
        {
            // Generate a password reset token
            var token = await UserManager.GeneratePasswordResetTokenAsync(userModel);

            // Update user to require password change if specified
            if (forcePasswordChange)
            {
                userModel.RequireChangePasswordOnLogin = true;
                await UserService.UpdateUser(userModel.Id, userModel);
            }

            // In a real implementation, we would send an email with the reset link
            // For now, we'll just show a success message
            ToastService.ShowSuccess($"Password reset token generated for {GetUserDisplayName()}", "Success");

            showResetPasswordModal = false;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to reset password: {ex.Message}", "Error");
        }
    }

    private async Task HandleProfileImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            isUploadingProfileImage = true;
            var file = e.File;

            // Validate file type
            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };
            var extension = Path.GetExtension(file.Name).ToLowerInvariant();

            if (!allowedExtensions.Contains(extension))
            {
                ToastService.ShowError("Only image files (jpg, jpeg, png, gif) are allowed", "Invalid File");
                return;
            }

            // Validate file size (max 5MB)
            if (file.Size > 5 * 1024 * 1024)
            {
                ToastService.ShowError("Maximum file size is 5MB", "File Too Large");
                return;
            }

            // Read the file stream
            using var stream = file.OpenReadStream(5 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            ms.Position = 0;

            // Upload to CDN
            var cdnUrl = await CdnService.UploadFileAsync(ms, file.Name, file.ContentType, "profiles");

            if (!string.IsNullOrEmpty(cdnUrl))
            {
                // Get the metadata for the uploaded file
                var metadata = await CdnService.GetFileMetadataAsync(cdnUrl);

                if (metadata != null)
                {
                    // Update user model
                    userModel.ProfilePictureId = metadata.Id;
                    userModel.ProfilePicture = metadata;

                    ToastService.ShowSuccess("Profile picture uploaded successfully", "Success");
                }
                else
                {
                    ToastService.ShowError("Failed to retrieve file metadata", "Error");
                }
            }
            else
            {
                ToastService.ShowError("Failed to upload profile picture", "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to upload profile picture: {ex.Message}", "Error");
        }
        finally
        {
            isUploadingProfileImage = false;
            StateHasChanged();
        }
    }

    private async Task ClickProfileImageUpload()
    {
      //  await JSRuntime.InvokeVoidAsync("document.getElementById", "profile-image-upload").CallVoid("click");
    }

    private void RemoveProfileImage()
    {
        userModel.ProfilePictureId = null;
        userModel.ProfilePicture = null;
    }

    private Dictionary<string, object> BuildUserPreferences()
    {
        var preferences = new Dictionary<string, object>();

        // Theme preference
        preferences["theme"] = selectedTheme;

        // Notification preferences
        preferences["notifications"] = new Dictionary<string, bool>
            {
                ["email"] = emailNotifications,
                ["sms"] = smsNotifications,
                ["web"] = webNotifications
            };

        return preferences;
    }

    private async Task SaveUser()
    {
        try
        {
            // Check permissions before saving
            if (!hasAccessPermission || !canEditThisUser)
            {
                ToastService.ShowError("You do not have permission to perform this action", "Permission Denied");
                return;
            }

            // Validate company/branch assignments
            if (!canAssignAnyCompany && initialCompanyId != userModel.CompanyId)
            {
                ToastService.ShowError("You do not have permission to change the company", "Permission Denied");
                return;
            }

            if (!canAssignBranch && initialBranchId != userModel.BranchId)
            {
                ToastService.ShowError("You do not have permission to change the branch", "Permission Denied");
                return;
            }

            // For branch managers, validate branch assignment
            if (currentUserRole == SystemRole.BranchManager &&
                userModel.BranchId.HasValue &&
                currentUserBranchId.HasValue &&
                userModel.BranchId.Value != currentUserBranchId.Value)
            {
                ToastService.ShowError("You can only assign users to your own branch", "Permission Denied");
                return;
            }

            // Validate password for new users
            if (isNewUser)
            {
                if (string.IsNullOrEmpty(password))
                {
                    passwordError = "Password is required";
                    return;
                }

                if (password != confirmPassword)
                {
                    confirmPasswordError = "Passwords do not match";
                    return;
                }

                // Clear errors
                passwordError = string.Empty;
                confirmPasswordError = string.Empty;
            }

            // Set role - verify the current user can assign this role
            if (Enum.TryParse<SystemRole>(selectedRole, out var role))
            {
                if (!CanAssignRole(selectedRole) && selectedRole != initialRole)
                {
                    ToastService.ShowError("You do not have permission to assign this role", "Permission Denied");
                    return;
                }

                userModel.Role = role;
            }

            // Set user preferences
            userModel.UserPreferences = System.Text.Json.JsonSerializer.Serialize(BuildUserPreferences());

            // Handle user information updates
            if (!isNewUser)
            {
                userModel.UpdatedBy = currentUserId;
                userModel.UpdatedDate = DateTime.Now;
            }
            else
            {
                userModel.CreatedBy = currentUserId;
                userModel.CreatedDate = DateTime.Now;
                userModel.RequireChangePasswordOnLogin = requirePasswordChange;
            }

            // Add email addresses and contact numbers
            if (isNewUser)
            {
                // For new users, we need to set up email and phone number entities
                var primaryEmail = new Email
                    {
                        EmailAddress = userModel.Email,
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "User",
                        CreatedOn = DateTime.Now
                    };

                var primaryPhone = new ContactNumber
                    {
                        Number = userModel.PhoneNumber,
                        ContactNumberTypeId = contactNumberTypes.FirstOrDefault()?.Id ?? 1,
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "User",
                        CreatedOn = DateTime.Now
                    };

                userModel.EmailAddresses = new List<Email> { primaryEmail };
                userModel.EmailAddresses.ToList().AddRange(additionalEmails);

                userModel.ContactNumbers = new List<ContactNumber> { primaryPhone };
                userModel.ContactNumbers.ToList().AddRange(additionalPhones);

                // Create user
                var result = await UserManager.CreateAsync(userModel, password);

                if (result.Succeeded)
                {
                    // Add the user to the appropriate role based on their SystemRole
                    using var dbContext = await DbContextFactory.CreateDbContextAsync();
                    string roleName = PermissionFormat.GetRoleDisplayName(userModel.Role.Value);
                    var dbRole = await dbContext.Roles.FirstOrDefaultAsync(r => r.Name == roleName);

                    if (dbRole != null)
                    {
                        // Create a new UserRoleAssignment
                        var userRoleAssignment = new UserRoleAssignment
                            {
                                UserId = userModel.Id,
                                RoleId = dbRole.Id,
                                AssignedDate = DateTime.Now,
                                AssignedBy = currentUserId
                            };

                        await dbContext.UserRoleAssignments.AddAsync(userRoleAssignment);
                        await dbContext.SaveChangesAsync();
                    }

                    ToastService.ShowSuccess($"User {GetUserDisplayName()} created successfully", "Success");

                    if (OnSaved.HasDelegate)
                        await OnSaved.InvokeAsync();
                }
                else
                {
                    var errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
                    ToastService.ShowError(errorMessage, "Error");
                }
            }
            else
            {
                // For existing users, we need to update the user
                // Update existing email addresses
                var primaryEmail = userModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary);
                if (primaryEmail != null)
                {
                    primaryEmail.EmailAddress = userModel.Email;
                    primaryEmail.UpdatedDate = DateTime.Now;
                }

                var primaryPhone = userModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary);
                if (primaryPhone != null)
                {
                    primaryPhone.Number = userModel.PhoneNumber;
                    primaryPhone.UpdatedDate = DateTime.Now;
                }

                // Update user
                var userId = userModel.Id;
                var response = await UserService.UpdateUser(userId, userModel);

                if (response.ResponseInfo.Success)
                {
                    // Check if the SystemRole has changed and update UserRoleAssignment if needed
                    if (initialRole != selectedRole)
                    {
                        using var dbContext = await DbContextFactory.CreateDbContextAsync();

                        // Get the role ID for the selected role
                        string roleName = PermissionFormat.GetRoleDisplayName(userModel.Role.Value);
                        var dbRole = await dbContext.Roles.FirstOrDefaultAsync(r => r.Name == roleName);

                        if (dbRole != null)
                        {
                            // Check if the user already has a role assignment
                            var existingRoleAssignment = await dbContext.UserRoleAssignments
                                .FirstOrDefaultAsync(ura => ura.UserId == userId);

                            if (existingRoleAssignment != null)
                            {
                                // Update existing role assignment
                                existingRoleAssignment.RoleId = dbRole.Id;
                                existingRoleAssignment.AssignedDate = DateTime.Now;
                                existingRoleAssignment.AssignedBy = currentUserId;
                            }
                            else
                            {
                                // Create new role assignment
                                var userRoleAssignment = new UserRoleAssignment
                                    {
                                        UserId = userId,
                                        RoleId = dbRole.Id,
                                        AssignedDate = DateTime.Now,
                                        AssignedBy = currentUserId
                                    };

                                await dbContext.UserRoleAssignments.AddAsync(userRoleAssignment);
                            }

                            await dbContext.SaveChangesAsync();
                        }
                    }

                    // Now save permissions if there are any pending changes
                    if (!isNewUser && permissionsPanel != null && permissionsPanel.HasPendingChanges())
                    {
                        bool permissionsSaved = await permissionsPanel.SavePendingChanges();
                        if (permissionsSaved)
                        {
                            ToastService.ShowSuccess($"User {GetUserDisplayName()} and permissions updated successfully", "Success");
                        }
                        else
                        {
                            ToastService.ShowWarning($"User updated but some permissions failed to save", "Warning");
                        }
                    }
                    else
                    {
                        ToastService.ShowSuccess($"User {GetUserDisplayName()} updated successfully", "Success");
                    }

                    if (OnSaved.HasDelegate)
                        await OnSaved.InvokeAsync();
                }
                else
                {
                    ToastService.ShowError(response.ResponseInfo.Message, "Error");
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to save user: {ex.Message}", "Error");
        }
    }

    private string GetUserDisplayName()
    {
        if (!string.IsNullOrEmpty(userModel.FirstName) && !string.IsNullOrEmpty(userModel.LastName))
        {
            return $"{userModel.FirstName} {userModel.LastName}";
        }
        else if (!string.IsNullOrEmpty(userModel.FirstName))
        {
            return userModel.FirstName;
        }
        else if (!string.IsNullOrEmpty(userModel.LastName))
        {
            return userModel.LastName;
        }

        return userModel.UserName ?? "New User";
    }
}