@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Roovia.Data
@using Roovia.Interfaces
@using Roovia.Models.BusinessHelperModels
@using Roovia.Models.BusinessMappingModels
@using Roovia.Models.UserCompanyModels
@using Roovia.Models.ProjectCdnConfigModels
@using Roovia.Security
@using Roovia.Services
@using Roovia.Services.General
@inject IUser UserService
@inject UserManager<ApplicationUser> UserManager
@inject ToastService ToastService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IPermissionService PermissionService
@inject ICdnService CdnService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="ue-modal-backdrop" @onclick="OnClose"></div>
<div class="ue-modal-wrapper">
    <div class="ue-modal-header">
        <div class="ue-modal-title">
            <i class="@(isNewUser ? "fa-light fa-user-plus" : "fa-light fa-user-edit")"></i>
            <span>@(isNewUser ? "Create User" : "Edit User")</span>
        </div>
        <button class="ue-close-button" @onclick="OnClose">
            <i class="fa-light fa-times"></i>
        </button>
    </div>

    <div class="ue-modal-body">
        @if (isLoading)
        {
            <div class="ue-loading">
                <div class="ue-spinner"></div>
                <span class="ue-loading-text">Loading user details...</span>
            </div>
        }
        else if (!hasAccessPermission)
        {
            <div class="ue-message-panel ue-message-error">
                <div class="ue-message-icon"><i class="fa-light fa-exclamation-triangle"></i></div>
                <div class="ue-message-content">
                    <p>You do not have permission to manage users.</p>
                </div>
            </div>
        }
        else if (!canEditThisUser)
        {
            <div class="ue-message-panel ue-message-error">
                <div class="ue-message-icon"><i class="fa-light fa-exclamation-triangle"></i></div>
                <div class="ue-message-content">
                    <p>You do not have permission to edit this user.</p>
                </div>
            </div>
        }
        else
        {
            <EditForm Model="userModel" OnValidSubmit="SaveUser" FormName="editUser" class="ue-user-form">
                <DataAnnotationsValidator />

                <div class="ue-tabs-container">
                    <div class="ue-tabs-header">
                        @foreach (var tab in topLevelTabs)
                        {
                            <button class="ue-tab-button @(activeTopTab == tab.Id ? "ue-active" : "")" @onclick="() => HandleTopLevelTabChange(tab.Id)">
                                <i class="@tab.Icon"></i>
                                <span>@tab.Title</span>
                            </button>
                        }
                    </div>

                    <div class="ue-tab-content">
                        <!-- Basic Info Tab -->
                        <div class="ue-tab-pane @(activeTopTab == "basic" ? "ue-active" : "")">
                            <div class="ue-form-section">
                                <div class="ue-section-title">
                                    <i class="fa-light fa-user-circle"></i>
                                    <h3>User Information</h3>
                                    <p>Enter the basic information for this user</p>
                                </div>

                                <div class="ue-form-row">
                                    <div class="ue-form-group">
                                        <label for="firstName">First Name</label>
                                        <div class="ue-input-wrapper">
                                            <InputText id="firstName" @bind-Value="userModel.FirstName" class="ue-input" placeholder="Enter first name" />
                                        </div>
                                        <ValidationMessage For="@(() => userModel.FirstName)" class="ue-validation-message" />
                                    </div>

                                    <div class="ue-form-group">
                                        <label for="lastName">Last Name</label>
                                        <div class="ue-input-wrapper">
                                            <InputText id="lastName" @bind-Value="userModel.LastName" class="ue-input" placeholder="Enter last name" />
                                        </div>
                                        <ValidationMessage For="@(() => userModel.LastName)" class="ue-validation-message" />
                                    </div>
                                </div>

                                <div class="ue-form-row">
                                    <div class="ue-form-group">
                                        <label for="userName">Username</label>
                                        <div class="ue-input-wrapper">
                                            <i class="fa-light fa-user ue-input-icon"></i>
                                            <InputText id="userName" @bind-Value="userModel.UserName" class="ue-input ue-input-with-icon" 
                                                     placeholder="Enter username" disabled="@(!isNewUser)" />
                                        </div>
                                        <ValidationMessage For="@(() => userModel.UserName)" class="ue-validation-message" />
                                    </div>

                                    <div class="ue-form-group">
                                        <label for="idNumber">ID Number</label>
                                        <div class="ue-input-wrapper">
                                            <i class="fa-light fa-id-card ue-input-icon"></i>
                                            <InputText id="idNumber" @bind-Value="userModel.IdNumber" class="ue-input ue-input-with-icon" 
                                                     placeholder="Enter ID number" />
                                        </div>
                                        <ValidationMessage For="@(() => userModel.IdNumber)" class="ue-validation-message" />
                                    </div>
                                </div>

                                <div class="ue-form-group">
                                    <label for="jobTitle">Job Title</label>
                                    <div class="ue-input-wrapper">
                                        <i class="fa-light fa-briefcase ue-input-icon"></i>
                                        <InputText id="jobTitle" @bind-Value="userModel.JobTitle" class="ue-input ue-input-with-icon" 
                                                 placeholder="Enter job title" />
                                    </div>
                                    <ValidationMessage For="@(() => userModel.JobTitle)" class="ue-validation-message" />
                                </div>

                                <div class="ue-form-row">
                                    <div class="ue-form-group">
                                        <label for="department">Department</label>
                                        <div class="ue-input-wrapper">
                                            <i class="fa-light fa-building-user ue-input-icon"></i>
                                            <InputText id="department" @bind-Value="userModel.Department" class="ue-input ue-input-with-icon" 
                                                     placeholder="Enter department" />
                                        </div>
                                        <ValidationMessage For="@(() => userModel.Department)" class="ue-validation-message" />
                                    </div>

                                    <div class="ue-form-group">
                                        <label for="employeeNumber">Employee Number</label>
                                        <div class="ue-input-wrapper">
                                            <i class="fa-light fa-hashtag ue-input-icon"></i>
                                            <InputText id="employeeNumber" @bind-Value="userModel.EmployeeNumber" class="ue-input ue-input-with-icon" 
                                                     placeholder="Enter employee number" />
                                        </div>
                                        <ValidationMessage For="@(() => userModel.EmployeeNumber)" class="ue-validation-message" />
                                    </div>
                                </div>

                                @if (!isNewUser)
                                {
                                    <div class="ue-form-row">
                                        <div class="ue-form-group">
                                            <label for="userStatus">Status</label>
                                            <div class="ue-select-wrapper">
                                                <i class="fa-light fa-check-circle ue-input-icon"></i>
                                                <select id="userStatus" class="ue-select ue-select-with-icon" value="@(userModel.StatusId?.ToString() ?? "")" 
                                                        @onchange="(e) => HandleStatusChange(e.Value.ToString())">
                                                    <option value="">-- Select Status --</option>
                                                    @if (UserStatusTypes != null)
                                                    {
                                                        @foreach (var status in UserStatusTypes)
                                                        {
                                                            <option value="@status.Id">@status.Name</option>
                                                        }
                                                    }
                                                </select>
                                                <i class="fa-light fa-chevron-down ue-select-arrow"></i>
                                            </div>
                                        </div>

                                        <div class="ue-form-group">
                                            <div class="ue-switch-container">
                                                <label class="ue-switch">
                                                    <input type="checkbox" @bind="userModel.IsActive" />
                                                    <span class="ue-switch-slider"></span>
                                                </label>
                                                <div class="ue-switch-content">
                                                    <span class="ue-switch-label">Active</span>
                                                    <span class="ue-switch-description">Inactive users will not be able to log in to the system</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }

                                <div class="ue-profile-image-section">
                                    <div class="ue-section-subtitle">
                                        <i class="fa-light fa-image-user"></i>
                                        <h4>Profile Picture</h4>
                                    </div>
                                    <div class="ue-profile-image-container">
                                        <div class="ue-profile-image-preview">
                                            @if (userModel.ProfilePictureId.HasValue && userModel.ProfilePicture != null)
                                            {
                                                <img src="@userModel.ProfilePicture.Url" alt="Profile Picture" />
                                            }
                                            else
                                            {
                                                <div class="ue-profile-image-placeholder">
                                                    <i class="fa-light fa-user"></i>
                                                </div>
                                            }
                                        </div>
                                        <div class="ue-profile-image-controls">
                                            <InputFile OnChange="HandleProfileImageUpload" accept=".jpg,.jpeg,.png" id="profile-image-upload" class="ue-hidden" />
                                            <button type="button" class="ue-button ue-button-outline ue-button-sm" @onclick="() => ClickProfileImageUpload()">
                                                <i class="fa-light fa-upload"></i>
                                                <span>Upload Image</span>
                                            </button>
                                            @if (userModel.ProfilePictureId.HasValue)
                                            {
                                                <button type="button" class="ue-button ue-button-outline-danger ue-button-sm" @onclick="RemoveProfileImage">
                                                    <i class="fa-light fa-trash"></i>
                                                    <span>Remove</span>
                                                </button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Contact Info Tab -->
                        <div class="ue-tab-pane @(activeTopTab == "contact" ? "ue-active" : "")">
                            <div class="ue-form-section">
                                <div class="ue-section-title">
                                    <i class="fa-light fa-address-book"></i>
                                    <h3>Contact Information</h3>
                                    <p>Enter the contact details for this user</p>
                                </div>

                                <div class="ue-form-row">
                                    <div class="ue-form-group">
                                        <label for="email">Primary Email Address</label>
                                        <div class="ue-input-wrapper">
                                            <i class="fa-light fa-envelope ue-input-icon"></i>
                                            <InputText id="email" type="email" @bind-Value="userModel.Email" class="ue-input ue-input-with-icon" 
                                                     placeholder="Enter email address" />
                                        </div>
                                        <ValidationMessage For="@(() => userModel.Email)" class="ue-validation-message" />
                                    </div>

                                    <div class="ue-form-group">
                                        <label for="phoneNumber">Primary Phone Number</label>
                                        <div class="ue-input-wrapper">
                                            <i class="fa-light fa-phone ue-input-icon"></i>
                                            <InputText id="phoneNumber" type="tel" @bind-Value="userModel.PhoneNumber" class="ue-input ue-input-with-icon" 
                                                     placeholder="Enter phone number" />
                                        </div>
                                        <ValidationMessage For="@(() => userModel.PhoneNumber)" class="ue-validation-message" />
                                    </div>
                                </div>

                                <!-- Additional Email Addresses Section -->
                                <div class="ue-additional-contacts">
                                    <div class="ue-section-subtitle">
                                        <i class="fa-light fa-envelope"></i>
                                        <h4>Additional Email Addresses</h4>
                                        <button type="button" class="ue-button ue-button-outline ue-button-xs" @onclick="AddEmail">
                                            <i class="fa-light fa-plus"></i>
                                            <span>Add Email</span>
                                        </button>
                                    </div>

                                    @if (additionalEmails.Any())
                                    {
                                        <div class="ue-email-list">
                                            @foreach (var email in additionalEmails)
                                            {
                                                <div class="ue-email-item">
                                                    <div class="ue-email-content">
                                                        <div class="ue-input-wrapper">
                                                            <i class="fa-light fa-envelope ue-input-icon"></i>
                                                            <input type="email" value="@email.EmailAddress" 
                                                                 @onchange="(e) => UpdateEmailAddress(email, e.Value.ToString())" 
                                                                 class="ue-input ue-input-with-icon" 
                                                                 placeholder="Enter email address" />
                                                        </div>
                                                        <div class="ue-input-wrapper">
                                                            <i class="fa-light fa-tag ue-input-icon"></i>
                                                            <input type="text" value="@email.Description" 
                                                                 @onchange="(e) => UpdateEmailDescription(email, e.Value.ToString())" 
                                                                 class="ue-input ue-input-with-icon" 
                                                                 placeholder="Description (e.g. Work, Personal)" />
                                                        </div>
                                                    </div>
                                                    <button type="button" class="ue-button ue-button-outline-danger ue-button-xs" @onclick="() => RemoveEmail(email)">
                                                        <i class="fa-light fa-trash"></i>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="ue-empty-list">
                                            <i class="fa-light fa-inbox-empty"></i>
                                            <p>No additional email addresses added</p>
                                        </div>
                                    }
                                </div>

                                <!-- Additional Phone Numbers Section -->
                                <div class="ue-additional-contacts">
                                    <div class="ue-section-subtitle">
                                        <i class="fa-light fa-phone"></i>
                                        <h4>Additional Phone Numbers</h4>
                                        <button type="button" class="ue-button ue-button-outline ue-button-xs" @onclick="AddPhone">
                                            <i class="fa-light fa-plus"></i>
                                            <span>Add Phone</span>
                                        </button>
                                    </div>

                                    @if (additionalPhones.Any())
                                    {
                                        <div class="ue-phone-list">
                                            @foreach (var phone in additionalPhones)
                                            {
                                                <div class="ue-phone-item">
                                                    <div class="ue-phone-content">
                                                        <div class="ue-input-wrapper">
                                                            <i class="fa-light fa-phone ue-input-icon"></i>
                                                            <input type="tel" value="@phone.Number" 
                                                                 @onchange="(e) => UpdatePhoneNumber(phone, e.Value.ToString())" 
                                                                 class="ue-input ue-input-with-icon" 
                                                                 placeholder="Enter phone number" />
                                                        </div>
                                                        <div class="ue-select-wrapper">
                                                            <i class="fa-light fa-phone-office ue-input-icon"></i>
                                                            <select value="@phone.ContactNumberTypeId.ToString()" 
                                                                   @onchange="(e) => UpdatePhoneType(phone, e.Value.ToString())" 
                                                                   class="ue-select ue-select-with-icon">
                                                                @foreach (var type in contactNumberTypes)
                                                                {
                                                                    <option value="@type.Id">@type.Name</option>
                                                                }
                                                            </select>
                                                            <i class="fa-light fa-chevron-down ue-select-arrow"></i>
                                                        </div>
                                                        <div class="ue-input-wrapper">
                                                            <i class="fa-light fa-tag ue-input-icon"></i>
                                                            <input type="text" value="@phone.Description" 
                                                                 @onchange="(e) => UpdatePhoneDescription(phone, e.Value.ToString())" 
                                                                 class="ue-input ue-input-with-icon" 
                                                                 placeholder="Description" />
                                                        </div>
                                                    </div>
                                                    <button type="button" class="ue-button ue-button-outline-danger ue-button-xs" @onclick="() => RemovePhone(phone)">
                                                        <i class="fa-light fa-trash"></i>
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="ue-empty-list">
                                            <i class="fa-light fa-phone-slash"></i>
                                            <p>No additional phone numbers added</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Access & Security Tab -->
                        <div class="ue-tab-pane @(activeTopTab == "access" ? "ue-active" : "")">
                            <div class="ue-form-section">
                                <div class="ue-section-title">
                                    <i class="fa-light fa-shield-check"></i>
                                    <h3>Access & Security</h3>
                                    <p>Manage user roles, permissions, and security settings</p>
                                </div>

                                <div class="ue-access-subtabs">
                                    <div class="ue-subtabs-header">
                                        @foreach (var tab in accessTabs)
                                        {
                                            <button type="button" class="ue-subtab-button @(activeAccessTab == tab.Id ? "ue-active" : "")" 
                                                  @onclick="() => HandleAccessTabChange(tab.Id)">
                                                <i class="@tab.Icon"></i>
                                                <span>@tab.Title</span>
                                            </button>
                                        }
                                    </div>

                                    <div class="ue-subtab-content">
                                        <!-- System Role Tab -->
                                        <div class="ue-subtab-pane @(activeAccessTab == "roles" ? "ue-active" : "")">
                                            <div class="ue-card">
                                                <div class="ue-card-header">
                                                    <i class="fa-light fa-user-shield"></i>
                                                    <h4>System Role</h4>
                                                </div>
                                                <div class="ue-card-body">
                                                    <div class="ue-form-group">
                                                        <label for="systemRole">Base System Role</label>
                                                        <div class="ue-select-wrapper">
                                                            <i class="fa-light fa-shield-check ue-input-icon"></i>
                                                            <select id="systemRole" class="ue-select ue-select-with-icon" 
                                                                   value="@selectedRole" 
                                                                   @onchange="(e) => selectedRole = e.Value.ToString()" 
                                                                   disabled="@(!canChangeRole)">
                                                                @foreach (var role in availableRoles)
                                                                {
                                                                    <option value="@role">@PermissionFormat.GetRoleDisplayName((SystemRole)Enum.Parse(typeof(SystemRole), role))</option>
                                                                }
                                                            </select>
                                                            <i class="fa-light fa-chevron-down ue-select-arrow"></i>
                                                        </div>
                                                        <div class="ue-field-info">
                                                            <i class="fa-light fa-info-circle"></i>
                                                            <span>This defines the user's base system role and associated permissions</span>
                                                        </div>
                                                    </div>

                                                    <div class="ue-role-description">
                                                        @if (!string.IsNullOrEmpty(selectedRole) && Enum.TryParse<SystemRole>(selectedRole, out var selectedRoleEnum))
                                                        {
                                                            <div class="ue-role-icon">
                                                                <i class="@PermissionFormat.GetRoleIcon(selectedRoleEnum)"></i>
                                                            </div>
                                                            <div class="ue-role-details">
                                                                <h5>@PermissionFormat.GetRoleDisplayName(selectedRoleEnum)</h5>
                                                                <p>@PermissionFormat.GetRoleDescription(selectedRoleEnum)</p>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="ue-card">
                                                <div class="ue-card-header">
                                                    <i class="fa-light fa-building"></i>
                                                    <h4>Company Access</h4>
                                                </div>
                                                <div class="ue-card-body">
                                                    <div class="ue-form-group">
                                                        <label for="company">Company</label>
                                                        <div class="ue-select-wrapper">
                                                            <i class="fa-light fa-building ue-input-icon"></i>
                                                            <select id="company" class="ue-select ue-select-with-icon" 
                                                                   value="@(userModel.CompanyId.HasValue ? userModel.CompanyId.Value.ToString() : "")" 
                                                                   @onchange="(e) => HandleCompanyChange(e.Value.ToString())" 
                                                                   disabled="@(!canAssignAnyCompany)">
                                                                <option value="">-- None --</option>
                                                                @if (availableCompanies != null)
                                                                {
                                                                    @foreach (var company in availableCompanies.OrderBy(c => c.Name))
                                                                    {
                                                                        <option value="@company.Id">@company.Name</option>
                                                                    }
                                                                }
                                                            </select>
                                                            <i class="fa-light fa-chevron-down ue-select-arrow"></i>
                                                        </div>
                                                        <div class="ue-field-info">
                                                            <i class="fa-light fa-info-circle"></i>
                                                            <span>Assign the user to a company to grant access to company data</span>
                                                        </div>
                                                    </div>

                                                    <div class="ue-form-group">
                                                        <label for="branch">Branch</label>
                                                        <div class="ue-select-wrapper">
                                                            <i class="fa-light fa-code-branch ue-input-icon"></i>
                                                            <select id="branch" class="ue-select ue-select-with-icon" 
                                                                   value="@(userModel.BranchId.HasValue ? userModel.BranchId.Value.ToString() : "")" 
                                                                   @onchange="(e) => HandleBranchChange(e.Value.ToString())" 
                                                                   disabled="@(!canAssignBranch || !userModel.CompanyId.HasValue || availableBranches.Count == 0)">
                                                                <option value="">-- None --</option>
                                                                @foreach (var branch in availableBranches.OrderBy(b => b.Name))
                                                                {
                                                                    <option value="@branch.Id">@branch.Name</option>
                                                                }
                                                            </select>
                                                            <i class="fa-light fa-chevron-down ue-select-arrow"></i>
                                                        </div>
                                                        <div class="ue-field-info">
                                                            <i class="fa-light fa-info-circle"></i>
                                                            <span>Assign the user to a specific branch within the company</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            @if (isNewUser)
                                            {
                                                <div class="ue-card ue-card-highlight">
                                                    <div class="ue-card-body">
                                                        <div class="ue-info-box">
                                                            <div class="ue-info-icon"><i class="fa-light fa-info-circle"></i></div>
                                                            <div class="ue-info-content">
                                                                <h5>Setting Up a New User</h5>
                                                                <p>After creating this user, you'll be able to manage specific permissions that will determine exactly what they can access in the system.</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>

                                        <!-- Permissions Tab -->
                                        <div class="ue-subtab-pane @(activeAccessTab == "permissions" ? "ue-active" : "")">
                                            @if (!isNewUser)
                                            {
                                                <div class="ue-permissions-container">
                                                    <UserPermissionsPanel @ref="permissionsPanel" UserId="@UserId" OnSaved="HandlePermissionsSaved" />
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="ue-card ue-card-highlight">
                                                    <div class="ue-card-body">
                                                        <div class="ue-info-box">
                                                            <div class="ue-info-icon"><i class="fa-light fa-info-circle"></i></div>
                                                            <div class="ue-info-content">
                                                                <h5>Permissions Management</h5>
                                                                <p>You'll be able to manage specific permissions after creating the user. Permission management allows you to grant or deny specific capabilities beyond their base role.</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>

                                        <!-- Security Tab -->
                                        <div class="ue-subtab-pane @(activeAccessTab == "security" ? "ue-active" : "")">
                                            @if (!isNewUser)
                                            {
                                                <div class="ue-card">
                                                    <div class="ue-card-header">
                                                        <i class="fa-light fa-key"></i>
                                                        <h4>Password Management</h4>
                                                    </div>
                                                    <div class="ue-card-body">
                                                        <div class="ue-password-options">
                                                            <button type="button" class="ue-button ue-button-primary" @onclick="ShowResetPasswordConfirmation">
                                                                <i class="fa-light fa-key"></i>
                                                                <span>Reset Password</span>
                                                            </button>

                                                            <div class="ue-form-group ue-mt-3">
                                                                <div class="ue-switch-container">
                                                                    <label class="ue-switch">
                                                                        <input type="checkbox" @bind="userModel.RequireChangePasswordOnLogin" />
                                                                        <span class="ue-switch-slider"></span>
                                                                    </label>
                                                                    <div class="ue-switch-content">
                                                                        <span class="ue-switch-label">Require password change on next login</span>
                                                                        <span class="ue-switch-description">User will be prompted to change their password when they next log in</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="ue-card">
                                                    <div class="ue-card-header">
                                                        <i class="fa-light fa-shield-check"></i>
                                                        <h4>Account Security</h4>
                                                    </div>
                                                    <div class="ue-card-body">
                                                        <div class="ue-form-row">
                                                            <div class="ue-form-group">
                                                                <div class="ue-switch-container">
                                                                    <label class="ue-switch">
                                                                        <input type="checkbox" @bind="userModel.EmailConfirmed" />
                                                                        <span class="ue-switch-slider"></span>
                                                                    </label>
                                                                    <div class="ue-switch-content">
                                                                        <span class="ue-switch-label">Email Confirmed</span>
                                                                        <span class="ue-switch-description">Toggle whether the user's email address is confirmed</span>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                            <div class="ue-form-group">
                                                                <div class="ue-switch-container">
                                                                    <label class="ue-switch">
                                                                        <input type="checkbox" @bind="userModel.IsTwoFactorRequired" />
                                                                        <span class="ue-switch-slider"></span>
                                                                    </label>
                                                                    <div class="ue-switch-content">
                                                                        <span class="ue-switch-label">Two-Factor Authentication</span>
                                                                        <span class="ue-switch-description">Toggle whether two-factor authentication is required for this user</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        @if (userModel.IsTwoFactorRequired)
                                                        {
                                                            <div class="ue-form-group">
                                                                <label for="twoFactorMethod">Preferred Two-Factor Method</label>
                                                                <div class="ue-select-wrapper">
                                                                    <i class="fa-light fa-mobile ue-input-icon"></i>
                                                                    <select id="twoFactorMethod" class="ue-select ue-select-with-icon" 
                                                                           value="@userModel.PreferredTwoFactorMethod" 
                                                                           @onchange="(e) => userModel.PreferredTwoFactorMethod = e.Value.ToString()">
                                                                        <option value="Email">Email</option>
                                                                        <option value="SMS">SMS</option>
                                                                        <option value="Authenticator">Authenticator App</option>
                                                                    </select>
                                                                    <i class="fa-light fa-chevron-down ue-select-arrow"></i>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>

                                                <div class="ue-card">
                                                    <div class="ue-card-header">
                                                        <i class="fa-light fa-clock-rotate-left"></i>
                                                        <h4>Account History</h4>
                                                    </div>
                                                    <div class="ue-card-body">
                                                        <div class="ue-account-history">
                                                            <div class="ue-history-item">
                                                                <div class="ue-history-label">Created:</div>
                                                                <div class="ue-history-value">
                                                                    @(userModel.CreatedDate?.ToString("dd MMM yyyy HH:mm") ?? "Unknown")
                                                                    @if (!string.IsNullOrEmpty(userModel.CreatedBy))
                                                                    {
                                                                        <span>by @userModel.CreatedBy</span>
                                                                    }
                                                                </div>
                                                            </div>
                                                            @if (userModel.LastLoginDate.HasValue)
                                                            {
                                                                <div class="ue-history-item">
                                                                    <div class="ue-history-label">Last Login:</div>
                                                                    <div class="ue-history-value">
                                                                        @userModel.LastLoginDate?.ToString("dd MMM yyyy HH:mm")
                                                                        @if (!string.IsNullOrEmpty(userModel.LastLoginIpAddress))
                                                                        {
                                                                            <span>from @userModel.LastLoginIpAddress</span>
                                                                        }
                                                                    </div>
                                                                </div>
                                                            }
                                                            @if (userModel.UpdatedDate.HasValue)
                                                            {
                                                                <div class="ue-history-item">
                                                                    <div class="ue-history-label">Last Updated:</div>
                                                                    <div class="ue-history-value">
                                                                        @userModel.UpdatedDate?.ToString("dd MMM yyyy HH:mm")
                                                                        @if (!string.IsNullOrEmpty(userModel.UpdatedBy))
                                                                        {
                                                                            <span>by @userModel.UpdatedBy</span>
                                                                        }
                                                                    </div>
                                                                </div>
                                                            }
                                                            @if (userModel.LoginFailureCount > 0)
                                                            {
                                                                <div class="ue-history-item">
                                                                    <div class="ue-history-label">Failed Logins:</div>
                                                                    <div class="ue-history-value">
                                                                        @userModel.LoginFailureCount
                                                                        @if (userModel.LastLoginFailureDate.HasValue)
                                                                        {
                                                                            <span>(last attempt: @userModel.LastLoginFailureDate?.ToString("dd MMM yyyy HH:mm"))</span>
                                                                        }
                                                                    </div>
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="ue-card ue-card-highlight ue-password-card">
                                                    <div class="ue-card-header">
                                                        <i class="fa-light fa-key"></i>
                                                        <h4>Set User Password</h4>
                                                    </div>
                                                    <div class="ue-card-body">
                                                        <div class="ue-password-form">
                                                            <div class="ue-form-row">
                                                                <div class="ue-form-group">
                                                                    <label for="password">Password</label>
                                                                    <div class="ue-input-wrapper">
                                                                        <i class="fa-light fa-lock ue-input-icon"></i>
                                                                        <input type="password" id="password" 
                                                                              value="@password" 
                                                                              @onchange="(e) => password = e.Value.ToString()" 
                                                                              class="ue-input ue-input-with-icon" 
                                                                              placeholder="Enter password" />
                                                                    </div>
                                                                    @if (!string.IsNullOrEmpty(passwordError))
                                                                    {
                                                                        <div class="ue-validation-message">@passwordError</div>
                                                                    }
                                                                </div>

                                                                <div class="ue-form-group">
                                                                    <label for="confirmPassword">Confirm Password</label>
                                                                    <div class="ue-input-wrapper">
                                                                        <i class="fa-light fa-lock ue-input-icon"></i>
                                                                        <input type="password" id="confirmPassword" 
                                                                              value="@confirmPassword" 
                                                                              @onchange="(e) => confirmPassword = e.Value.ToString()" 
                                                                              class="ue-input ue-input-with-icon" 
                                                                              placeholder="Confirm password" />
                                                                    </div>
                                                                    @if (!string.IsNullOrEmpty(confirmPasswordError))
                                                                    {
                                                                        <div class="ue-validation-message">@confirmPasswordError</div>
                                                                    }
                                                                </div>
                                                            </div>

                                                            <div class="ue-form-group">
                                                                <div class="ue-switch-container">
                                                                    <label class="ue-switch">
                                                                        <input type="checkbox" @bind="requirePasswordChange" />
                                                                        <span class="ue-switch-slider"></span>
                                                                    </label>
                                                                    <div class="ue-switch-content">
                                                                        <span class="ue-switch-label">Require password change on first login</span>
                                                                        <span class="ue-switch-description">User will be prompted to change their password when they first log in</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>

                                        <!-- Preferences Tab -->
                                        <div class="ue-subtab-pane @(activeAccessTab == "preferences" ? "ue-active" : "")">
                                            <div class="ue-card">
                                                <div class="ue-card-header">
                                                    <i class="fa-light fa-sliders"></i>
                                                    <h4>User Preferences</h4>
                                                </div>
                                                <div class="ue-card-body">
                                                    <div class="ue-form-group">
                                                        <label for="theme">Theme Preference</label>
                                                        <div class="ue-select-wrapper">
                                                            <i class="fa-light fa-palette ue-input-icon"></i>
                                                            <select id="theme" class="ue-select ue-select-with-icon" 
                                                                   value="@selectedTheme" 
                                                                   @onchange="(e) => selectedTheme = e.Value.ToString()">
                                                                <option value="system">System Default</option>
                                                                <option value="light">Light Mode</option>
                                                                <option value="dark">Dark Mode</option>
                                                                @foreach (var theme in customThemes)
                                                                {
                                                                    <option value="@theme.Id">@theme.Name</option>
                                                                }
                                                            </select>
                                                            <i class="fa-light fa-chevron-down ue-select-arrow"></i>
                                                        </div>
                                                    </div>

                                                    <div class="ue-notification-preferences">
                                                        <h5>Notification Preferences</h5>
                                                        
                                                        <div class="ue-form-group">
                                                            <div class="ue-switch-container">
                                                                <label class="ue-switch">
                                                                    <input type="checkbox" @bind="emailNotifications" />
                                                                    <span class="ue-switch-slider"></span>
                                                                </label>
                                                                <div class="ue-switch-content">
                                                                    <span class="ue-switch-label">Email notifications</span>
                                                                    <span class="ue-switch-description">Receive notifications via email</span>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="ue-form-group">
                                                            <div class="ue-switch-container">
                                                                <label class="ue-switch">
                                                                    <input type="checkbox" @bind="smsNotifications" />
                                                                    <span class="ue-switch-slider"></span>
                                                                </label>
                                                                <div class="ue-switch-content">
                                                                    <span class="ue-switch-label">SMS notifications</span>
                                                                    <span class="ue-switch-description">Receive notifications via SMS (requires valid phone number)</span>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="ue-form-group">
                                                            <div class="ue-switch-container">
                                                                <label class="ue-switch">
                                                                    <input type="checkbox" @bind="webNotifications" />
                                                                    <span class="ue-switch-slider"></span>
                                                                </label>
                                                                <div class="ue-switch-content">
                                                                    <span class="ue-switch-label">Web notifications</span>
                                                                    <span class="ue-switch-description">Receive notifications in the web interface</span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </div>

    <div class="ue-modal-footer">
        <button type="button" class="ue-button ue-button-outline" @onclick="OnClose">Cancel</button>
        <button type="button" class="ue-button ue-button-primary" @onclick="SaveUser" disabled="@(!hasAccessPermission || !canEditThisUser)">
            @(isNewUser ? "Create User" : "Save Changes")
        </button>
    </div>
</div>

@if (showResetPasswordModal)
{
    <div class="ue-modal-backdrop" @onclick="() => showResetPasswordModal = false"></div>
    <div class="ue-reset-modal">
        <div class="ue-modal-header">
            <div class="ue-modal-title">
                <i class="fa-light fa-key"></i>
                <span>Reset Password</span>
            </div>
            <button class="ue-close-button" @onclick="() => showResetPasswordModal = false">
                <i class="fa-light fa-times"></i>
            </button>
        </div>
        <div class="ue-modal-body">
            <div class="ue-message-panel ue-message-warning">
                <div class="ue-message-icon"><i class="fa-light fa-exclamation-triangle"></i></div>
                <div class="ue-message-content">
                    <p>You are about to reset the password for <strong>@GetUserDisplayName()</strong>.</p>
                    <p>The user will receive a password reset link via email.</p>
                </div>
            </div>

            <div class="ue-form-group">
                <div class="ue-switch-container">
                    <label class="ue-switch">
                        <input type="checkbox" @bind="forcePasswordChange" />
                        <span class="ue-switch-slider"></span>
                    </label>
                    <div class="ue-switch-content">
                        <span class="ue-switch-label">Force password change on next login</span>
                        <span class="ue-switch-description">The user will be required to change their password when they next log in</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="ue-modal-footer">
            <button type="button" class="ue-button ue-button-outline" @onclick="() => showResetPasswordModal = false">Cancel</button>
            <button type="button" class="ue-button ue-button-primary" @onclick="ResetPassword">Reset Password</button>
        </div>
    </div>
}


@code {
    [Parameter] public string? UserId { get; set; }
    [Parameter] public List<Company>? Companies { get; set; }
    [Parameter] public IEnumerable<UserStatusType>? UserStatusTypes { get; set; }
    [Parameter] public int SelectedBranchId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }

    private ApplicationUser userModel = new ApplicationUser();
    private bool isLoading = true;
    private bool isNewUser => string.IsNullOrEmpty(UserId);
    private string activeTopTab = "basic";
    private string activeAccessTab = "roles";
    private List<Email> additionalEmails = new List<Email>();
    private List<ContactNumber> additionalPhones = new List<ContactNumber>();
    private List<Branch> availableBranches = new List<Branch>();
    private List<Company> availableCompanies = new List<Company>();
    private List<ContactNumberType> contactNumberTypes = new List<ContactNumberType>();
    private List<ThemeType> customThemes = new List<ThemeType>();

    // Permission flags
    private bool hasAccessPermission = false;
    private bool canEditThisUser = true;
    private bool canAssignAnyCompany = false;
    private bool canAssignBranch = false;
    private bool canChangeRole = true;

    // Password fields
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string passwordError = string.Empty;
    private string confirmPasswordError = string.Empty;
    private bool requirePasswordChange = true; // For new users

    // Dropdown selections
    private string selectedRole = SystemRole.PropertyManager.ToString();
    private string initialRole = string.Empty; // To track if role has changed
    private int? initialCompanyId;
    private int? initialBranchId;
    private string selectedTheme = "system";
    private bool emailNotifications = true;
    private bool smsNotifications = false;
    private bool webNotifications = true;

    // Current user info
    private string currentUserId = string.Empty;
    private SystemRole? currentUserRole;
    private int? currentUserCompanyId;
    private int? currentUserBranchId;
    private List<string> availableRoles = new List<string>();
    private bool hasManageUsersPermission = false;
    private bool hasManageRolesPermission = false;

    // Reset password
    private bool showResetPasswordModal = false;
    private bool forcePasswordChange = true;

    // File upload
    private IBrowserFile? profileImageFile;
    private bool isUploadingProfileImage = false;

    // Top-level tab configuration
    private List<RVTab.RVTabItem> topLevelTabs = new List<RVTab.RVTabItem>();

    // Access tab configuration
    private List<RVTab.RVTabItem> accessTabs = new List<RVTab.RVTabItem>();

    // Reference to the permissions panel
    private UserPermissionsPanel permissionsPanel;

    // Track whether permissions have been modified
    private bool permissionsModified = false;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserInfo();

        // Check if user has permission to access this page
        if (!hasManageUsersPermission)
        {
            hasAccessPermission = false;
            isLoading = false;
            return;
        }

        hasAccessPermission = true;

        await LoadContactNumberTypes();
        await LoadCustomThemes();
        await LoadAvailableCompaniesAndBranches();
        await LoadAvailableRoles();
        ConfigureTabs();
        await LoadData();
    }

    private async Task GetCurrentUserInfo()
    {
        try
        {
            // Get the current user's ID and role
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                // Get user ID
                var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
                if (userIdClaim != null)
                {
                    currentUserId = userIdClaim.Value;
                }

                // Get current user's permissions
                var userPermissions = await PermissionService.GetUserPermissions(currentUserId);
                hasManageUsersPermission = userPermissions.Contains("settings.users");
                hasManageRolesPermission = userPermissions.Contains("settings.permissions");

                // Get current user's role and company/branch
                using var dbContext = await DbContextFactory.CreateDbContextAsync();
                var currentUser = await dbContext.Users.FirstOrDefaultAsync(u => u.Id == currentUserId);
                if (currentUser != null)
                {
                    if (currentUser.Role.HasValue)
                    {
                        currentUserRole = currentUser.Role.Value;
                    }

                    currentUserCompanyId = currentUser.CompanyId;
                    currentUserBranchId = currentUser.BranchId;
                }
            }
        }
        catch (Exception ex)
        {
            // If there's an error, we'll fall back to default permissions
            ToastService.ShowError($"Error fetching current user: {ex.Message}", "Error");
            currentUserRole = SystemRole.PropertyManager;
            currentUserCompanyId = null;
            currentUserBranchId = null;
            hasManageUsersPermission = false;
            hasManageRolesPermission = false;
        }
    }

    private async Task LoadContactNumberTypes()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            contactNumberTypes = await dbContext.ContactNumberTypes
                .Where(t => t.IsActive)
                .OrderBy(t => t.DisplayOrder)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading contact number types: {ex.Message}", "Error");
            contactNumberTypes = new List<ContactNumberType>();
        }
    }

    private async Task LoadCustomThemes()
    {
        try
        {
            using var dbContext = await DbContextFactory.CreateDbContextAsync();
            customThemes = await dbContext.ThemeTypes
                .Where(t => t.IsActive)
                .OrderBy(t => t.DisplayOrder)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading themes: {ex.Message}", "Error");
            customThemes = new List<ThemeType>();
        }
    }

    private async Task LoadAvailableCompaniesAndBranches()
    {
        if (Companies == null)
        {
            availableCompanies = new List<Company>();
            return;
        }

        try
        {
            // Filter companies based on current user's role and company
            if (currentUserRole == SystemRole.SystemAdministrator)
            {
                // System admin can see all companies
                availableCompanies = Companies.ToList();
                canAssignAnyCompany = true;
                canAssignBranch = true;
            }
            else if (currentUserRole == SystemRole.CompanyAdministrator && currentUserCompanyId.HasValue)
            {
                // Company admin can only see their own company
                availableCompanies = Companies
                    .Where(c => c.Id == currentUserCompanyId.Value)
                    .ToList();
                canAssignAnyCompany = false; // Can't change company, only displayed for information
                canAssignBranch = true; // Can change branch within their company
            }
            else if (currentUserRole == SystemRole.BranchManager && currentUserCompanyId.HasValue)
            {
                // Branch manager can only see their own company
                availableCompanies = Companies
                    .Where(c => c.Id == currentUserCompanyId.Value)
                    .ToList();
                canAssignAnyCompany = false;
                canAssignBranch = false; // Can only assign to their own branch, handled in branch selection
            }
            else
            {
                // Other roles shouldn't be able to access this page
                availableCompanies = new List<Company>();
                canAssignAnyCompany = false;
                canAssignBranch = false;
            }

            // If editing existing user and we're a branch manager, preload the branches
            if (!isNewUser && currentUserRole == SystemRole.BranchManager && currentUserCompanyId.HasValue)
            {
                // Load user's branch options (restricted to branch manager's branch)
                var response = await UserService.GetBranchesByCompany(currentUserCompanyId.Value);
                if (response.ResponseInfo.Success)
                {
                    var allBranches = (List<Branch>)response.Response;
                    // Branch manager can only see their branch
                    availableBranches = allBranches
                        .Where(b => currentUserBranchId.HasValue && b.Id == currentUserBranchId.Value)
                        .ToList();
                }
            }

            // If a specific branch was selected through the parameter, ensure it's loaded
            if (SelectedBranchId > 0 && !isNewUser)
            {
                var branchResponse = await UserService.GetBranchById(SelectedBranchId);
                if (branchResponse.ResponseInfo.Success)
                {
                    var selectedBranch = (Branch)branchResponse.Response;

                    // Check if branch is already in the list
                    if (!availableBranches.Any(b => b.Id == SelectedBranchId))
                    {
                        // Add to available branches if user has access
                        var companyResponse = await UserService.GetCompanyById(selectedBranch.CompanyId);
                        if (companyResponse.ResponseInfo.Success)
                        {
                            var company = (Company)companyResponse.Response;

                            // Add branch only if it belongs to an available company
                            if (availableCompanies.Any(c => c.Id == company.Id))
                            {
                                selectedBranch.Company = company;
                                availableBranches.Add(selectedBranch);
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load companies: {ex.Message}", "Error");
        }
    }

    private async Task LoadAvailableRoles()
    {
        // Default to only showing property manager role
        availableRoles = new List<string> { SystemRole.PropertyManager.ToString() };

        if (currentUserRole.HasValue && hasManageUsersPermission)
        {
            switch (currentUserRole.Value)
            {
                case SystemRole.SystemAdministrator:
                    // System admin can assign all roles
                    availableRoles = Enum.GetNames(typeof(SystemRole)).ToList();
                    break;

                case SystemRole.CompanyAdministrator:
                    // Company admin can assign roles below their level
                    availableRoles = new List<string>
                    {
                        SystemRole.BranchManager.ToString(),
                        SystemRole.PropertyManager.ToString(),
                        SystemRole.FinancialOfficer.ToString(),
                        SystemRole.TenantOfficer.ToString(),
                        SystemRole.ReportsViewer.ToString()
                    };
                    break;

                case SystemRole.BranchManager:
                    // Branch manager can assign roles below their level
                    availableRoles = new List<string>
                    {
                        SystemRole.PropertyManager.ToString(),
                        SystemRole.FinancialOfficer.ToString(),
                        SystemRole.TenantOfficer.ToString(),
                        SystemRole.ReportsViewer.ToString()
                    };
                    break;

                case SystemRole.PropertyManager:
                    // Property manager can only assign tenant officer and reports viewer
                    availableRoles = new List<string>
                    {
                        SystemRole.TenantOfficer.ToString(),
                        SystemRole.ReportsViewer.ToString()
                    };
                    break;

                default:
                    // Other roles can only assign reports viewer
                    availableRoles = new List<string>
                    {
                        SystemRole.ReportsViewer.ToString()
                    };
                    break;
            }
        }
    }

    private void ConfigureTabs()
    {
        // Configure top-level tabs
        topLevelTabs = new List<RVTab.RVTabItem>
        {
            new RVTab.RVTabItem
            {
                Id = "basic",
                Title = "Basic Info",
                Icon = "fa-light fa-user",
                IsActive = activeTopTab == "basic"
            },
            new RVTab.RVTabItem
            {
                Id = "contact",
                Title = "Contact Details",
                Icon = "fa-light fa-address-card",
                IsActive = activeTopTab == "contact"
            },
            new RVTab.RVTabItem
            {
                Id = "access",
                Title = "Access & Security",
                Icon = "fa-light fa-shield-check",
                IsActive = activeTopTab == "access"
            }
        };

        // Configure access tabs
        accessTabs = new List<RVTab.RVTabItem>
        {
            new RVTab.RVTabItem
            {
                Id = "roles",
                Title = "System Role",
                Icon = "fa-light fa-user-shield",
                IsActive = activeAccessTab == "roles"
            },
            new RVTab.RVTabItem
            {
                Id = "permissions",
                Title = "Permissions",
                Icon = "fa-light fa-lock",
                IsActive = activeAccessTab == "permissions"
            },
            new RVTab.RVTabItem
            {
                Id = "security",
                Title = "Security",
                Icon = "fa-light fa-shield-alt",
                IsActive = activeAccessTab == "security"
            },
            new RVTab.RVTabItem
            {
                Id = "preferences",
                Title = "Preferences",
                Icon = "fa-light fa-sliders",
                IsActive = activeAccessTab == "preferences"
            }
        };
    }

    private void HandleTopLevelTabChange(string tabId)
    {
        activeTopTab = tabId;
        StateHasChanged();
    }

    private void HandleAccessTabChange(string tabId)
    {
        activeAccessTab = tabId;
        StateHasChanged();
    }

    private void HandlePermissionsSaved()
    {
        permissionsModified = true;
        ToastService.ShowSuccess("User permissions updated successfully", "Success");
    }

    private void HandleStatusChange(string value)
    {
        if (int.TryParse(value, out var statusId))
        {
            userModel.StatusId = statusId;
        }
        else
        {
            userModel.StatusId = null;
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;

            if (!isNewUser)
            {
                // Load user
                var response = await UserService.GetUserById(UserId!);
                if (response.ResponseInfo.Success)
                {
                    userModel = (ApplicationUser)response.Response;
                    selectedRole = userModel.Role?.ToString() ?? SystemRole.PropertyManager.ToString();
                    initialRole = selectedRole; // Store initial role for comparison
                    initialCompanyId = userModel.CompanyId;
                    initialBranchId = userModel.BranchId;

                    // Load user preferences
                    if (!string.IsNullOrEmpty(userModel.UserPreferences))
                    {
                        try
                        {
                            var preferences = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(userModel.UserPreferences);
                            if (preferences != null)
                            {
                                if (preferences.TryGetValue("theme", out var theme))
                                {
                                    selectedTheme = theme.ToString();
                                }

                                if (preferences.TryGetValue("notifications", out var notificationsObj))
                                {
                                    var notifications = notificationsObj as System.Text.Json.JsonElement?;
                                    if (notifications.HasValue)
                                    {
                                        emailNotifications = notifications.Value.TryGetProperty("email", out var email) && email.GetBoolean();
                                        smsNotifications = notifications.Value.TryGetProperty("sms", out var sms) && sms.GetBoolean();
                                        webNotifications = notifications.Value.TryGetProperty("web", out var web) && web.GetBoolean();
                                    }
                                }
                            }
                        }
                        catch
                        {
                            // If preferences can't be parsed, use defaults
                        }
                    }

                    // Check if current user has permission to edit this user
                    if (!CanEditUser(userModel))
                    {
                        canEditThisUser = false;
                        isLoading = false;
                        return;
                    }

                    // Verify the current user has permission to edit this user's role
                    if (!CanAssignRole(selectedRole))
                    {
                        // If current user can't assign the existing role, make the dropdown read-only
                        canChangeRole = false;
                    }

                    // Load additional emails and phones
                    if (userModel.EmailAddresses != null)
                    {
                        additionalEmails = userModel.EmailAddresses
                            .Where(e => !e.IsPrimary)
                            .ToList();
                    }

                    if (userModel.ContactNumbers != null)
                    {
                        additionalPhones = userModel.ContactNumbers
                            .Where(c => !c.IsPrimary)
                            .ToList();
                    }

                    // If user being edited is in a different company than what the current user can access
                    if (userModel.CompanyId.HasValue &&
                        !availableCompanies.Any(c => c.Id == userModel.CompanyId.Value))
                    {
                        // Add the user's company to the available companies list for display
                        // But don't allow changing it (handled by canAssignAnyCompany flag)
                        using var dbContext = await DbContextFactory.CreateDbContextAsync();
                        var userCompany = await dbContext.Companies.FirstOrDefaultAsync(c => c.Id == userModel.CompanyId.Value);
                        if (userCompany != null)
                        {
                            availableCompanies.Add(userCompany);
                        }
                    }

                    // Load branches appropriate to the user's company
                    if (userModel.CompanyId.HasValue)
                    {
                        await LoadBranchesForUser(userModel.CompanyId.Value, userModel.BranchId);
                    }
                }
                else
                {
                    ToastService.ShowError(response.ResponseInfo.Message, "Error");
                    if (OnClose.HasDelegate)
                        await OnClose.InvokeAsync();
                    return;
                }
            }
            else
            {
                // New user
                userModel = new ApplicationUser
                    {
                        IsActive = true,
                        CreatedDate = DateTime.Now,
                        CreatedBy = currentUserId,
                        StatusId = UserStatusTypes?.FirstOrDefault(s => s.Name == "Active")?.Id
                    };

                // Set default role based on available roles
                if (availableRoles.Any())
                {
                    selectedRole = availableRoles.First();
                    if (Enum.TryParse<SystemRole>(selectedRole, out var role))
                    {
                        userModel.Role = role;
                    }
                }

                // For new users, set the company to current user's company if the current user
                // is not a system admin
                if (currentUserRole != SystemRole.SystemAdministrator && currentUserCompanyId.HasValue)
                {
                    userModel.CompanyId = currentUserCompanyId;

                    // For branch managers, also set the branch
                    if (currentUserRole == SystemRole.BranchManager && currentUserBranchId.HasValue)
                    {
                        userModel.BranchId = currentUserBranchId;
                    }
                    // Use the selected branch ID if provided
                    else if (SelectedBranchId > 0)
                    {
                        // Verify the branch belongs to the company
                        var branchResponse = await UserService.GetBranchById(SelectedBranchId);
                        if (branchResponse.ResponseInfo.Success)
                        {
                            var branch = (Branch)branchResponse.Response;
                            if (branch.CompanyId == userModel.CompanyId)
                            {
                                userModel.BranchId = SelectedBranchId;
                            }
                        }
                    }

                    // Load available branches
                    await LoadBranchesForUser(userModel.CompanyId.Value, userModel.BranchId);
                }
                else if (currentUserRole == SystemRole.SystemAdministrator && SelectedBranchId > 0)
                {
                    // For system admin, if a branch was specified, load its company and set both
                    var branchResponse = await UserService.GetBranchById(SelectedBranchId);
                    if (branchResponse.ResponseInfo.Success)
                    {
                        var branch = (Branch)branchResponse.Response;
                        userModel.CompanyId = branch.CompanyId;
                        userModel.BranchId = SelectedBranchId;

                        // Load available branches for this company
                        await LoadBranchesForUser(branch.CompanyId, SelectedBranchId);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load user: {ex.Message}", "Error");
            if (OnClose.HasDelegate)
                await OnClose.InvokeAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool CanEditUser(ApplicationUser user)
    {
        if (!hasManageUsersPermission)
            return false;

        if (currentUserRole == SystemRole.SystemAdministrator)
            return true;

        // Can't edit users with higher or equal roles
        if (user.Role.HasValue)
        {
            // Company admins can't edit system admins
            if (currentUserRole == SystemRole.CompanyAdministrator &&
                user.Role.Value == SystemRole.SystemAdministrator)
                return false;

            // Branch managers can't edit system admins or company admins
            if (currentUserRole == SystemRole.BranchManager &&
                (user.Role.Value == SystemRole.SystemAdministrator || user.Role.Value == SystemRole.CompanyAdministrator))
                return false;
        }

        // Check company/branch restrictions
        if (currentUserRole == SystemRole.CompanyAdministrator)
        {
            // Company admin can only edit users in their company
            return user.CompanyId.HasValue && user.CompanyId.Value == currentUserCompanyId;
        }
        else if (currentUserRole == SystemRole.BranchManager)
        {
            // Branch manager can only edit users in their branch
            return user.CompanyId.HasValue && user.CompanyId.Value == currentUserCompanyId &&
                   user.BranchId.HasValue && user.BranchId.Value == currentUserBranchId;
        }

        return true;
    }

    private bool CanAssignRole(string roleName)
    {
        if (!currentUserRole.HasValue || !hasManageUsersPermission)
            return false;

        if (Enum.TryParse<SystemRole>(roleName, out var targetRole))
        {
            // Determine if current user can assign this role based on hierarchy
            switch (currentUserRole.Value)
            {
                case SystemRole.SystemAdministrator:
                    // System admin can assign any role
                    return true;

                case SystemRole.CompanyAdministrator:
                    // Company admin can't assign system admin roles
                    return targetRole != SystemRole.SystemAdministrator;

                case SystemRole.BranchManager:
                    // Branch manager can't assign system admin or company admin roles
                    return targetRole != SystemRole.SystemAdministrator &&
                           targetRole != SystemRole.CompanyAdministrator;

                default:
                    // Other roles can only assign property manager and reports viewer
                    return targetRole == SystemRole.PropertyManager ||
                           targetRole == SystemRole.ReportsViewer;
            }
        }

        return false;
    }

    private async Task LoadBranchesForUser(int companyId, int? userBranchId)
    {
        try
        {
            // Load all branches for the company
            var response = await UserService.GetBranchesByCompany(companyId);
            if (response.ResponseInfo.Success)
            {
                var allBranches = (List<Branch>)response.Response;

                if (currentUserRole == SystemRole.SystemAdministrator || currentUserRole == SystemRole.CompanyAdministrator)
                {
                    // System admin and company admin can see all branches in the company
                    availableBranches = allBranches;
                }
                else if (currentUserRole == SystemRole.BranchManager && currentUserBranchId.HasValue)
                {
                    // Branch manager can only see their branch
                    availableBranches = allBranches
                        .Where(b => b.Id == currentUserBranchId.Value)
                        .ToList();

                    // If the user has a branch that's not in the list, add it just for display
                    if (userBranchId.HasValue && userBranchId.Value != currentUserBranchId.Value)
                    {
                        var userBranch = allBranches.FirstOrDefault(b => b.Id == userBranchId.Value);
                        if (userBranch != null)
                        {
                            // Add the branch but user can't change to it
                            availableBranches.Add(userBranch);
                        }
                    }
                }
                else
                {
                    availableBranches = new List<Branch>();
                }

                // If a specific branch is selected but not in the available branches, add it
                if (SelectedBranchId > 0 && !availableBranches.Any(b => b.Id == SelectedBranchId))
                {
                    var selectedBranch = allBranches.FirstOrDefault(b => b.Id == SelectedBranchId);
                    if (selectedBranch != null && selectedBranch.CompanyId == companyId)
                    {
                        availableBranches.Add(selectedBranch);
                    }
                }
            }
            else
            {
                availableBranches = new List<Branch>();
            }
        }
        catch
        {
            availableBranches = new List<Branch>();
        }
    }

    private void AddEmail()
    {
        additionalEmails.Add(new Email
            {
                IsPrimary = false,
                IsActive = true,
                RelatedEntityType = "User",
                CreatedOn = DateTime.Now
            });
    }

    private void RemoveEmail(Email email)
    {
        additionalEmails.Remove(email);
    }

    private void UpdateEmailAddress(Email email, string value)
    {
        email.EmailAddress = value;
    }

    private void UpdateEmailDescription(Email email, string value)
    {
        email.Description = value;
    }

    private void AddPhone()
    {
        additionalPhones.Add(new ContactNumber
            {
                ContactNumberTypeId = contactNumberTypes.FirstOrDefault()?.Id ?? 1,
                IsPrimary = false,
                IsActive = true,
                RelatedEntityType = "User",
                CreatedOn = DateTime.Now
            });
    }

    private void RemovePhone(ContactNumber phone)
    {
        additionalPhones.Remove(phone);
    }

    private void UpdatePhoneNumber(ContactNumber phone, string value)
    {
        phone.Number = value;
    }

    private void UpdatePhoneType(ContactNumber phone, string value)
    {
        if (int.TryParse(value, out var typeId))
        {
            phone.ContactNumberTypeId = typeId;
        }
    }

    private void UpdatePhoneDescription(ContactNumber phone, string value)
    {
        phone.Description = value;
    }

    private async Task HandleCompanyChange(string companyId)
    {
        // If the user can't change companies, don't allow it
        if (!canAssignAnyCompany)
        {
            if (string.IsNullOrEmpty(companyId))
            {
                // If trying to clear the company, revert back to original value
                if (initialCompanyId.HasValue)
                {
                    userModel.CompanyId = initialCompanyId;
                }
                return;
            }

            // Check if the company being set is the initial company
            if (int.TryParse(companyId, out var cId) && initialCompanyId.HasValue && cId != initialCompanyId.Value)
            {
                // If different from initial company, don't allow change
                ToastService.ShowError("You do not have permission to change the company", "Permission Denied");
                return;
            }
        }

        if (int.TryParse(companyId, out var id))
        {
            userModel.CompanyId = id;
            await LoadBranchesForUser(id, userModel.BranchId);

            // When company changes, clear branch unless it's also available in the new company
            if (userModel.BranchId.HasValue &&
                !availableBranches.Any(b => b.Id == userModel.BranchId.Value))
            {
                userModel.BranchId = null;
            }

            // If a specific branch was selected via parameter, try to set it if it matches the company
            if (SelectedBranchId > 0 && isNewUser)
            {
                var branchResponse = await UserService.GetBranchById(SelectedBranchId);
                if (branchResponse.ResponseInfo.Success)
                {
                    var branch = (Branch)branchResponse.Response;
                    if (branch.CompanyId == id)
                    {
                        userModel.BranchId = SelectedBranchId;
                    }
                }
            }
        }
        else
        {
            userModel.CompanyId = null;
            userModel.BranchId = null;
            availableBranches.Clear();
        }
    }

    private void HandleBranchChange(string branchId)
    {
        // If branch manager or company is fixed, validate branch assignment
        if (!canAssignBranch)
        {
            if (string.IsNullOrEmpty(branchId))
            {
                // If trying to clear the branch, revert back to original value
                if (initialBranchId.HasValue)
                {
                    userModel.BranchId = initialBranchId;
                }
                return;
            }

            // If branch manager, can only assign to their branch
            if (currentUserRole == SystemRole.BranchManager &&
                int.TryParse(branchId, out var bId) &&
                currentUserBranchId.HasValue && bId != currentUserBranchId.Value)
            {
                ToastService.ShowError("You can only assign users to your own branch", "Permission Denied");
                return;
            }
        }

        if (int.TryParse(branchId, out var id))
        {
            userModel.BranchId = id;
        }
        else
        {
            userModel.BranchId = null;
        }
    }

    private void ShowResetPasswordConfirmation()
    {
        showResetPasswordModal = true;
    }

    private async Task ResetPassword()
    {
        try
        {
            // Generate a password reset token
            var token = await UserManager.GeneratePasswordResetTokenAsync(userModel);

            // Update user to require password change if specified
            if (forcePasswordChange)
            {
                userModel.RequireChangePasswordOnLogin = true;
                await UserService.UpdateUser(userModel.Id, userModel);
            }

            // In a real implementation, we would send an email with the reset link
            // For now, we'll just show a success message
            ToastService.ShowSuccess($"Password reset token generated for {GetUserDisplayName()}", "Success");

            showResetPasswordModal = false;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to reset password: {ex.Message}", "Error");
        }
    }

    private async Task HandleProfileImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            isUploadingProfileImage = true;
            var file = e.File;

            // Validate file type
            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };
            var extension = Path.GetExtension(file.Name).ToLowerInvariant();

            if (!allowedExtensions.Contains(extension))
            {
                ToastService.ShowError("Only image files (jpg, jpeg, png, gif) are allowed", "Invalid File");
                return;
            }

            // Validate file size (max 5MB)
            if (file.Size > 5 * 1024 * 1024)
            {
                ToastService.ShowError("Maximum file size is 5MB", "File Too Large");
                return;
            }

            // Read the file stream
            using var stream = file.OpenReadStream(5 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            ms.Position = 0;

            // Upload to CDN
            var cdnUrl = await CdnService.UploadFileAsync(ms, file.Name, file.ContentType, "profiles");

            if (!string.IsNullOrEmpty(cdnUrl))
            {
                // Get the metadata for the uploaded file
                var metadata = await CdnService.GetFileMetadataAsync(cdnUrl);

                if (metadata != null)
                {
                    // Update user model
                    userModel.ProfilePictureId = metadata.Id;
                    userModel.ProfilePicture = metadata;

                    ToastService.ShowSuccess("Profile picture uploaded successfully", "Success");
                }
                else
                {
                    ToastService.ShowError("Failed to retrieve file metadata", "Error");
                }
            }
            else
            {
                ToastService.ShowError("Failed to upload profile picture", "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to upload profile picture: {ex.Message}", "Error");
        }
        finally
        {
            isUploadingProfileImage = false;
            StateHasChanged();
        }
    }

    private async Task ClickProfileImageUpload()
    {
      //  await JSRuntime.InvokeVoidAsync("document.getElementById", "profile-image-upload").CallVoid("click");
    }

    private void RemoveProfileImage()
    {
        userModel.ProfilePictureId = null;
        userModel.ProfilePicture = null;
    }

    private Dictionary<string, object> BuildUserPreferences()
    {
        var preferences = new Dictionary<string, object>();

        // Theme preference
        preferences["theme"] = selectedTheme;

        // Notification preferences
        preferences["notifications"] = new Dictionary<string, bool>
            {
                ["email"] = emailNotifications,
                ["sms"] = smsNotifications,
                ["web"] = webNotifications
            };

        return preferences;
    }

    private async Task SaveUser()
    {
        try
        {
            // Check permissions before saving
            if (!hasAccessPermission || !canEditThisUser)
            {
                ToastService.ShowError("You do not have permission to perform this action", "Permission Denied");
                return;
            }

            // Validate company/branch assignments
            if (!canAssignAnyCompany && initialCompanyId != userModel.CompanyId)
            {
                ToastService.ShowError("You do not have permission to change the company", "Permission Denied");
                return;
            }

            if (!canAssignBranch && initialBranchId != userModel.BranchId)
            {
                ToastService.ShowError("You do not have permission to change the branch", "Permission Denied");
                return;
            }

            // For branch managers, validate branch assignment
            if (currentUserRole == SystemRole.BranchManager &&
                userModel.BranchId.HasValue &&
                currentUserBranchId.HasValue &&
                userModel.BranchId.Value != currentUserBranchId.Value)
            {
                ToastService.ShowError("You can only assign users to your own branch", "Permission Denied");
                return;
            }

            // Validate password for new users
            if (isNewUser)
            {
                if (string.IsNullOrEmpty(password))
                {
                    passwordError = "Password is required";
                    return;
                }

                if (password != confirmPassword)
                {
                    confirmPasswordError = "Passwords do not match";
                    return;
                }

                // Clear errors
                passwordError = string.Empty;
                confirmPasswordError = string.Empty;
            }

            // Set role - verify the current user can assign this role
            if (Enum.TryParse<SystemRole>(selectedRole, out var role))
            {
                if (!CanAssignRole(selectedRole) && selectedRole != initialRole)
                {
                    ToastService.ShowError("You do not have permission to assign this role", "Permission Denied");
                    return;
                }

                userModel.Role = role;
            }

            // Set user preferences
            userModel.UserPreferences = System.Text.Json.JsonSerializer.Serialize(BuildUserPreferences());

            // Handle user information updates
            if (!isNewUser)
            {
                userModel.UpdatedBy = currentUserId;
                userModel.UpdatedDate = DateTime.Now;
            }
            else
            {
                userModel.CreatedBy = currentUserId;
                userModel.CreatedDate = DateTime.Now;
                userModel.RequireChangePasswordOnLogin = requirePasswordChange;
            }

            // Add email addresses and contact numbers
            if (isNewUser)
            {
                // For new users, we need to set up email and phone number entities
                var primaryEmail = new Email
                    {
                        EmailAddress = userModel.Email,
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "User",
                        CreatedOn = DateTime.Now
                    };

                var primaryPhone = new ContactNumber
                    {
                        Number = userModel.PhoneNumber,
                        ContactNumberTypeId = contactNumberTypes.FirstOrDefault()?.Id ?? 1,
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "User",
                        CreatedOn = DateTime.Now
                    };

                userModel.EmailAddresses = new List<Email> { primaryEmail };
                userModel.EmailAddresses.ToList().AddRange(additionalEmails);

                userModel.ContactNumbers = new List<ContactNumber> { primaryPhone };
                userModel.ContactNumbers.ToList().AddRange(additionalPhones);

                // Create user
                var result = await UserManager.CreateAsync(userModel, password);

                if (result.Succeeded)
                {
                    // Add the user to the appropriate role based on their SystemRole
                    using var dbContext = await DbContextFactory.CreateDbContextAsync();
                    string roleName = PermissionFormat.GetRoleDisplayName(userModel.Role.Value);
                    var dbRole = await dbContext.Roles.FirstOrDefaultAsync(r => r.Name == roleName);

                    if (dbRole != null)
                    {
                        // Create a new UserRoleAssignment
                        var userRoleAssignment = new UserRoleAssignment
                            {
                                UserId = userModel.Id,
                                RoleId = dbRole.Id,
                                AssignedDate = DateTime.Now,
                                AssignedBy = currentUserId
                            };

                        await dbContext.UserRoleAssignments.AddAsync(userRoleAssignment);
                        await dbContext.SaveChangesAsync();
                    }

                    ToastService.ShowSuccess($"User {GetUserDisplayName()} created successfully", "Success");

                    if (OnSaved.HasDelegate)
                        await OnSaved.InvokeAsync();
                }
                else
                {
                    var errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
                    ToastService.ShowError(errorMessage, "Error");
                }
            }
            else
            {
                // For existing users, we need to update the user
                // Update existing email addresses
                var primaryEmail = userModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary);
                if (primaryEmail != null)
                {
                    primaryEmail.EmailAddress = userModel.Email;
                    primaryEmail.UpdatedDate = DateTime.Now;
                }

                var primaryPhone = userModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary);
                if (primaryPhone != null)
                {
                    primaryPhone.Number = userModel.PhoneNumber;
                    primaryPhone.UpdatedDate = DateTime.Now;
                }

                // Update user
                var userId = userModel.Id;
                var response = await UserService.UpdateUser(userId, userModel);

                if (response.ResponseInfo.Success)
                {
                    // Check if the SystemRole has changed and update UserRoleAssignment if needed
                    if (initialRole != selectedRole)
                    {
                        using var dbContext = await DbContextFactory.CreateDbContextAsync();

                        // Get the role ID for the selected role
                        string roleName = PermissionFormat.GetRoleDisplayName(userModel.Role.Value);
                        var dbRole = await dbContext.Roles.FirstOrDefaultAsync(r => r.Name == roleName);

                        if (dbRole != null)
                        {
                            // Check if the user already has a role assignment
                            var existingRoleAssignment = await dbContext.UserRoleAssignments
                                .FirstOrDefaultAsync(ura => ura.UserId == userId);

                            if (existingRoleAssignment != null)
                            {
                                // Update existing role assignment
                                existingRoleAssignment.RoleId = dbRole.Id;
                                existingRoleAssignment.AssignedDate = DateTime.Now;
                                existingRoleAssignment.AssignedBy = currentUserId;
                            }
                            else
                            {
                                // Create new role assignment
                                var userRoleAssignment = new UserRoleAssignment
                                    {
                                        UserId = userId,
                                        RoleId = dbRole.Id,
                                        AssignedDate = DateTime.Now,
                                        AssignedBy = currentUserId
                                    };

                                await dbContext.UserRoleAssignments.AddAsync(userRoleAssignment);
                            }

                            await dbContext.SaveChangesAsync();
                        }
                    }

                    // Now save permissions if there are any pending changes
                    if (!isNewUser && permissionsPanel != null && permissionsPanel.HasPendingChanges())
                    {
                        bool permissionsSaved = await permissionsPanel.SavePendingChanges();
                        if (permissionsSaved)
                        {
                            ToastService.ShowSuccess($"User {GetUserDisplayName()} and permissions updated successfully", "Success");
                        }
                        else
                        {
                            ToastService.ShowWarning($"User updated but some permissions failed to save", "Warning");
                        }
                    }
                    else
                    {
                        ToastService.ShowSuccess($"User {GetUserDisplayName()} updated successfully", "Success");
                    }

                    if (OnSaved.HasDelegate)
                        await OnSaved.InvokeAsync();
                }
                else
                {
                    ToastService.ShowError(response.ResponseInfo.Message, "Error");
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to save user: {ex.Message}", "Error");
        }
    }

    private string GetUserDisplayName()
    {
        if (!string.IsNullOrEmpty(userModel.FirstName) && !string.IsNullOrEmpty(userModel.LastName))
        {
            return $"{userModel.FirstName} {userModel.LastName}";
        }
        else if (!string.IsNullOrEmpty(userModel.FirstName))
        {
            return userModel.FirstName;
        }
        else if (!string.IsNullOrEmpty(userModel.LastName))
        {
            return userModel.LastName;
        }

        return userModel.UserName ?? "New User";
    }
}
<style>
    /* ====== UserEditModal Stylesheet ====== */
    :root {
        /* Colors */
        --ue-primary: var(--primary, #377f80);
        --ue-primary-hover: var(--primary-hover, #2d6869);
        --ue-primary-light: rgba(55, 127, 128, 0.08);
        --ue-primary-lighter: rgba(55, 127, 128, 0.05);
        --ue-danger: var(--danger, #d14141);
        --ue-danger-hover: var(--danger-hover, #b53535);
        --ue-danger-light: rgba(209, 65, 65, 0.1);
        --ue-warning: var(--warning, #f5a623);
        --ue-warning-light: rgba(245, 166, 35, 0.1);
        --ue-success: var(--success, #34a853);
        --ue-success-light: rgba(52, 168, 83, 0.1);
        /* Neutral colors */
        --ue-white: #ffffff;
        --ue-gray-50: #f8f9fa;
        --ue-gray-100: #f0f0f0;
        --ue-gray-200: #e5e5e5;
        --ue-gray-300: #d4d4d4;
        --ue-gray-400: #a3a3a3;
        --ue-gray-500: #737373;
        --ue-gray-600: #525252;
        --ue-gray-700: #404040;
        --ue-gray-800: #262626;
        --ue-gray-900: #171717;
        /* Text colors */
        --ue-text-primary: var(--text-primary, #333333);
        --ue-text-secondary: var(--text-secondary, #666666);
        --ue-text-tertiary: var(--text-tertiary, #999999);
        /* Spacing */
        --ue-spacing-xxs: 0.25rem;
        --ue-spacing-xs: 0.5rem;
        --ue-spacing-sm: 0.75rem;
        --ue-spacing-md: 1rem;
        --ue-spacing-lg: 1.5rem;
        --ue-spacing-xl: 2rem;
        /* Borders & Shadows */
        --ue-border-radius-sm: 6px;
        --ue-border-radius-md: 8px;
        --ue-border-radius-lg: 12px;
        --ue-border-color: var(--border-divider, #e5e5e5);
        --ue-shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.05);
        --ue-shadow-md: 0 4px 12px rgba(0, 0, 0, 0.08);
        --ue-shadow-lg: 0 8px 20px rgba(0, 0, 0, 0.12);
        /* Transitions */
        --ue-transition-fast: 0.15s ease;
        --ue-transition-normal: 0.25s ease;
        --ue-transition-slow: 0.35s ease;
    }

    /* Modal Backdrop & Wrapper */
    .ue-modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(3px);
        z-index: 9500;
        animation: ue-fade-in var(--ue-transition-normal);
    }

    .ue-modal-wrapper {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: var(--ue-white);
        border-radius: var(--ue-border-radius-lg);
        box-shadow: var(--ue-shadow-lg);
        width: 96%;
        max-width: 980px;
        max-height: 90vh;
        display: flex;
        flex-direction: column;
        z-index: 9600;
        border: 1px solid var(--ue-border-color);
        animation: ue-slide-in var(--ue-transition-normal);
        overflow: hidden;
    }

    .ue-reset-modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: var(--ue-white);
        border-radius: var(--ue-border-radius-lg);
        box-shadow: var(--ue-shadow-lg);
        width: 96%;
        max-width: 480px;
        z-index: 9700;
        border: 1px solid var(--ue-border-color);
        animation: ue-slide-in var(--ue-transition-normal);
        overflow: hidden;
    }

    /* Modal Header, Body, Footer */
    .ue-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--ue-spacing-md) var(--ue-spacing-lg);
        border-bottom: 1px solid var(--ue-border-color);
        background-color: var(--ue-gray-50);
    }

    .ue-modal-title {
        display: flex;
        align-items: center;
        gap: var(--ue-spacing-sm);
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--ue-text-primary);
    }

        .ue-modal-title i {
            color: var(--ue-primary);
            font-size: 1.25rem;
        }

    .ue-close-button {
        width: 32px;
        height: 32px;
        border-radius: var(--ue-border-radius-sm);
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: transparent;
        color: var(--ue-text-secondary);
        border: none;
        cursor: pointer;
        transition: all var(--ue-transition-fast);
    }

        .ue-close-button:hover {
            background-color: var(--ue-danger-light);
            color: var(--ue-danger);
        }

    .ue-modal-body {
        flex: 1;
        overflow-y: auto;
        padding: 0;
        scrollbar-width: thin;
        scrollbar-color: var(--ue-gray-300) transparent;
    }

        .ue-modal-body::-webkit-scrollbar {
            width: 6px;
        }

        .ue-modal-body::-webkit-scrollbar-track {
            background: transparent;
        }

        .ue-modal-body::-webkit-scrollbar-thumb {
            background-color: var(--ue-gray-300);
            border-radius: 6px;
        }

    .ue-modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: var(--ue-spacing-sm);
        padding: var(--ue-spacing-md) var(--ue-spacing-lg);
        border-top: 1px solid var(--ue-border-color);
        background-color: var(--ue-gray-50);
    }

    /* Loading State */
    .ue-loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--ue-spacing-xl) var(--ue-spacing-lg);
        text-align: center;
    }

    .ue-spinner {
        width: 48px;
        height: 48px;
        border: 3px solid rgba(55, 127, 128, 0.2);
        border-top-color: var(--ue-primary);
        border-radius: 50%;
        animation: ue-spin 1s linear infinite;
        margin-bottom: var(--ue-spacing-md);
    }

    .ue-loading-text {
        color: var(--ue-text-secondary);
        font-size: 1rem;
    }

    /* Message Panels */
    .ue-message-panel {
        display: flex;
        align-items: flex-start;
        gap: var(--ue-spacing-md);
        padding: var(--ue-spacing-md) var(--ue-spacing-lg);
        margin: var(--ue-spacing-lg);
        border-radius: var(--ue-border-radius-md);
        animation: ue-fade-in var(--ue-transition-normal);
    }

    .ue-message-error {
        background-color: var(--ue-danger-light);
        border: 1px solid rgba(209, 65, 65, 0.2);
    }

    .ue-message-warning {
        background-color: var(--ue-warning-light);
        border: 1px solid rgba(245, 166, 35, 0.2);
    }

    .ue-message-icon {
        font-size: 1.5rem;
        flex-shrink: 0;
    }

    .ue-message-error .ue-message-icon {
        color: var(--ue-danger);
    }

    .ue-message-warning .ue-message-icon {
        color: var(--ue-warning);
    }

    .ue-message-content {
        flex: .ml-1;
    }

        .ue-message-content p {
            margin: 0;
            line-height: 1.5;
            color: var(--ue-text-primary);
        }

            .ue-message-content p + p {
                margin-top: var(--ue-spacing-xs);
                font-size: 0.875rem;
                opacity: 0.9;
            }

    .ue-message-error .ue-message-content p {
        color: var(--ue-danger);
    }

    .ue-message-warning .ue-message-content p {
        color: var(--ue-warning);
    }

    /* Form Structure */
    .ue-user-form {
        display: flex;
        flex-direction: column;
        width: 100%;
    }

    .ue-form-section {
        padding: var(--ue-spacing-lg);
        animation: ue-fade-in var(--ue-transition-normal);
    }

    .ue-section-title {
        display: flex;
        flex-direction: column;
        margin-bottom: var(--ue-spacing-lg);
        position: relative;
        padding-left: 32px;
    }

        .ue-section-title i {
            position: absolute;
            left: 0;
            top: 3px;
            font-size: 1.5rem;
            color: var(--ue-primary);
        }

        .ue-section-title h3 {
            margin: 0 0 var(--ue-spacing-xs) 0;
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--ue-text-primary);
        }

        .ue-section-title p {
            margin: 0;
            color: var(--ue-text-secondary);
            font-size: 0.875rem;
        }

    .ue-section-subtitle {
        display: flex;
        align-items: center;
        margin: var(--ue-spacing-lg) 0 var(--ue-spacing-md);
        border-bottom: 1px solid #e5eef0;
        padding-bottom: var(--ue-spacing-xs);
    }

        .ue-section-subtitle i {
            color: var(--ue-primary);
            margin-right: var(--ue-spacing-xs);
            font-size: 1rem;
        }

        .ue-section-subtitle h4 {
            margin: 0;
            font-size: 1rem;
            font-weight: 600;
            color: var(--ue-text-primary);
            flex: 1;
        }

    .ue-form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: var(--ue-spacing-lg);
        margin-bottom: 0;
    }

    .ue-form-group {
        margin-bottom: var(--ue-spacing-md);
    }

    /* Tab System */
    .ue-tabs-container {
        display: flex;
        flex-direction: column;
    }

    .ue-tabs-header {
        display: flex;
        background-color: var(--ue-gray-50);
        border-bottom: 1px solid var(--ue-border-color);
        overflow-x: auto;
        scrollbar-width: none;
    }

        .ue-tabs-header::-webkit-scrollbar {
            display: none;
        }

    .ue-tab-button {
        display: flex;
        align-items: center;
        gap: var(--ue-spacing-xs);
        padding: var(--ue-spacing-md) var(--ue-spacing-lg);
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--ue-text-secondary);
        background: transparent;
        border: none;
        border-bottom: 3px solid transparent;
        cursor: pointer;
        transition: all var(--ue-transition-fast);
        white-space: nowrap;
    }

        .ue-tab-button:hover {
            color: var(--ue-primary);
            background-color: var(--ue-primary-lighter);
        }

        .ue-tab-button.ue-active {
            color: var(--ue-primary);
            border-bottom-color: var(--ue-primary);
            background-color: var(--ue-primary-light);
            font-weight: 600;
        }

    .ue-tab-content {
        flex: 1;
    }

    .ue-tab-pane {
        display: none;
    }

        .ue-tab-pane.ue-active {
            display: block;
            animation: ue-fade-in var(--ue-transition-normal);
        }

    /* Sub-tabs for Access Section */
    .ue-access-subtabs {
        display: flex;
        flex-direction: column;
    }

    .ue-subtabs-header {
        display: flex;
        background-color: var(--ue-gray-50);
        border-radius: var(--ue-border-radius-md);
        padding: 4px;
        margin-bottom: var(--ue-spacing-lg);
        flex-wrap: wrap;
        border: 1px solid var(--ue-border-color);
    }

    .ue-subtab-button {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: var(--ue-spacing-xs);
        padding: var(--ue-spacing-sm) var(--ue-spacing-md);
        font-size: 0.8125rem;
        font-weight: 500;
        color: var(--ue-text-secondary);
        background-color: transparent;
        border: none;
        border-radius: var(--ue-border-radius-sm);
        cursor: pointer;
        transition: all var(--ue-transition-fast);
        white-space: nowrap;
        min-width: 100px;
    }

        .ue-subtab-button:hover {
            color: var(--ue-primary);
            background-color: var(--ue-primary-lighter);
        }

        .ue-subtab-button.ue-active {
            color: var(--ue-primary);
            background-color: var(--ue-white);
            box-shadow: var(--ue-shadow-sm);
            font-weight: 600;
        }

    .ue-subtab-content {
        flex: 1;
    }

    .ue-subtab-pane {
        display: none;
    }

        .ue-subtab-pane.ue-active {
            display: block;
            animation: ue-fade-in var(--ue-transition-normal);
        }

    /* Cards */
    .ue-card {
        background-color: var(--ue-white);
        border-radius: var(--ue-border-radius-lg);
        box-shadow: var(--ue-shadow-sm);
        border: 1px solid var(--ue-border-color);
        overflow: hidden;
        margin-bottom: var(--ue-spacing-lg);
        transition: all var(--ue-transition-fast);
    }

        .ue-card:hover {
            box-shadow: var(--ue-shadow-md);
            transform: translateY(-1px);
        }

    .ue-card-header {
        display: flex;
        align-items: center;
        gap: var(--ue-spacing-sm);
        padding: var(--ue-spacing-md) var(--ue-spacing-lg);
        background-color: var(--ue-gray-50);
        border-bottom: 1px solid var(--ue-border-color);
    }

        .ue-card-header i {
            color: var(--ue-primary);
            font-size: 1.125rem;
        }

        .ue-card-header h4 {
            margin: 0;
            font-size: 1rem;
            font-weight: 600;
            color: var(--ue-text-primary);
        }

    .ue-card-body {
        padding: var(--ue-spacing-lg);
    }

    .ue-card-highlight {
        border: 1px solid rgba(55, 127, 128, 0.2);
        background-color: rgba(55, 127, 128, 0.02);
    }

        .ue-card-highlight .ue-card-header {
            background-color: rgba(55, 127, 128, 0.05);
            border-bottom: 1px solid rgba(55, 127, 128, 0.1);
        }

    .ue-password-card {
        border: 1px solid rgba(55, 127, 128, 0.4);
        box-shadow: 0 4px 12px rgba(55, 127, 128, 0.1);
    }

        .ue-password-card .ue-card-header {
            background-color: rgba(55, 127, 128, 0.1);
        }

    /* Form Controls */
    label {
        display: block;
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--ue-text-primary);
        margin-bottom: var(--ue-spacing-xs);
    }

    .ue-input-wrapper {
        position: relative;
        width: 100%;
    }

    .ue-input {
        width: 100%;
        padding: 0.625rem 1rem;
        font-size: 0.875rem;
        border: 1px solid var(--ue-border-color);
        border-radius: var(--ue-border-radius-md);
        background-color: var(--ue-white);
        color: var(--ue-text-primary);
        transition: all var(--ue-transition-fast);
    }

        .ue-input:focus {
            border-color: var(--ue-primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(55, 127, 128, 0.1);
        }

        .ue-input::placeholder {
            color: var(--ue-text-tertiary);
        }

    .ue-input-with-icon {
        padding-left: 2.5rem;
    }

    .ue-input-icon {
        position: absolute;
        left: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--ue-text-tertiary);
        font-size: 1rem;
        pointer-events: none;
    }

    .ue-select-wrapper {
        position: relative;
        width: 100%;
    }

    .ue-select {
        width: 100%;
        appearance: none;
        padding: 0.625rem 2.25rem 0.625rem 1rem;
        font-size: 0.875rem;
        border: 1px solid var(--ue-border-color);
        border-radius: var(--ue-border-radius-md);
        background-color: var(--ue-white);
        color: var(--ue-text-primary);
        cursor: pointer;
        transition: all var(--ue-transition-fast);
    }

        .ue-select:focus {
            border-color: var(--ue-primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(55, 127, 128, 0.1);
        }

    .ue-select-with-icon {
        padding-left: 2.5rem;
    }

    .ue-select-arrow {
        position: absolute;
        right: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--ue-text-tertiary);
        pointer-events: none;
    }

    .ue-switch-container {
        display: flex;
        align-items: center;
        padding: var(--ue-spacing-xs) 0;
    }

    .ue-switch {
        position: relative;
        display: inline-block;
        width: 46px;
        height: 24px;
        margin-right: var(--ue-spacing-sm);
        flex-shrink: 0;
    }

        .ue-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .ue-switch-slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: var(--ue-gray-300);
        transition: .3s;
        border-radius: 24px;
    }

        .ue-switch-slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .3s;
            border-radius: 50%;
        }

    .ue-switch input:checked + .ue-switch-slider {
        background-color: var(--ue-primary);
    }

    .ue-switch input:focus + .ue-switch-slider {
        box-shadow: 0 0 1px var(--ue-primary);
    }

    .ue-switch input:checked + .ue-switch-slider:before {
        transform: translateX(22px);
    }

    .ue-switch-content {
        display: flex;
        flex-direction: column;
    }

    .ue-switch-label {
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--ue-text-primary);
    }

    .ue-switch-description {
        font-size: 0.75rem;
        color: var(--ue-text-secondary);
        margin-top: 2px;
    }

    .ue-validation-message {
        color: var(--ue-danger);
        font-size: 0.75rem;
        margin-top: 4px;
    }

    .ue-field-info {
        display: flex;
        align-items: flex-start;
        gap: var(--ue-spacing-xs);
        margin-top: var(--ue-spacing-xs);
        font-size: 0.75rem;
        color: var(--ue-text-secondary);
    }

        .ue-field-info i {
            color: var(--ue-text-tertiary);
            margin-top: 2px;
        }

    /* Profile Image */
    .ue-profile-image-section {
        margin-top: var(--ue-spacing-lg);
        padding-top: var(--ue-spacing-lg);
        border-top: 1px solid #e5eef0;
    }

    .ue-profile-image-container {
        display: flex;
        align-items: center;
        gap: var(--ue-spacing-lg);
        margin-top: var(--ue-spacing-md);
    }

    .ue-profile-image-preview {
        width: 120px;
        height: 120px;
        border-radius: var(--ue-border-radius-lg);
        overflow: hidden;
        border: 1px solid var(--ue-border-color);
        box-shadow: var(--ue-shadow-sm);
        background-color: var(--ue-gray-50);
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    }

        .ue-profile-image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .ue-profile-image-placeholder {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--ue-gray-300);
        font-size: 2.5rem;
    }

    .ue-profile-image-controls {
        display: flex;
        flex-direction: column;
        gap: var(--ue-spacing-sm);
        align-items: flex-start;
    }

    /* Additional Contacts */
    .ue-additional-contacts {
        margin-top: var(--ue-spacing-xl);
    }

    .ue-email-list, .ue-phone-list {
        display: flex;
        flex-direction: column;
        gap: var(--ue-spacing-md);
    }

    .ue-email-item, .ue-phone-item {
        display: flex;
        align-items: flex-start;
        gap: var(--ue-spacing-sm);
        padding: var(--ue-spacing-md);
        background-color: var(--ue-gray-50);
        border-radius: var(--ue-border-radius-md);
        border: 1px solid #e5eef0;
        transition: all var(--ue-transition-fast);
    }

        .ue-email-item:hover, .ue-phone-item:hover {
            border-color: var(--ue-primary);
            background-color: rgba(55, 127, 128, 0.02);
        }

    .ue-email-content, .ue-phone-content {
        display: flex;
        flex-direction: column;
        gap: var(--ue-spacing-sm);
        flex: 1;
    }

    .ue-phone-content {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: var(--ue-spacing-sm);
    }

    .ue-empty-list {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--ue-spacing-xl);
        background-color: var(--ue-gray-50);
        border-radius: var(--ue-border-radius-md);
        color: var(--ue-text-tertiary);
        text-align: center;
    }

        .ue-empty-list i {
            font-size: 2rem;
            margin-bottom: var(--ue-spacing-sm);
            opacity: 0.5;
        }

        .ue-empty-list p {
            margin: 0;
            font-size: 0.875rem;
        }

    /* Role Description */
    .ue-role-description {
        display: flex;
        align-items: flex-start;
        gap: var(--ue-spacing-md);
        padding: var(--ue-spacing-md);
        background-color: var(--ue-gray-50);
        border-radius: var(--ue-border-radius-md);
        margin-top: var(--ue-spacing-md);
    }

    .ue-role-icon {
        width: 48px;
        height: 48px;
        flex-shrink: 0;
        border-radius: var(--ue-border-radius-md);
        background: linear-gradient(135deg, var(--ue-primary) 0%, var(--ue-primary-hover) 100%);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
        box-shadow: var(--ue-shadow-sm);
    }

    .ue-role-details {
        flex: 1;
    }

        .ue-role-details h5 {
            margin: 0 0 var(--ue-spacing-xs) 0;
            font-size: 1rem;
            font-weight: 600;
            color: var(--ue-text-primary);
        }

        .ue-role-details p {
            margin: 0;
            font-size: 0.875rem;
            color: var(--ue-text-secondary);
            line-height: 1.5;
        }

    /* Info Box */
    .ue-info-box {
        display: flex;
        gap: var(--ue-spacing-md);
        padding: var(--ue-spacing-md);
        border-radius: var(--ue-border-radius-md);
        background-color: rgba(55, 127, 128, 0.05);
        border: 1px solid rgba(55, 127, 128, 0.1);
    }

    .ue-info-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        flex-shrink: 0;
        background-color: rgba(55, 127, 128, 0.1);
        color: var(--ue-primary);
        border-radius: 50%;
        font-size: 1.125rem;
    }

    .ue-info-content {
        flex: 1;
    }

        .ue-info-content h5 {
            margin: 0 0 var(--ue-spacing-xs) 0;
            font-size: 1rem;
            font-weight: 600;
            color: var(--ue-text-primary);
        }

        .ue-info-content p {
            margin: 0;
            font-size: 0.875rem;
            color: var(--ue-text-secondary);
            line-height: 1.5;
        }

    /* Account History */
    .ue-account-history {
        display: flex;
        flex-direction: column;
    }

    .ue-history-item {
        display: flex;
        padding: var(--ue-spacing-sm) 0;
        border-bottom: 1px solid var(--ue-gray-100);
    }

        .ue-history-item:last-child {
            border-bottom: none;
        }

    .ue-history-label {
        flex: 1;
        font-weight: 500;
        color: var(--ue-text-secondary);
        font-size: 0.875rem;
    }

    .ue-history-value {
        flex: 3;
        color: var(--ue-text-primary);
        font-size: 0.875rem;
    }

        .ue-history-value span {
            color: var(--ue-text-secondary);
            font-size: 0.8125rem;
            margin-left: 6px;
        }

    /* Password Options */
    .ue-password-options {
        display: flex;
        flex-direction: column;
        gap: var(--ue-spacing-md);
        width: 100%;
    }

    .ue-password-form {
        width: 100%;
    }

    /* Notification Preferences */
    .ue-notification-preferences {
        margin-top: var(--ue-spacing-lg);
    }

        .ue-notification-preferences h5 {
            margin: 0 0 var(--ue-spacing-md) 0;
            font-size: 1rem;
            font-weight: 500;
            color: var(--ue-text-primary);
            border-bottom: 1px solid #e5eef0;
            padding-bottom: var(--ue-spacing-xs);
        }

    /* Permissions Container */
    .ue-permissions-container {
        margin-top: 0;
    }

    /* Buttons */
    .ue-button {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: var(--ue-spacing-xs);
        padding: 0.625rem 1.125rem;
        font-size: 0.875rem;
        font-weight: 500;
        border-radius: var(--ue-border-radius-md);
        cursor: pointer;
        transition: all var(--ue-transition-fast);
        border: none;
        text-decoration: none;
        line-height: 1.2;
    }

        .ue-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .ue-button-primary {
        background: linear-gradient(135deg, var(--ue-primary) 0%, var(--ue-primary-hover) 100%);
        color: white;
        position: relative;
        overflow: hidden;
    }

        .ue-button-primary::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to right, transparent, rgba(255, 255, 255, 0.2), transparent);
            transform: translateX(-100%);
            transition: transform 0.6s ease;
        }

        .ue-button-primary:hover:not(:disabled) {
            background: linear-gradient(135deg, var(--ue-primary-hover) 0%, var(--ue-primary) 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(55, 127, 128, 0.3);
        }

            .ue-button-primary:hover:not(:disabled)::after {
                transform: translateX(100%);
            }

    .ue-button-outline {
        background-color: transparent;
        border: 1px solid var(--ue-border-color);
        color: var(--ue-text-secondary);
    }

        .ue-button-outline:hover:not(:disabled) {
            background-color: var(--ue-gray-50);
            border-color: var(--ue-primary);
            color: var(--ue-primary);
            transform: translateY(-2px);
        }

    .ue-button-outline-danger {
        background-color: transparent;
        border: 1px solid var(--ue-border-color);
        color: var(--ue-text-secondary);
    }

        .ue-button-outline-danger:hover:not(:disabled) {
            background-color: var(--ue-danger-light);
            border-color: var(--ue-danger);
            color: var(--ue-danger);
            transform: translateY(-2px);
        }

    .ue-button-sm {
        padding: 0.5rem 0.875rem;
        font-size: 0.8125rem;
    }

    .ue-button-xs {
        padding: 0.375rem 0.625rem;
        font-size: 0.75rem;
        border-radius: var(--ue-border-radius-sm);
    }

    /* Utility Classes */
    .ue-hidden {
        display: none;
    }

    .ue-mt-3 {
        margin-top: var(--ue-spacing-md);
    }

    /* Animations */
    @@keyframes ue-fade-in {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    @@keyframes ue-slide-in {
        from

    {
        opacity: 0;
        transform: translate(-50%, calc(-50% - 20px));
    }

    to {
        opacity: 1;
        transform: translate(-50%, -50%);
    }

    }

    @@keyframes ue-spin {
        to

    {
        transform: rotate(360deg);
    }

    }

    /* Responsive Styles */
    @@media (max-width: 992px) {
        .ue-modal-wrapper

    {
        max-width: 90%;
    }

    .ue-form-row {
        grid-template-columns: 1fr;
        gap: var(--ue-spacing-sm);
    }

    .ue-phone-content {
        grid-template-columns: 1fr;
    }

    .ue-profile-image-container {
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .ue-profile-image-controls {
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
    }

    }

    @@media (max-width: 768px) {
        .ue-modal-wrapper

    {
        max-width: none;
        width: 100%;
        height: 100%;
        max-height: none;
        border-radius: 0;
        animation: ue-fade-in var(--ue-transition-normal);
        top: 0;
        left: 0;
        transform: none;
    }

    .ue-section-title {
        padding-left: 0;
        flex-direction: column;
        align-items: flex-start;
    }

        .ue-section-title i {
            position: static;
            margin-bottom: var(--ue-spacing-xs);
        }

    .ue-tabs-header {
        overflow-x: auto;
    }

    .ue-tab-button {
        padding: var(--ue-spacing-sm) var(--ue-spacing-md);
    }

    .ue-subtabs-header {
        overflow-x: auto;
        flex-wrap: nowrap;
    }

    .ue-subtab-button {
        flex: 0 0 auto;
    }

    .ue-history-item {
        flex-direction: column;
        gap: 4px;
    }

    .ue-history-label {
        font-weight: 600;
    }

    }

    @@media (max-width: 576px) {
        .ue-modal-header, .ue-modal-footer

    {
        padding: var(--ue-spacing-sm) var(--ue-spacing-md);
    }

    .ue-form-section {
        padding: var(--ue-spacing-md);
    }

    .ue-tab-button {
        padding: var(--ue-spacing-sm);
        font-size: 0.8125rem;
    }

        .ue-tab-button i {
            margin-right: 0;
        }

    .ue-subtab-button {
        padding: var(--ue-spacing-xs) var(--ue-spacing-sm);
        font-size: 0.75rem;
    }

    .ue-card-header {
        padding: var(--ue-spacing-sm) var(--ue-spacing-md);
    }

    .ue-card-body {
        padding: var(--ue-spacing-md);
    }

    .ue-modal-footer {
        flex-direction: column;
    }

        .ue-modal-footer .ue-button {
            width: 100%;
        }

    .ue-section-title h3 {
        font-size: 1.125rem;
    }

    .ue-info-box {
        flex-direction: column;
    }

    .ue-info-icon {
        margin: 0 auto var(--ue-spacing-sm);
    }

    .ue-info-content {
        text-align: center;
    }

    }

    @@media (max-width: 480px) {
        .ue-tab-button

    {
        flex-direction: column;
        padding: var(--ue-spacing-xs);
        gap: 4px;
    }

    .ue-tab-button span {
        font-size: 0.6875rem;
    }

    .ue-subtab-button {
        min-width: 80px;
        padding: var(--ue-spacing-xs);
    }

        .ue-subtab-button span {
            display: none;
        }

        .ue-subtab-button.ue-active span {
            display: inline;
        }

    .ue-role-description {
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .ue-role-icon {
        margin-bottom: var(--ue-spacing-sm);
    }

    }

    @@media (max-width: 400px) {
        .ue-modal-title

    {
        font-size: 1rem;
    }

    .ue-section-title h3 {
        font-size: 1rem;
    }

    .ue-section-title p {
        font-size: 0.75rem;
    }

    .ue-card-header h4 {
        font-size: 0.875rem;
    }

    .ue-tab-button {
        font-size: 0;
        width: 20%;
    }

        .ue-tab-button i {
            font-size: 1rem;
            margin-right: 0;
        }

        .ue-tab-button span {
            display: none;
        }

        .ue-tab-button.ue-active::after {
            content: attr(title);
            font-size: 0.625rem;
            display: block;
            font-weight: normal;
            margin-top: 4px;
        }

    label,
    .ue-input,
    .ue-select,
    .ue-switch-label {
        font-size: 0.8125rem;
    }

    }

    /* Extra small height adjustments */
    @@media (max-height: 600px) {
        .ue-modal-header, .ue-modal-footer

    {
        padding: var(--ue-spacing-xs) var(--ue-spacing-md);
    }

    .ue-form-section {
        padding: var(--ue-spacing-sm);
    }

    .ue-form-group {
        margin-bottom: var(--ue-spacing-sm);
    }

    .ue-section-title {
        margin-bottom: var(--ue-spacing-md);
    }

    }
</style>