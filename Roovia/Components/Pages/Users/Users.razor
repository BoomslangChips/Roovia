@page "/users"
@using Roovia.Interfaces
@using Roovia.Models.Users
@using Roovia.Models.Helper
@using Roovia.Security
@using Roovia.Services
@using Roovia.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@attribute [Authorize(Policy = "AdminAccess")]
@rendermode InteractiveServer
@inject IUser UserService
@inject IPermissionService PermissionService
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="users-page">
    <div class="admin-header-section">
        <div class="admin-header-content">
            <div class="header-text-content">
                <div class="header-icon">
                    <i class="fa-light fa-users"></i>
                </div>
                <div class="header-title-group">
                    <h1 class="header-title">User Management</h1>
                    <p class="header-subtitle">Manage users, assign roles and company access</p>
                </div>
            </div>

            <div class="header-action-panel">
                <RVButton ButtonType="primary" IconLeft="fa-light fa-plus" Text="Create User"
                          OnClick="() => ShowUserEditModal()" CssClass="create-user-btn" />
            </div>
        </div>
    </div>

    <div class="admin-main-container">
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <h3 class="loading-text">Loading user hierarchy...</h3>
            </div>
        }
        else
        {
            <CardView CssClass="management-card">
                <HeaderActions>
                    <UserFilterPanel Companies="@allCompanies"
                                     OnCompanySelected="HandleCompanyChange"
                                     SelectedCompanyId="@selectedCompanyId"
                                     OnRoleFilterChanged="HandleRoleFilterChange"
                                     SelectedRoleFilter="@selectedRoleFilter"
                                     OnStatusFilterChanged="HandleStatusFilterChange"
                                     SelectedStatusFilter="@selectedStatusFilter"
                                     SearchTerm="@searchTerm"
                                     OnSearchChanged="HandleSearch"
                                     SearchType="@searchType"
                                     OnSearchTypeChanged="HandleSearchTypeChange"
                                     OnClearFilters="ClearFilters"
                                     OnRefresh="LoadUserHierarchy" />
                </HeaderActions>
                <ChildContent>
                    @if (currentUser?.Role == SystemRole.GlobalAdmin)
                    {
                        <div class="hierarchy-view">
                            @if (filteredCompanies.Any())
                            {
                                <div class="company-accordion">
                                    @foreach (var company in filteredCompanies)
                                    {
                                        var companyUsers = GetCompanyUsers(company.Id);
                                        var companyBranches = GetCompanyBranches(company.Id);

                                        <div class="accordion-item @(expandedCompanies.Contains(company.Id) ? "expanded" : "")">
                                            <div class="accordion-header" @onclick="() => ToggleCompany(company.Id)">
                                                <div class="accordion-title">
                                                    <div class="accordion-icon">
                                                        <i class="@(expandedCompanies.Contains(company.Id) ? "fa-light fa-chevron-down" : "fa-light fa-chevron-right")"></i>
                                                    </div>
                                                    <div class="company-info">
                                                        <div class="company-logo">
                                                            <i class="fa-light fa-building"></i>
                                                        </div>
                                                        <div class="company-details">
                                                            <h3>@company.Name</h3>
                                                            <div class="company-meta">
                                                                <span><i class="fa-light fa-code-branch"></i> @companyBranches.Count() branches</span>
                                                                <span><i class="fa-light fa-users"></i> @companyUsers.Count() users</span>
                                                                <span class="status-badge @(company.IsActive ? "active" : "inactive")">
                                                                    @(company.IsActive ? "Active" : "Inactive")
                                                                </span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="accordion-actions" @onclick:stopPropagation="true">
                                                    <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-eye" Text="View"
                                                              OnClick="() => ShowCompanyEditModal(company.Id, true)" CssClass="action-btn" />
                                                    <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-edit" Text="Edit"
                                                              OnClick="() => ShowCompanyEditModal(company.Id)" CssClass="action-btn" />
                                                </div>
                                            </div>

                                            @if (expandedCompanies.Contains(company.Id))
                                            {
                                                <div class="accordion-content">
                                                    @if (companyUsers.Any())
                                                    {
                                                        <div class="company-users-section">
                                                            <h4><i class="fa-light fa-users"></i> Company Users</h4>
                                                            @foreach (var user in companyUsers)
                                                            {
                                                                <UserCard User="user" OnView="(id) => ShowUserDetailsModal(id)" OnEdit="(id) => ShowUserEditModal(id)"
                                                                          OnRoles="(id) => ShowUserRolesModal(id)" OnToggleStatus="(user) => ConfirmToggleUserStatus(user)" />
                                                            }
                                                        </div>
                                                    }

                                                    @if (companyBranches.Any())
                                                    {
                                                        <div class="branch-accordion">
                                                            @foreach (var branch in companyBranches)
                                                            {
                                                                var branchUsers = GetBranchUsers(branch.Id);

                                                                <div class="accordion-item @(expandedBranches.Contains(branch.Id) ? "expanded" : "")">
                                                                    <div class="accordion-header" @onclick="() => ToggleBranch(branch.Id)">
                                                                        <div class="accordion-title">
                                                                            <div class="accordion-icon">
                                                                                <i class="@(expandedBranches.Contains(branch.Id) ? "fa-light fa-chevron-down" : "fa-light fa-chevron-right")"></i>
                                                                            </div>
                                                                            <div class="branch-info">
                                                                                <div class="branch-logo">
                                                                                    <i class="fa-light fa-code-branch"></i>
                                                                                </div>
                                                                                <div class="branch-details">
                                                                                    <h4>@branch.Name</h4>
                                                                                    <div class="branch-meta">
                                                                                        <span><i class="fa-light fa-users"></i> @branchUsers.Count() users</span>
                                                                                        <span class="status-badge @(branch.IsActive ? "active" : "inactive")">
                                                                                            @(branch.IsActive ? "Active" : "Inactive")
                                                                                        </span>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <div class="accordion-actions" @onclick:stopPropagation="true">
                                                                            <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-eye" Text="View"
                                                                                      OnClick="() => ShowBranchEditModal(branch.Id, true)" CssClass="action-btn" />
                                                                            <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-edit" Text="Edit"
                                                                                      OnClick="() => ShowBranchEditModal(branch.Id)" CssClass="action-btn" />
                                                                        </div>
                                                                    </div>

                                                                    @if (expandedBranches.Contains(branch.Id) && branchUsers.Any())
                                                                    {
                                                                        <div class="accordion-content">
                                                                            <h5><i class="fa-light fa-users"></i> Branch Users</h5>
                                                                            @foreach (var user in branchUsers)
                                                                            {
                                                                                <UserCard User="user" OnView="(id) => ShowUserDetailsModal(id)" OnEdit="(id) => ShowUserEditModal(id)"
                                                                                          OnRoles="(id) => ShowUserRolesModal(id)" OnToggleStatus="(user) => ConfirmToggleUserStatus(user)" />
                                                                            }
                                                                        </div>
                                                                    }
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <EmptyState Title="No companies found"
                                            Description="No companies match your current filters."
                                            Icon="fa-light fa-building-slash"
                                            ActionText="Clear Filters"
                                            OnAction="ClearFilters" />
                            }
                        </div>
                    }
                    else if (currentUser?.Role == SystemRole.CompanyAdmin && currentUser?.CompanyId.HasValue == true)
                    {
                        <div class="company-view">
                            @if (currentUserCompany != null)
                            {
                                <div class="company-overview">
                                    <div class="company-header">
                                        <div class="company-logo-large">
                                            <i class="fa-light fa-building"></i>
                                        </div>
                                        <div class="company-header-info">
                                            <h2>@currentUserCompany.Name</h2>
                                            <div class="company-stats">
                                                <div class="stat-item">
                                                    <span class="stat-value">@GetCompanyBranches(currentUserCompany.Id).Count()</span>
                                                    <span class="stat-label">Branches</span>
                                                </div>
                                                <div class="stat-item">
                                                    <span class="stat-value">@GetCompanyUsers(currentUserCompany.Id).Count()</span>
                                                    <span class="stat-label">Total Users</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="tabs-container">
                                    <div class="tabs-header">
                                        <button class="tab-button @(activeTab == "users" ? "active" : "")" @onclick='() => activeTab = "users"'>
                                            <i class="fa-light fa-users"></i> Company Users
                                        </button>
                                        <button class="tab-button @(activeTab == "branches" ? "active" : "")" @onclick='() => activeTab = "branches"'>
                                            <i class="fa-light fa-code-branch"></i> Branches
                                        </button>
                                    </div>

                                    <div class="tabs-content">
                                        @if (activeTab == "users")
                                        {
                                            <div class="tab-panel">
                                                @if (GetCompanyUsers(currentUserCompany.Id).Any())
                                                {
                                                    @foreach (var user in GetCompanyUsers(currentUserCompany.Id))
                                                    {
                                                        <UserCard User="user" OnView="(id) => ShowUserDetailsModal(id)" OnEdit="(id) => ShowUserEditModal(id)"
                                                                  OnRoles="(id) => ShowUserRolesModal(id)" OnToggleStatus="(user) => ConfirmToggleUserStatus(user)" />
                                                    }
                                                }
                                                else
                                                {
                                                    <EmptyState Title="No users in company"
                                                                Description="No users are currently assigned to this company."
                                                                Icon="fa-light fa-user-plus"
                                                                ActionText="Add User"
                                                                OnAction="() => ShowUserEditModal()" />
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="tab-panel">
                                                @if (GetCompanyBranches(currentUserCompany.Id).Any())
                                                {
                                                    <div class="branch-grid">
                                                        @foreach (var branch in GetCompanyBranches(currentUserCompany.Id))
                                                        {
                                                            var branchUsers = GetBranchUsers(branch.Id);
                                                            <div class="branch-card">
                                                                <div class="branch-card-header">
                                                                    <div class="branch-card-icon">
                                                                        <i class="fa-light fa-code-branch"></i>
                                                                    </div>
                                                                    <div>
                                                                        <h3>@branch.Name</h3>
                                                                        <div class="branch-card-meta">
                                                                            <span><i class="fa-light fa-users"></i> @branchUsers.Count() users</span>
                                                                            <span class="status-badge @(branch.IsActive ? "active" : "inactive")">
                                                                                @(branch.IsActive ? "Active" : "Inactive")
                                                                            </span>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="branch-card-actions">
                                                                    <RVButton ButtonType="outline" Size="sm" IconLeft="fa-light fa-eye" Text="View Users"
                                                                              OnClick="() => ViewBranchUsers(branch.Id)" />
                                                                    <RVButton ButtonType="outline" Size="sm" IconLeft="fa-light fa-edit" Text="Edit"
                                                                              OnClick="() => ShowBranchEditModal(branch.Id)" />
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <EmptyState Title="No branches found"
                                                                Description="No branches are currently set up for this company."
                                                                Icon="fa-light fa-code-branch-slash"
                                                                ActionText="Add Branch"
                                                                OnAction="() => ShowCreateBranchModal(currentUserCompany.Id)" />
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else if (currentUser?.Role == SystemRole.BranchManager && currentUser?.BranchId.HasValue == true)
                    {
                        <div class="branch-view">
                            @if (currentUserBranch != null)
                            {
                                <div class="branch-overview">
                                    <div class="branch-header">
                                        <div class="branch-logo-large">
                                            <i class="fa-light fa-code-branch"></i>
                                        </div>
                                        <div class="branch-header-info">
                                            <h2>@currentUserBranch.Name</h2>
                                            <div class="branch-stats">
                                                <div class="stat-item">
                                                    <span class="stat-value">@GetBranchUsers(currentUserBranch.Id).Count()</span>
                                                    <span class="stat-label">Users</span>
                                                </div>
                                                <div class="stat-item">
                                                    <span class="stat-value">
                                                        @GetBranchUsers(currentUserBranch.Id).Count(u => u.IsActive)
                                                    </span>
                                                    <span class="stat-label">Active</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="branch-users-section">
                                    <h3><i class="fa-light fa-users"></i> Branch Users</h3>
                                    @if (GetBranchUsers(currentUserBranch.Id).Any())
                                    {
                                        @foreach (var user in GetBranchUsers(currentUserBranch.Id))
                                        {
                                            <UserCard User="user" OnView="(id) => ShowUserDetailsModal(id)" OnEdit="(id) => ShowUserEditModal(id)"
                                                      OnRoles="(id) => ShowUserRolesModal(id)" OnToggleStatus="(user) => ConfirmToggleUserStatus(user)" />
                                        }
                                    }
                                    else
                                    {
                                        <EmptyState Title="No users in branch"
                                                    Description="No users are currently assigned to this branch."
                                                    Icon="fa-light fa-user-plus"
                                                    ActionText="Add User"
                                                    OnAction="() => ShowUserEditModal()" />
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <EmptyState Title="No access"
                                    Description="You don't have permission to view user information."
                                    Icon="fa-light fa-lock"
                                    ActionText="Return to Dashboard"
                                    OnAction='() => NavigationManager.NavigateTo("/")' />
                    }
                </ChildContent>
            </CardView>
        }
    </div>

    @if (showStatusConfirmation)
    {
        <RVModal IsVisible="true"
                 Title="@(userToToggle?.IsActive == true ? "Deactivate User" : "Activate User")"
                 Icon="@(userToToggle?.IsActive == true ? "fa-light fa-user-slash" : "fa-light fa-user-check")"
                 OnClose="() => showStatusConfirmation = false"
                 OnCancel="() => showStatusConfirmation = false"
                 OnConfirm="ToggleUserStatus"
                 ConfirmText="@(userToToggle?.IsActive == true ? "Deactivate" : "Activate")"
                 CancelText="Cancel"
                 Size="sm"
                 CssClass="status-modal">
            <ChildContent>
                <div class="status-modal-content">
                    <div class="alert @(userToToggle?.IsActive == true ? "alert-danger" : "alert-success")">
                        <i class="@(userToToggle?.IsActive == true ? "fa-light fa-exclamation-triangle" : "fa-light fa-check-circle")"></i>
                        <div class="alert-content">
                            @if (userToToggle?.IsActive == true)
                            {
                                <p>Are you sure you want to deactivate <strong>@GetUserDisplayName(userToToggle)</strong>?</p>
                                <p>Deactivated users will not be able to log in to the system.</p>
                            }
                            else
                            {
                                <p>Are you sure you want to activate <strong>@GetUserDisplayName(userToToggle)</strong>?</p>
                                <p>Activated users will be able to log in to the system.</p>
                            }
                        </div>
                    </div>
                </div>
            </ChildContent>
        </RVModal>
    }

    @if (showUserEditModal)
    {
        <UserEditModal UserId="@selectedUserId"
                       Companies="allCompanies"
                       OnClose="() => showUserEditModal = false"
                       OnSaved="HandleUserSaved" />
    }

    @if (showUserDetailsModal)
    {
        <UserDetailsModal UserId="@selectedUserId"
                          OnClose="() => showUserDetailsModal = false"
                          OnEdit="() => { showUserDetailsModal = false; ShowUserEditModal(selectedUserId); }" />
    }

    @if (showUserRolesModal)
    {
        <UserRolesModal UserId="@selectedUserId"
                        OnClose="() => showUserRolesModal = false"
                        OnSaved="HandleRolesSaved" />
    }

    @if (showCompanyEditModal)
    {
        <CompanyDialog CompanyModel="@editingCompany"
                       IsEdit="@(selectedCompanyId != 0)"
                       IsView="@viewModeOnly"
                       CanEdit="true"
                       OnSave="HandleCompanySaved"
                       OnCancel="() => showCompanyEditModal = false" />
    }

    @if (showBranchEditModal)
    {
        <BranchDialog BranchModel="@editingBranch"
                      IsEdit="@(selectedBranchId != 0)"
                      IsView="@viewModeOnly"
                      CompanyId="@editingBranchCompanyId"
                      CanEdit="true"
                      CanEditCompany="true"
                      OnSave="HandleBranchSaved"
                      OnCancel="() => showBranchEditModal = false" />
    }
</div>

@code {
    // User and Role Management
    private ApplicationUser? currentUser;
    private Company? currentUserCompany;
    private Branch? currentUserBranch;

    // Data Collections
    private List<ApplicationUser> users = new List<ApplicationUser>();
    private List<Company> allCompanies = new List<Company>();
    private List<Branch> allBranches = new List<Branch>();
    private List<Branch> filteredBranches = new List<Branch>();
    private bool isLoading = true;

    // Modal States
    private bool showUserEditModal = false;
    private bool showUserDetailsModal = false;
    private bool showUserRolesModal = false;
    private bool showStatusConfirmation = false;
    private bool showCompanyEditModal = false;
    private bool showBranchEditModal = false;
    private bool viewModeOnly = false;
    private string selectedUserId = string.Empty;
    private int selectedCompanyId = 0;
    private int selectedBranchId = 0;
    private int editingBranchCompanyId = 0;
    private ApplicationUser? userToToggle;
    private Company editingCompany = new Company();
    private Branch editingBranch = new Branch();

    // Filtering
    private string searchTerm = string.Empty;
    private int? selectedCompanyIdFilter = null;
    private int? selectedBranchIdFilter = null;
    private string selectedRoleFilter = "all";
    private string selectedStatusFilter = "all";

    // UI State
    private HashSet<int> expandedCompanies = new HashSet<int>();
    private HashSet<int> expandedBranches = new HashSet<int>();
    private string activeTab = "users";
    private string searchType = "users";
    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadUserHierarchy();
    }
    private void HandleSearchTypeChange(string type)
    {
        searchType = type;
        // Refresh the filtered results when search type changes
        StateHasChanged();
    }
    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                var response = await UserService.GetUserById(userId);
                if (response.ResponseInfo.Success)
                {
                    currentUser = (ApplicationUser)response.Response;

                    if (currentUser?.CompanyId.HasValue == true)
                    {
                        var companyResponse = await UserService.GetCompanyById(currentUser.CompanyId.Value);
                        if (companyResponse.ResponseInfo.Success)
                        {
                            currentUserCompany = (Company)companyResponse.Response;
                        }
                    }

                    if (currentUser?.BranchId.HasValue == true)
                    {
                        var branchResponse = await UserService.GetBranchById(currentUser.BranchId.Value);
                        if (branchResponse.ResponseInfo.Success)
                        {
                            currentUserBranch = (Branch)branchResponse.Response;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load current user: {ex.Message}", "Error");
        }
    }

    private async Task LoadUserHierarchy()
    {
        isLoading = true;

        try
        {
            // Load users
            await LoadUsers();

            // Load companies
            var companiesResponse = await UserService.GetAllCompanies();
            if (companiesResponse.ResponseInfo.Success)
            {
                allCompanies = (List<Company>)companiesResponse.Response;
            }

            // Load branches
            allBranches.Clear();
            foreach (var company in allCompanies)
            {
                var branchesResponse = await UserService.GetBranchesByCompany(company.Id);
                if (branchesResponse.ResponseInfo.Success)
                {
                    allBranches.AddRange((List<Branch>)branchesResponse.Response);
                }
            }

            filteredBranches = allBranches;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load data: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;

            var response = await UserService.GetAllUsers();
            if (response.ResponseInfo.Success)
            {
                users = (List<ApplicationUser>)response.Response;
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load users: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<Company> filteredCompanies
    {
        get
        {
            if (currentUser?.Role != SystemRole.GlobalAdmin) return new List<Company>();

            var companies = allCompanies.AsEnumerable();

            // Company filter
            if (selectedCompanyIdFilter.HasValue)
            {
                companies = companies.Where(c => c.Id == selectedCompanyIdFilter);
            }

            // Search filter based on search type
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                if (searchType == "companies")
                {
                    // Search directly in companies
                    companies = companies.Where(c =>
                        c.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true);
                }
                else if (searchType == "branches")
                {
                    // Search in branches, then get their parent companies
                    var matchingBranchCompanyIds = allBranches
                        .Where(b => b.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true)
                        .Select(b => b.CompanyId)
                        .Distinct()
                        .ToList();

                    companies = companies.Where(c => matchingBranchCompanyIds.Contains(c.Id));
                }
                else // users (default)
                {
                    // Search in users, then get their company IDs
                    var companyIds = users
                        .Where(u =>
                            (u.FirstName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (u.LastName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (u.UserName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (u.Email?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
                        .Select(u => u.CompanyId)
                        .Where(id => id.HasValue)
                        .Select(id => id!.Value)
                        .Distinct()
                        .ToList();

                    companies = companies.Where(c => companyIds.Contains(c.Id));
                }
            }

            // Status filter - hide companies with no matching users
            if (selectedStatusFilter != "all")
            {
                bool isActive = selectedStatusFilter == "active";

                // Get company IDs that have users with the specified status
                var companyIdsWithMatchingUsers = users
                    .Where(u => u.IsActive == isActive)
                    .Select(u => u.CompanyId)
                    .Where(id => id.HasValue)
                    .Select(id => id!.Value)
                    .Distinct()
                    .ToList();

                companies = companies.Where(c => companyIdsWithMatchingUsers.Contains(c.Id));
            }

            return companies;
        }
    }

    private IEnumerable<ApplicationUser> GetCompanyUsers(int companyId)
    {
        var companyUsers = users.Where(u => u.CompanyId == companyId && !u.BranchId.HasValue);
        return ApplyUserFilters(companyUsers);
    }

    private IEnumerable<ApplicationUser> GetBranchUsers(int branchId)
    {
        var branchUsers = users.Where(u => u.BranchId == branchId);
        return ApplyUserFilters(branchUsers);
    }

    private IEnumerable<Branch> GetCompanyBranches(int companyId)
    {
        var branches = allBranches.Where(b => b.CompanyId == companyId);

        // Search filter - only apply when search type is "branches"
        if (!string.IsNullOrWhiteSpace(searchTerm) && searchType == "branches")
        {
            branches = branches.Where(b =>
                b.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true);
        }

        return branches;
    }

    private IEnumerable<ApplicationUser> ApplyUserFilters(IEnumerable<ApplicationUser> userList)
    {
        // Search filter - only apply when search type is "users"
        if (!string.IsNullOrWhiteSpace(searchTerm) && searchType == "users")
        {
            userList = userList.Where(u =>
                (u.FirstName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (u.LastName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (u.UserName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (u.Email?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        // Role filter
        if (selectedRoleFilter != "all")
        {
            if (Enum.TryParse<SystemRole>(selectedRoleFilter, out var roleEnum))
            {
                userList = userList.Where(u => u.Role == roleEnum);
            }
        }

        // Status filter
        if (selectedStatusFilter != "all")
        {
            bool isActive = selectedStatusFilter == "active";
            userList = userList.Where(u => u.IsActive == isActive);
        }

        return userList;
    }


    private void ToggleCompany(int companyId)
    {
        if (expandedCompanies.Contains(companyId))
            expandedCompanies.Remove(companyId);
        else
            expandedCompanies.Add(companyId);
    }

    private void ToggleBranch(int branchId)
    {
        if (expandedBranches.Contains(branchId))
            expandedBranches.Remove(branchId);
        else
            expandedBranches.Add(branchId);
    }

    private void HandleCompanyChange(int? companyId)
    {
        selectedCompanyIdFilter = companyId;
        selectedBranchIdFilter = null; // Reset branch filter when company changes
    }

    private void HandleBranchChange(int? branchId)
    {
        selectedBranchIdFilter = branchId;
    }

    private void HandleRoleFilterChange(string roleFilter)
    {
        selectedRoleFilter = roleFilter;
    }

    private void HandleStatusFilterChange(string statusFilter)
    {
        selectedStatusFilter = statusFilter;
    }

    private void HandleSearch(string search)
    {
        searchTerm = search;
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedCompanyIdFilter = null;
        selectedBranchIdFilter = null;
        selectedRoleFilter = "all";
        selectedStatusFilter = "all";
        searchType = "users";
        filteredBranches = allBranches;
    }

    // User Management Methods
    private void ShowUserEditModal(string? userId = null)
    {
        selectedUserId = userId ?? string.Empty;
        showUserEditModal = true;
    }

    private void ShowUserDetailsModal(string userId)
    {
        selectedUserId = userId;
        showUserDetailsModal = true;
    }

    private void ShowUserRolesModal(string userId)
    {
        selectedUserId = userId;
        showUserRolesModal = true;
    }

    private void ConfirmToggleUserStatus(ApplicationUser user)
    {
        userToToggle = user;
        showStatusConfirmation = true;
    }

    private async Task ToggleUserStatus()
    {
        if (userToToggle == null) return;

        try
        {
            userToToggle.IsActive = !userToToggle.IsActive;
            var response = await UserService.UpdateUser(userToToggle.Id, userToToggle);

            if (response.ResponseInfo.Success)
            {
                string message = userToToggle.IsActive
                    ? $"User '{GetUserDisplayName(userToToggle)}' has been activated"
                    : $"User '{GetUserDisplayName(userToToggle)}' has been deactivated";

                ToastService.ShowSuccess(message, "Success");
                await LoadUsers();
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to update user status: {ex.Message}", "Error");
        }

        showStatusConfirmation = false;
        userToToggle = null;
    }

    private async Task HandleUserSaved()
    {
        showUserEditModal = false;
        await LoadUsers();
    }

    private async Task HandleRolesSaved()
    {
        showUserRolesModal = false;
        await LoadUsers();
    }

    // Company Management Methods
    private async Task ShowCompanyEditModal(int companyId = 0, bool viewOnly = false)
    {
        selectedCompanyId = companyId;
        viewModeOnly = viewOnly;

        if (companyId != 0)
        {
            var response = await UserService.GetCompanyById(companyId);
            if (response.ResponseInfo.Success)
            {
                editingCompany = (Company)response.Response;
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
                return;
            }
        }
        else
        {
            editingCompany = new Company();
        }

        showCompanyEditModal = true;
    }

    private async Task HandleCompanySaved(Company company)
    {
        try
        {
            if (company.Id == 0)
            {
                // Create new company
                var response = await UserService.CreateCompany(company);
                if (response.ResponseInfo.Success)
                {
                    ToastService.ShowSuccess($"Company '{company.Name}' created successfully", "Success");
                }
                else
                {
                    ToastService.ShowError(response.ResponseInfo.Message, "Error");
                }
            }
            else
            {
                // Update existing company
                var response = await UserService.UpdateCompany(company.Id, company);
                if (response.ResponseInfo.Success)
                {
                    ToastService.ShowSuccess($"Company '{company.Name}' updated successfully", "Success");
                }
                else
                {
                    ToastService.ShowError(response.ResponseInfo.Message, "Error");
                }
            }

            // Reload data
            await LoadUserHierarchy();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to save company: {ex.Message}", "Error");
        }

        showCompanyEditModal = false;
    }

    // Branch Management Methods
    private async Task ShowBranchEditModal(int branchId = 0, bool viewOnly = false)
    {
        selectedBranchId = branchId;
        viewModeOnly = viewOnly;

        if (branchId != 0)
        {
            var response = await UserService.GetBranchById(branchId);
            if (response.ResponseInfo.Success)
            {
                editingBranch = (Branch)response.Response;
                editingBranchCompanyId = editingBranch.CompanyId;
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
                return;
            }
        }
        else
        {
            editingBranch = new Branch();
            editingBranchCompanyId = currentUser?.Role == SystemRole.CompanyAdmin && currentUser.CompanyId.HasValue
                ? currentUser.CompanyId.Value
                : (selectedCompanyIdFilter ?? 0);
        }

        showBranchEditModal = true;
    }

    private void ShowCreateBranchModal(int companyId)
    {
        selectedBranchId = 0;
        viewModeOnly = false;
        editingBranch = new Branch();
        editingBranchCompanyId = companyId;
        showBranchEditModal = true;
    }

    private async Task HandleBranchSaved(Branch branch)
    {
        try
        {
            if (branch.Id == 0)
            {
                // Create new branch
                var response = await UserService.CreateBranch(branch);
                if (response.ResponseInfo.Success)
                {
                    ToastService.ShowSuccess($"Branch '{branch.Name}' created successfully", "Success");
                }
                else
                {
                    ToastService.ShowError(response.ResponseInfo.Message, "Error");
                }
            }
            else
            {
                // Update existing branch
                var response = await UserService.UpdateBranch(branch.Id, branch);
                if (response.ResponseInfo.Success)
                {
                    ToastService.ShowSuccess($"Branch '{branch.Name}' updated successfully", "Success");
                }
                else
                {
                    ToastService.ShowError(response.ResponseInfo.Message, "Error");
                }
            }

            // Reload data
            await LoadUserHierarchy();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to save branch: {ex.Message}", "Error");
        }

        showBranchEditModal = false;
    }

    private void ViewBranchUsers(int branchId)
    {
        selectedBranchIdFilter = branchId;
        activeTab = "branches";
        ToggleBranch(branchId);
    }

    private string GetUserDisplayName(ApplicationUser user)
    {
        if (!string.IsNullOrEmpty(user.FullName))
        {
            return user.FullName;
        }

        return user.UserName ?? "Unknown User";
    }
}
<style>
    .roovia-tabs {
        justify-content: center !important;
    }
</style>