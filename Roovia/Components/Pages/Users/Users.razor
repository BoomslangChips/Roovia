@page "/Users"
@using Roovia.Models.Users
@using Roovia.Models.Helper
@using Roovia.Interfaces
@using Roovia.Services
@inject IUser UserService
@inject ToastService ToastService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<RVToastContainer Position="bottom-right" />

<RVCard Title="Organization Management" Icon="far fa-users" Size="lg">
    <HeaderActions>
        <RVButton Text="Add Company"
                  IconLeft="far fa-plus"
                  ButtonType="primary"
                  OnClick="() => OpenCompanyDialog()" />
    </HeaderActions>
    <ChildContent>
        <div class="mb-4">
            <RVTextbox Placeholder="Search companies, branches or users..."
                       IconLeft="far fa-search"
                       Value="@searchTerm"
                       ValueChanged="@((val) => OnSearchChanged(val))"
                       CssClass="w-100" />
        </div>

        @if (isLoading)
        {
            <div class="d-flex justify-content-center align-items-center my-5">
                <div class="loading-spinner"></div>
                <span class="ms-3 text-muted">Loading data...</span>
            </div>
        }
        else if (loadError)
        {
            <div class="alert alert-danger d-flex align-items-center mb-3">
                <i class="far fa-exclamation-triangle me-2"></i>
                <div>
                    <p class="mb-1"><strong>Error loading data</strong></p>
                    <p class="mb-0">@errorMessage</p>
                </div>
                <RVButton Text="Try Again" ButtonType="outline-danger" OnClick="LoadCompanies" CssClass="ms-auto" />
            </div>
        }
        else
        {
            @if (!FilteredCompanies.Any())
            {
                <div class="empty-state">
                    <i class="far fa-building empty-illustration"></i>
                    <h3>No Companies Found</h3>
                    <p>@(companies.Any() ? "Your search returned no results." : "You haven't added any companies yet.")</p>
                    <div class="empty-actions">
                        <RVButton Text="Add Company" IconLeft="far fa-plus" ButtonType="primary" OnClick="() => OpenCompanyDialog()" />
                        @if (companies.Any() && !string.IsNullOrWhiteSpace(searchTerm))
                        {
                            <RVButton Text="Clear Search" IconLeft="far fa-times" ButtonType="outline" OnClick="ClearSearch" />
                        }
                    </div>
                </div>
            }
            else
            {
                @foreach (var company in FilteredCompanies)
                {
                    <RVCard Title="@company.Name"
                            Icon="far fa-building"
                            Type="border-primary"
                            Hover="true"
                            CssClass="mb-4">
                        <HeaderActions>
                            <div class="d-flex gap-2">
                                <RVButton Text=""
                                          IconLeft="far fa-edit"
                                          ButtonType="outline"
                                          Size="sm"
                                          OnClick="() => EditCompany(company)"
                                          CssClass="p-2" />
                                <RVButton Text="Add Branch"
                                          IconLeft="far fa-plus"
                                          ButtonType="primary"
                                          Size="sm"
                                          OnClick="() => OpenBranchDialog(company.Id)" />
                            </div>
                        </HeaderActions>
                        <ChildContent>
                            <div class="mb-3">
                                <div class="d-flex flex-wrap gap-3 mb-2">
                                    @if (company.ContactNumbers != null && company.ContactNumbers.Any(c => c.IsPrimary))
                                    {
                                        <div class="badge badge-secondary">
                                            <i class="far fa-phone me-1"></i> @(company.GetPrimaryContactNumber())
                                        </div>
                                    }
                                    @if (company.EmailAddresses != null && company.EmailAddresses.Any(e => e.IsPrimary))
                                    {
                                        <div class="badge badge-secondary">
                                            <i class="far fa-envelope me-1"></i> @(company.GetPrimaryEmail())
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(company.Website))
                                    {
                                        <div class="badge badge-secondary">
                                            <i class="far fa-globe me-1"></i> @company.Website
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(company.RegistrationNumber))
                                    {
                                        <div class="badge badge-secondary">
                                            <i class="far fa-id-card me-1"></i> @company.RegistrationNumber
                                        </div>
                                    }
                                </div>
                            </div>

                            @if (!HasBranches(company))
                            {
                                <div class="alert alert-info d-flex align-items-center mb-3">
                                    <i class="far fa-info-circle me-2"></i>
                                    <span>No branches have been added to this company yet.</span>
                                </div>
                            }
                            else
                            {
                                <RVTab Style="pills">
                                    <ChildContent>
                                        @foreach (var branch in company.Branches)
                                        {
                                            <RVTabPanel IsActive="@(branch == company.Branches.First())" Text="@branch.Name">
                                                <ChildContent>
                                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                                        <h5 class="mb-0">
                                                            <i class="far fa-building text-primary me-2"></i>
                                                            @branch.Name
                                                        </h5>
                                                        <div class="d-flex gap-2">
                                                            <RVButton Text=""
                                                                      IconLeft="far fa-edit"
                                                                      ButtonType="ghost"
                                                                      Size="sm"
                                                                      OnClick="() => EditBranch(branch)"
                                                                      CssClass="p-2" />
                                                            <RVButton Text="Add User"
                                                                      IconLeft="far fa-user-plus"
                                                                      ButtonType="primary"
                                                                      Size="sm"
                                                                      OnClick="() => OpenUserDialog(company.Id, branch.Id)" />
                                                        </div>
                                                    </div>

                                                    <div class="d-flex flex-wrap gap-2 mb-3">
                                                        @if (branch.ContactNumbers != null && branch.ContactNumbers.Any(c => c.IsPrimary))
                                                        {
                                                            <div class="badge badge-secondary">
                                                                <i class="far fa-phone me-1"></i> @(branch.GetPrimaryContactNumber())
                                                            </div>
                                                        }
                                                        @if (branch.EmailAddresses != null && branch.EmailAddresses.Any(e => e.IsPrimary))
                                                        {
                                                            <div class="badge badge-secondary">
                                                                <i class="far fa-envelope me-1"></i> @(branch.GetPrimaryEmail())
                                                            </div>
                                                        }
                                                        @if (branch.Address != null && !string.IsNullOrEmpty(branch.Address.City))
                                                        {
                                                            <div class="badge badge-secondary">
                                                                <i class="far fa-map-marker-alt me-1"></i> @branch.Address.City
                                                            </div>
                                                        }
                                                    </div>

                                                    @if (!HasUsers(branch))
                                                    {
                                                        <div class="alert alert-info d-flex align-items-center">
                                                            <i class="far fa-info-circle me-2"></i>
                                                            <span>No users have been added to this branch yet.</span>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <RVCard Type="soft-secondary" Size="sm" CssClass="mb-3">
                                                            <ChildContent>
                                                                <div class="grid grid-cols-1 gap-2">
                                                                    @foreach (var user in branch.Users)
                                                                    {
                                                                        <div class="border rounded p-3 bg-white d-flex justify-content-between align-items-center">
                                                                            <div class="d-flex align-items-center">
                                                                                <div class="d-flex justify-content-center align-items-center rounded-circle bg-primary-light text-primary p-2 me-3" style="width: 40px; height: 40px;">
                                                                                    <i class="@GetRoleIcon(user.Role.GetValueOrDefault())"></i>
                                                                                </div>
                                                                                <div>
                                                                                    <div class="font-weight-semibold">@user.FullName</div>
                                                                                    <div class="text-muted small">@user.Email</div>
                                                                                </div>
                                                                            </div>
                                                                            <div class="d-flex align-items-center">
                                                                                <div class="badge badge-primary me-3">
                                                                                    @GetRoleName(user.Role.GetValueOrDefault())
                                                                                </div>
                                                                                <RVButton Text=""
                                                                                          IconLeft="far fa-edit"
                                                                                          ButtonType="ghost"
                                                                                          Size="sm"
                                                                                          OnClick="() => EditUser(user)"
                                                                                          CssClass="p-2" />
                                                                            </div>
                                                                        </div>
                                                                    }
                                                                </div>
                                                            </ChildContent>
                                                        </RVCard>
                                                    }
                                                </ChildContent>
                                            </RVTabPanel>
                                        }
                                    </ChildContent>
                                </RVTab>
                            }
                        </ChildContent>
                    </RVCard>
                }
            }
        }
    </ChildContent>
</RVCard>

@if (companyDialogVisible)
{
    <CompanyDialog IsVisible="@companyDialogVisible"
                   IsEdit="@editMode"
                   CompanyModel="@selectedCompany"
                   OnSave="SaveCompany"
                   OnCancel="CloseCompanyDialog" />
}

@if (branchDialogVisible)
{
    <BranchDialog IsVisible="@branchDialogVisible"
                  IsEdit="@editMode"
                  BranchModel="@selectedBranch"
                  CompanyId="@selectedCompanyId"
                  OnSave="SaveBranch"
                  OnCancel="CloseBranchDialog" />
}

@if (userDialogVisible)
{
    <UserDialog IsVisible="@userDialogVisible"
                IsEdit="@editMode"
                UserModel="@selectedUser"
                CompanyId="@selectedCompanyId"
                BranchId="@selectedBranchId"
                OnSave="SaveUser"
                OnCancel="CloseUserDialog" />
}

@code {
    private string searchTerm = string.Empty;
    private bool isLoading = true;
    private bool loadError = false;
    private string errorMessage = string.Empty;

    // Data
    private List<Company> companies = new List<Company>();

    // Dialog states
    private bool companyDialogVisible = false;
    private bool branchDialogVisible = false;
    private bool userDialogVisible = false;
    private bool editMode = false;

    // Selected items
    private Company selectedCompany = new Company();
    private Branch selectedBranch = new Branch();
    private ApplicationUser selectedUser = new ApplicationUser();
    private int selectedCompanyId;
    private int selectedBranchId;

    private IEnumerable<Company> FilteredCompanies => string.IsNullOrWhiteSpace(searchTerm)
        ? companies
        : companies.Where(c =>
            (c.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (c.RegistrationNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (c.EmailAddresses?.Any(e => e.EmailAddress?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ?? false) ||
            (c.ContactNumbers?.Any(n => n.Number?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ?? false) ||
            (c.Branches?.Any(b =>
                (b.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (b.EmailAddresses?.Any(e => e.EmailAddress?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ?? false) ||
                (b.ContactNumbers?.Any(n => n.Number?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ?? false) ||
                (b.Users?.Any(u =>
                    (u.FirstName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (u.LastName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (u.Email?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
                ) ?? false)
            ) ?? false)
        );

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
    }

    private async Task LoadCompanies()
    {
        isLoading = true;
        loadError = false;
        errorMessage = string.Empty;

        try
        {
            var response = await UserService.GetAllCompanies();

            if (response.ResponseInfo.Success && response.Response != null)
            {
                companies = (List<Company>)response.Response;

                // Load branches and users for each company
                foreach (var company in companies)
                {
                    if (company.Branches == null || !company.Branches.Any())
                    {
                        var branchesResponse = await UserService.GetBranchesByCompany(company.Id);
                        if (branchesResponse.ResponseInfo.Success && branchesResponse.Response != null)
                        {
                            company.Branches = (List<Branch>)branchesResponse.Response;

                            // Load users for each branch
                            foreach (var branch in company.Branches)
                            {
                                var usersResponse = await UserService.GetUsersByBranch(branch.Id);
                                if (usersResponse.ResponseInfo.Success && usersResponse.Response != null)
                                {
                                    branch.Users = (List<ApplicationUser>)usersResponse.Response;
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                loadError = true;
                errorMessage = response.ResponseInfo.Message ?? "Failed to load companies.";
            }
        }
        catch (Exception ex)
        {
            loadError = true;
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnSearchChanged(string value)
    {
        searchTerm = value;
        StateHasChanged();
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        StateHasChanged();
    }

    private bool HasBranches(Company company)
    {
        return company.Branches != null && company.Branches.Any();
    }

    private bool HasUsers(Branch branch)
    {
        return branch.Users != null && branch.Users.Any();
    }

    private string GetRoleIcon(UserRole role)
    {
        return role switch
        {
            UserRole.GlobalAdmin => "far fa-user-crown",
            UserRole.CompanyAdmin => "far fa-user-tie",
            UserRole.BranchManager => "far fa-user-hard-hat",
            UserRole.StandardUser => "far fa-user",
            _ => "far fa-user"
        };
    }

    private string GetRoleName(UserRole role)
    {
        return role switch
        {
            UserRole.GlobalAdmin => "Global Admin",
            UserRole.CompanyAdmin => "Company Admin",
            UserRole.BranchManager => "Branch Manager",
            UserRole.StandardUser => "Standard User",
            _ => "Unknown Role"
        };
    }

    // Company Dialog Methods
    private void OpenCompanyDialog()
    {
        selectedCompany = new Company
            {
                Address = new Address(),
                EmailAddresses = new List<Email>
            {
                new Email { IsPrimary = true, IsActive = true, RelatedEntityType = "Company" }
            },
                ContactNumbers = new List<ContactNumber>
            {
                new ContactNumber { IsPrimary = true, IsActive = true, RelatedEntityType = "Company", Type = ContactNumberType.Mobile }
            }
            };
        editMode = false;
        companyDialogVisible = true;
    }

    private void EditCompany(Company company)
    {
        selectedCompany = company;

        // Ensure the company has at least one email and contact number
        if (selectedCompany.EmailAddresses == null)
        {
            selectedCompany.EmailAddresses = new List<Email>();
        }

        if (!selectedCompany.EmailAddresses.Any(e => e.IsPrimary))
        {
            selectedCompany.EmailAddresses.Add(new Email
                {
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Company",
                    RelatedEntityId = company.Id
                });
        }

        if (selectedCompany.ContactNumbers == null)
        {
            selectedCompany.ContactNumbers = new List<ContactNumber>();
        }

        if (!selectedCompany.ContactNumbers.Any(c => c.IsPrimary))
        {
            selectedCompany.ContactNumbers.Add(new ContactNumber
                {
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Company",
                    RelatedEntityId = company.Id,
                    Type = ContactNumberType.Mobile
                });
        }

        editMode = true;
        companyDialogVisible = true;
    }

    private void CloseCompanyDialog()
    {
        companyDialogVisible = false;
    }

    private async Task SaveCompany(Company company)
    {
        isLoading = true;

        try
        {
            ResponseModel response;

            // Set audit fields
            if (editMode)
            {
                company.UpdatedDate = DateTime.Now;
                company.UpdatedBy = "CurrentUser"; // Replace with actual logged-in user ID/name

                response = await UserService.UpdateCompany(company.Id, company);
            }
            else
            {
                company.CreatedOn = DateTime.Now;
               // company.CreatedBy = 1; // Replace with actual logged-in user ID
                company.IsActive = true;

                // Initialize collections if null
                if (company.EmailAddresses == null)
                    company.EmailAddresses = new List<Email>();

                if (company.ContactNumbers == null)
                    company.ContactNumbers = new List<ContactNumber>();

                // Set primary email
                if (!company.EmailAddresses.Any(e => e.IsPrimary) && !string.IsNullOrEmpty(company.GetPrimaryEmail()))
                {
                    company.EmailAddresses.Add(new Email
                        {
                            EmailAddress = company.GetPrimaryEmail(),
                            IsPrimary = true,
                            IsActive = true,
                            RelatedEntityType = "Company",
                            CreatedOn = DateTime.Now
                        });
                }

                // Set primary contact number
                if (!company.ContactNumbers.Any(c => c.IsPrimary) && !string.IsNullOrEmpty(company.GetPrimaryContactNumber()))
                {
                    company.ContactNumbers.Add(new ContactNumber
                        {
                            Number = company.GetPrimaryContactNumber(),
                            IsPrimary = true,
                            IsActive = true,
                            RelatedEntityType = "Company",
                            Type = ContactNumberType.Mobile,
                            CreatedOn = DateTime.Now
                        });
                }

                response = await UserService.CreateCompany(company);
            }

            if (response.ResponseInfo.Success)
            {
                ToastService.ShowSuccess(response.ResponseInfo.Message, "Success");
                await LoadCompanies();
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"An error occurred: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
            companyDialogVisible = false;
            StateHasChanged();
        }
    }

    // Branch Dialog Methods
    private void OpenBranchDialog(int companyId)
    {
        selectedCompanyId = companyId;
        selectedBranch = new Branch
            {
                CompanyId = companyId,
                Address = new Address(),
                EmailAddresses = new List<Email>
            {
                new Email { IsPrimary = true, IsActive = true, RelatedEntityType = "Branch" }
            },
                ContactNumbers = new List<ContactNumber>
            {
                new ContactNumber { IsPrimary = true, IsActive = true, RelatedEntityType = "Branch", Type = ContactNumberType.Mobile }
            }
            };
        editMode = false;
        branchDialogVisible = true;
    }

    private void EditBranch(Branch branch)
    {
        selectedBranch = branch;
        selectedCompanyId = branch.CompanyId;

        // Ensure the branch has at least one email and contact number
        if (selectedBranch.EmailAddresses == null)
        {
            selectedBranch.EmailAddresses = new List<Email>();
        }

        if (!selectedBranch.EmailAddresses.Any(e => e.IsPrimary))
        {
            selectedBranch.EmailAddresses.Add(new Email
                {
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Branch",
                    RelatedEntityId = branch.Id
                });
        }

        if (selectedBranch.ContactNumbers == null)
        {
            selectedBranch.ContactNumbers = new List<ContactNumber>();
        }

        if (!selectedBranch.ContactNumbers.Any(c => c.IsPrimary))
        {
            selectedBranch.ContactNumbers.Add(new ContactNumber
                {
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Branch",
                    RelatedEntityId = branch.Id,
                    Type = ContactNumberType.Mobile
                });
        }

        editMode = true;
        branchDialogVisible = true;
    }

    private void CloseBranchDialog()
    {
        branchDialogVisible = false;
    }

    private async Task SaveBranch(Branch branch)
    {
        isLoading = true;

        try
        {
            ResponseModel response;

            // Set audit fields
            if (editMode)
            {
                branch.UpdatedDate = DateTime.Now;
                branch.UpdatedBy = "CurrentUser"; // Replace with actual logged-in user ID/name

                response = await UserService.UpdateBranch(branch.Id, branch);
            }
            else
            {
                branch.CreatedOn = DateTime.Now;
                branch.CreatedBy = "CurrentUser"; // Replace with actual logged-in user ID/name
                branch.IsActive = true;

                // Initialize collections if null
                if (branch.EmailAddresses == null)
                    branch.EmailAddresses = new List<Email>();

                if (branch.ContactNumbers == null)
                    branch.ContactNumbers = new List<ContactNumber>();

                // Set primary email
                if (!branch.EmailAddresses.Any(e => e.IsPrimary) && !string.IsNullOrEmpty(branch.GetPrimaryEmail()))
                {
                    branch.EmailAddresses.Add(new Email
                        {
                            EmailAddress = branch.GetPrimaryEmail(),
                            IsPrimary = true,
                            IsActive = true,
                            RelatedEntityType = "Branch",
                            CreatedOn = DateTime.Now
                        });
                }

                // Set primary contact number
                if (!branch.ContactNumbers.Any(c => c.IsPrimary) && !string.IsNullOrEmpty(branch.GetPrimaryContactNumber()))
                {
                    branch.ContactNumbers.Add(new ContactNumber
                        {
                            Number = branch.GetPrimaryContactNumber(),
                            IsPrimary = true,
                            IsActive = true,
                            RelatedEntityType = "Branch",
                            Type = ContactNumberType.Mobile,
                            CreatedOn = DateTime.Now
                        });
                }

                response = await UserService.CreateBranch(branch);
            }

            if (response.ResponseInfo.Success)
            {
                ToastService.ShowSuccess(response.ResponseInfo.Message, "Success");
                await LoadCompanies();
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"An error occurred: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
            branchDialogVisible = false;
            StateHasChanged();
        }
    }

    // User Dialog Methods
    private void OpenUserDialog(int companyId, int branchId)
    {
        selectedCompanyId = companyId;
        selectedBranchId = branchId;
        selectedUser = new ApplicationUser
            {
                CompanyId = companyId,
                BranchId = branchId,
                Role = UserRole.StandardUser,
                IsActive = true,
                EmailAddresses = new List<Email>
            {
                new Email { IsPrimary = true, IsActive = true, RelatedEntityType = "User" }
            },
                ContactNumbers = new List<ContactNumber>
            {
                new ContactNumber { IsPrimary = true, IsActive = true, RelatedEntityType = "User", Type = ContactNumberType.Mobile }
            }
            };
        editMode = false;
        userDialogVisible = true;
    }

    private void EditUser(ApplicationUser user)
    {
        selectedUser = user;
        selectedCompanyId = user.CompanyId ?? 0;
        selectedBranchId = user.BranchId ?? 0;

        // Ensure the user has at least one email and contact number
        if (selectedUser.EmailAddresses == null)
        {
            selectedUser.EmailAddresses = new List<Email>();
        }

        if (!selectedUser.EmailAddresses.Any(e => e.IsPrimary))
        {
            selectedUser.EmailAddresses.Add(new Email
                {
                    EmailAddress = user.Email,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "User",
                    RelatedEntityId = int.Parse(user.Id)
                });
        }

        if (selectedUser.ContactNumbers == null)
        {
            selectedUser.ContactNumbers = new List<ContactNumber>();
        }

        if (!selectedUser.ContactNumbers.Any(c => c.IsPrimary))
        {
            selectedUser.ContactNumbers.Add(new ContactNumber
                {
                    Number = user.PhoneNumber,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "User",
                    RelatedEntityId = int.Parse(user.Id),
                    Type = ContactNumberType.Mobile
                });
        }

        editMode = true;
        userDialogVisible = true;
    }

    private void CloseUserDialog()
    {
        userDialogVisible = false;
    }

    private async Task SaveUser(ApplicationUser user)
    {
        isLoading = true;

        try
        {
            ResponseModel response;

            // Set common properties
            user.UserName = user.Email;

            if (editMode)
            {
                user.UpdatedDate = DateTime.Now;
                user.UpdatedBy = "CurrentUser"; // Replace with actual logged-in user ID/name

                // Convert string ID to int for the service
                int userId = int.Parse(user.Id);
                response = await UserService.UpdateUser(userId, user);
            }
            else
            {
                user.CreatedDate = DateTime.Now;
                user.CreatedBy = "CurrentUser"; // Replace with actual logged-in user ID/name

                // In a real app, you would need to create the user with Identity first
                // This is a simplified example
                // Here we would typically call UserManager<ApplicationUser> to create the user

                // After creating the user, update company and branch assignments
                // await UserService.UpdateUserCompanyId(userId, user.CompanyId.Value);
                // await UserService.UpdateUserBranch(user.Id, user.BranchId.Value);

                // Since we cannot create a user here without Identity, show a toast
                ToastService.ShowInfo("In production, this would create a new user with Identity", "Demo Mode");
                response = new ResponseModel
                    {
                        ResponseInfo = new ResponseInfo
                        {
                            Success = true,
                            Message = "User creation simulated successfully"
                        }
                    };
            }

            if (response.ResponseInfo.Success)
            {
                ToastService.ShowSuccess(response.ResponseInfo.Message, "Success");
                await LoadCompanies();
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"An error occurred: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
            userDialogVisible = false;
            StateHasChanged();
        }
    }
}