@page "/Users"
@using Roovia.Models.Users
@using Roovia.Models.Helper
@using Roovia.Interfaces
@using Roovia.Services
@inject IUser UserService
@inject ToastService ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<RVToastContainer Position="bottom-right" />

<div class="organization-dashboard">
    <header class="dashboard-header">
        <div class="header-container">
            <div class="header-title">
                <h1><i class="far fa-sitemap me-2"></i>Organization Management</h1>
                <p>Manage your company structure, branches, and team members</p>
            </div>
            <div class="header-actions">
                <div class="search-wrapper">
                    <RVTextbox Placeholder="Search organizations..."
                              IconLeft="far fa-search"
                              Value="@searchTerm"
                              CssClass="header-search" />
                    
                    @if (!string.IsNullOrWhiteSpace(searchTerm))
                    {
                        <button class="search-clear-btn" @onclick="ClearSearch">
                            <i class="far fa-times"></i>
                        </button>
                    }
                </div>
                <RVButton Text="Add Company"
                         IconLeft="far fa-building-circle-check"
                         ButtonType="primary"
                         OnClick="() => OpenCompanyDialog()" />
            </div>
        </div>
    </header>

    <div class="dashboard-content">
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="loading-animation">
                    <div class="loading-circle"></div>
                    <div class="loading-circle"></div>
                    <div class="loading-circle"></div>
                </div>
                <h3>Loading Organization Data</h3>
                <p>Please wait while we retrieve your organization structure...</p>
            </div>
        }
        else if (loadError)
        {
            <div class="error-state">
                <i class="far fa-times-hexagon"></i>
                <h3>Failed to Load Organization Data</h3>
                <p>@errorMessage</p>
                <RVButton Text="Try Again" 
                         ButtonType="primary" 
                         OnClick="LoadCompanies" 
                         CssClass="retry-button" />
            </div>
        }
        else
        {
            @if (!FilteredCompanies.Any())
            {
                <div class="empty-state">
                    <div class="empty-animation">
                        <i class="far fa-building"></i>
                        <i class="far fa-plus-circle"></i>
                    </div>
                    <h3>No Companies Found</h3>
                    <p>@(companies.Any() ? "Your search returned no results." : "You haven't added any companies yet.")</p>
                    <div class="empty-actions">
                        <RVButton Text="Add Your First Company" 
                                 IconLeft="far fa-building-circle-plus" 
                                 ButtonType="primary" 
                                 OnClick="() => OpenCompanyDialog()" 
                                 CssClass="primary-action" />
                        @if (companies.Any() && !string.IsNullOrWhiteSpace(searchTerm))
                        {
                            <RVButton Text="Clear Search" 
                                     IconLeft="far fa-filter-slash" 
                                     ButtonType="secondary" 
                                     OnClick="ClearSearch" />
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="company-grid">
                    @foreach (var company in FilteredCompanies)
                    {
                        <div class="company-card @(IsExpanded(company.Id) ? "expanded" : "")" id="company-@company.Id">
                            <div class="company-card-header" @onclick="() => ToggleCompanyExpansion(company.Id)">
                                <div class="company-info">
                                    <div class="company-avatar">
                                        @company.Name.Substring(0, 1)
                                    </div>
                                    <div class="company-title">
                                        <h2>@company.Name</h2>
                                        <div class="company-meta">
                                            <span><i class="far fa-building"></i> @(company.Branches?.Count ?? 0) branches</span>
                                            <span><i class="far fa-users"></i> @(company.Branches?.Sum(b => b.Users?.Count ?? 0) ?? 0) users</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="company-actions">
                                    <button class="btn-icon" title="Edit Company" @onclick:stopPropagation="true" @onclick="() => EditCompany(company)">
                                        <i class="far fa-edit"></i>
                                    </button>
                                    <RVButton Text="Add Branch"
                                             IconLeft="far fa-code-branch"
                                             ButtonType="outline"
                                             Size="sm"
                                             OnClick="() => OpenBranchDialog(company.Id)"
                                              />
                                    <div class="expand-indicator">
                                        <i class="far fa-chevron-@(IsExpanded(company.Id) ? "up" : "down")"></i>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="company-card-body">
                                <div class="company-details">
                                    <div class="detail-item">
                                        <i class="far fa-id-card"></i>
                                        <span class="detail-label">Reg. Number:</span>
                                        <span class="detail-value">@(string.IsNullOrEmpty(company.RegistrationNumber) ? "—" : company.RegistrationNumber)</span>
                                    </div>
                                    <div class="detail-item">
                                        <i class="far fa-at"></i>
                                        <span class="detail-label">Email:</span>
                                        <span class="detail-value">@(company.GetPrimaryEmail() ?? "—")</span>
                                    </div>
                                    <div class="detail-item">
                                        <i class="far fa-phone"></i>
                                        <span class="detail-label">Phone:</span>
                                        <span class="detail-value">@(company.GetPrimaryContactNumber() ?? "—")</span>
                                    </div>
                                    <div class="detail-item">
                                        <i class="far fa-globe"></i>
                                        <span class="detail-label">Website:</span>
                                        <span class="detail-value">@(string.IsNullOrEmpty(company.Website) ? "—" : company.Website)</span>
                                    </div>
                                </div>

                                @if (!HasBranches(company))
                                {
                                    <div class="no-branches-message">
                                        <i class="far fa-code-branch"></i>
                                        <p>No branches have been added to this company yet</p>
                                        <RVButton Text="Add First Branch"
                                                 IconLeft="far fa-plus"
                                                 ButtonType="primary"
                                                 Size="sm"
                                                 OnClick="() => OpenBranchDialog(company.Id)" />
                                    </div>
                                }
                                else
                                {
                                    <div class="branch-tabs">
                                        <div class="branch-tabs-header">
                                            @foreach (var branch in company.Branches)
                                            {
                                                <button class="branch-tab @(activeBranchTabs.ContainsKey(company.Id) && activeBranchTabs[company.Id] == branch.Id ? "active" : "")"
                                                        @onclick="() => SetActiveBranchTab(company.Id, branch.Id)">
                                                    <i class="far fa-code-branch"></i>
                                                    <span>@branch.Name</span>
                                                </button>
                                            }
                                        </div>
                                        
                                        <div class="branch-tabs-content">
                                            @foreach (var branch in company.Branches)
                                            {
                                                <div class="branch-tab-panel @(activeBranchTabs.ContainsKey(company.Id) && activeBranchTabs[company.Id] == branch.Id ? "active" : "")">
                                                    <div class="branch-header">
                                                        <div class="branch-info">
                                                            <h3>@branch.Name</h3>
                                                            <div class="branch-meta">
                                                                @if (branch.Address != null)
                                                                {
                                                                    <span><i class="far fa-map-marker-alt"></i> @(string.IsNullOrEmpty(branch.Address.City) ? "No location" : $"{branch.Address.City}, {branch.Address.Province}")</span>
                                                                }
                                                                <span><i class="far fa-phone"></i> @(branch.GetPrimaryContactNumber() ?? "No phone")</span>
                                                                <span><i class="far fa-envelope"></i> @(branch.GetPrimaryEmail() ?? "No email")</span>
                                                            </div>
                                                        </div>
                                                        <div class="branch-actions">
                                                            <button class="btn-icon" title="Edit Branch" @onclick="() => EditBranch(branch)">
                                                                <i class="far fa-edit"></i>
                                                            </button>
                                                            <RVButton Text="Add User"
                                                                     IconLeft="far fa-user-plus"
                                                                     ButtonType="primary"
                                                                     Size="sm"
                                                                     OnClick="() => OpenUserDialog(company.Id, branch.Id)" />
                                                        </div>
                                                    </div>

                                                    @if (!HasUsers(branch))
                                                    {
                                                        <div class="no-users-message">
                                                            <i class="far fa-users"></i>
                                                            <p>No users have been added to this branch yet</p>
                                                            <RVButton Text="Add First User"
                                                                     IconLeft="far fa-user-plus"
                                                                     ButtonType="primary"
                                                                     Size="sm"
                                                                     OnClick="() => OpenUserDialog(company.Id, branch.Id)" />
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="users-grid">
                                                            @foreach (var user in branch.Users)
                                                            {
                                                                <div class="user-card">
                                                                    <div class="user-avatar @GetRoleClass(user.Role)">
                                                                        <i class="@GetRoleIcon(user.Role)"></i>
                                                                    </div>
                                                                    <div class="user-info">
                                                                        <h4>@user.FullName</h4>
                                                                        <div class="user-meta">
                                                                            <span class="role-badge @GetRoleClass(user.Role)">
                                                                                @GetRoleName(user.Role)
                                                                            </span>
                                                                            <span class="status-indicator @(user.IsActive ? "active" : "inactive")">
                                                                                @(user.IsActive ? "Active" : "Inactive")
                                                                            </span>
                                                                        </div>
                                                                        <div class="user-contact">
                                                                            <span><i class="far fa-envelope"></i> @user.Email</span>
                                                                            @if (!string.IsNullOrEmpty(user.PhoneNumber))
                                                                            {
                                                                                <span><i class="far fa-phone"></i> @user.PhoneNumber</span>
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                    <div class="user-actions">
                                                                        <button class="btn-icon" title="Edit User" @onclick="() => EditUser(user)">
                                                                            <i class="far fa-edit"></i>
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

@if (companyDialogVisible)
{
    <CompanyDialog IsVisible="@companyDialogVisible"
                   IsEdit="@editMode"
                   CompanyModel="@selectedCompany"
                   OnSave="SaveCompany"
                   OnCancel="CloseCompanyDialog" />
}

@if (branchDialogVisible)
{
    <BranchDialog IsVisible="@branchDialogVisible"
                  IsEdit="@editMode"
                  BranchModel="@selectedBranch"
                  CompanyId="@selectedCompanyId"
                  OnSave="SaveBranch"
                  OnCancel="CloseBranchDialog" />
}

@if (userDialogVisible)
{
    <UserDialog IsVisible="@userDialogVisible"
                IsEdit="@editMode"
                UserModel="@selectedUser"
                CompanyId="@selectedCompanyId"
                BranchId="@selectedBranchId"
                OnSave="SaveUser"
                OnCancel="CloseUserDialog" />
}



@code {
    private string searchTerm = string.Empty;
    private bool isLoading = true;
    private bool loadError = false;
    private string errorMessage = string.Empty;

    // Data
    private List<Company> companies = new List<Company>();
    
    // UI State
    private HashSet<int> expandedCompanies = new HashSet<int>();
    private Dictionary<int, int> activeBranchTabs = new Dictionary<int, int>();

    // Dialog states
    private bool companyDialogVisible = false;
    private bool branchDialogVisible = false;
    private bool userDialogVisible = false;
    private bool editMode = false;

    // Selected items
    private Company selectedCompany = new Company();
    private Branch selectedBranch = new Branch();
    private ApplicationUser selectedUser = new ApplicationUser();
    private int selectedCompanyId;
    private int selectedBranchId;

    private IEnumerable<Company> FilteredCompanies => string.IsNullOrWhiteSpace(searchTerm)
        ? companies
        : companies.Where(c =>
            (c.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (c.RegistrationNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (c.EmailAddresses?.Any(e => e.EmailAddress?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ?? false) ||
            (c.ContactNumbers?.Any(n => n.Number?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ?? false) ||
            (c.Branches?.Any(b =>
                (b.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (b.EmailAddresses?.Any(e => e.EmailAddress?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ?? false) ||
                (b.ContactNumbers?.Any(n => n.Number?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ?? false) ||
                (b.Users?.Any(u =>
                    (u.FirstName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (u.LastName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (u.Email?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
                ) ?? false)
            ) ?? false)
        );

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Add scroll into view behavior for expanded companies
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.scrollElementIntoView = function(elementId) {
                    const element = document.getElementById(elementId);
                    if (element) {
                        element.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    }
                }
            ");
        }
    }

    private async Task LoadCompanies()
    {
        isLoading = true;
        loadError = false;
        errorMessage = string.Empty;

        try
        {
            var response = await UserService.GetAllCompanies();

            if (response.ResponseInfo.Success && response.Response != null)
            {
                companies = (List<Company>)response.Response;

                // Load branches and users for each company
                foreach (var company in companies)
                {
                    if (company.Branches == null || !company.Branches.Any())
                    {
                        var branchesResponse = await UserService.GetBranchesByCompany(company.Id);
                        if (branchesResponse.ResponseInfo.Success && branchesResponse.Response != null)
                        {
                            company.Branches = (List<Branch>)branchesResponse.Response;

                            // Load users for each branch
                            foreach (var branch in company.Branches)
                            {
                                var usersResponse = await UserService.GetUsersByBranch(branch.Id);
                                if (usersResponse.ResponseInfo.Success && usersResponse.Response != null)
                                {
                                    branch.Users = (List<ApplicationUser>)usersResponse.Response;
                                }
                            }
                            
                            // Set active branch tab to first branch
                            if (company.Branches.Any())
                            {
                                activeBranchTabs[company.Id] = company.Branches.First().Id;
                            }
                        }
                    }
                    else if (company.Branches.Any() && !activeBranchTabs.ContainsKey(company.Id))
                    {
                        // Set active branch tab to first branch if not set
                        activeBranchTabs[company.Id] = company.Branches.First().Id;
                    }
                }
            }
            else
            {
                loadError = true;
                errorMessage = response.ResponseInfo.Message ?? "Failed to load companies.";
            }
        }
        catch (Exception ex)
        {
            loadError = true;
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnSearchChanged(string value)
    {
        searchTerm = value;
        StateHasChanged();
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        StateHasChanged();
    }

    private bool HasBranches(Company company)
    {
        return company.Branches != null && company.Branches.Any();
    }

    private bool HasUsers(Branch branch)
    {
        return branch.Users != null && branch.Users.Any();
    }

    private string GetRoleIcon(SystemRole role)
    {
        return role switch
        {
            SystemRole.GlobalAdmin => "far fa-user-crown",
            SystemRole.CompanyAdmin => "far fa-user-tie",
            SystemRole.BranchManager => "far fa-user-hard-hat",
            SystemRole.StandardUser => "far fa-user",
            _ => "far fa-user"
        };
    }

    private string GetRoleClass(SystemRole role)
    {
        return role switch
        {
            SystemRole.GlobalAdmin => "global-admin",
            SystemRole.CompanyAdmin => "company-admin",
            SystemRole.BranchManager => "branch-manager",
            SystemRole.StandardUser => "standard-user",
            _ => "standard-user"
        };
    }

    private string GetRoleName(SystemRole role)
    {
        return role switch
        {
            SystemRole.GlobalAdmin => "Global Admin",
            SystemRole.CompanyAdmin => "Company Admin",
            SystemRole.BranchManager => "Branch Manager",
            SystemRole.StandardUser => "Standard User",
            _ => "Unknown Role"
        };
    }
    
    // UI State Management
    private bool IsExpanded(int companyId)
    {
        return expandedCompanies.Contains(companyId);
    }
    
    private async Task ToggleCompanyExpansion(int companyId)
    {
        if (expandedCompanies.Contains(companyId))
        {
            expandedCompanies.Remove(companyId);
        }
        else
        {
            expandedCompanies.Add(companyId);
            
            // Ensure a branch tab is selected
            var company = companies.FirstOrDefault(c => c.Id == companyId);
            if (company?.Branches != null && company.Branches.Any() && !activeBranchTabs.ContainsKey(companyId))
            {
                activeBranchTabs[companyId] = company.Branches.First().Id;
            }
            
            // Scroll expanded company into view
            await Task.Delay(100); // Small delay to let the DOM update
            await JSRuntime.InvokeVoidAsync("scrollElementIntoView", $"company-{companyId}");
        }
    }
    
    private void SetActiveBranchTab(int companyId, int branchId)
    {
        activeBranchTabs[companyId] = branchId;
        StateHasChanged();
    }

    // Company Dialog Methods
    private void OpenCompanyDialog()
    {
        selectedCompany = new Company
            {
                Address = new Address(),
                EmailAddresses = new List<Email>
                {
                    new Email { IsPrimary = true, IsActive = true, RelatedEntityType = "Company" }
                },
                ContactNumbers = new List<ContactNumber>
                {
                    new ContactNumber { IsPrimary = true, IsActive = true, RelatedEntityType = "Company", Type = ContactNumberType.Mobile }
                }
            };
        editMode = false;
        companyDialogVisible = true;
    }

    private void EditCompany(Company company)
    {
        selectedCompany = company;

        // Ensure the company has at least one email and contact number
        if (selectedCompany.EmailAddresses == null)
        {
            selectedCompany.EmailAddresses = new List<Email>();
        }

        if (!selectedCompany.EmailAddresses.Any(e => e.IsPrimary))
        {
            selectedCompany.EmailAddresses.Add(new Email
                {
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Company",
                    RelatedEntityId = company.Id
                });
        }

        if (selectedCompany.ContactNumbers == null)
        {
            selectedCompany.ContactNumbers = new List<ContactNumber>();
        }

        if (!selectedCompany.ContactNumbers.Any(c => c.IsPrimary))
        {
            selectedCompany.ContactNumbers.Add(new ContactNumber
                {
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Company",
                    RelatedEntityId = company.Id,
                    Type = ContactNumberType.Mobile
                });
        }

        editMode = true;
        companyDialogVisible = true;
    }

    private void CloseCompanyDialog()
    {
        companyDialogVisible = false;
    }

    private async Task SaveCompany(Company company)
    {
        isLoading = true;

        try
        {
            ResponseModel response;

            // Set audit fields
            if (editMode)
            {
                company.UpdatedDate = DateTime.Now;
                company.UpdatedBy = "CurrentUser"; // Replace with actual logged-in user ID/name

                response = await UserService.UpdateCompany(company.Id, company);
            }
            else
            {
                company.CreatedOn = DateTime.Now;
                company.IsActive = true;

                // Initialize collections if null
                if (company.EmailAddresses == null)
                    company.EmailAddresses = new List<Email>();

                if (company.ContactNumbers == null)
                    company.ContactNumbers = new List<ContactNumber>();

                // Set primary email
                if (!company.EmailAddresses.Any(e => e.IsPrimary) && !string.IsNullOrEmpty(company.GetPrimaryEmail()))
                {
                    company.EmailAddresses.Add(new Email
                        {
                            EmailAddress = company.GetPrimaryEmail(),
                            IsPrimary = true,
                            IsActive = true,
                            RelatedEntityType = "Company",
                            CreatedOn = DateTime.Now
                        });
                }

                // Set primary contact number
                if (!company.ContactNumbers.Any(c => c.IsPrimary) && !string.IsNullOrEmpty(company.GetPrimaryContactNumber()))
                {
                    company.ContactNumbers.Add(new ContactNumber
                        {
                            Number = company.GetPrimaryContactNumber(),
                            IsPrimary = true,
                            IsActive = true,
                            RelatedEntityType = "Company",
                            Type = ContactNumberType.Mobile,
                            CreatedOn = DateTime.Now
                        });
                }

                response = await UserService.CreateCompany(company);
            }

            if (response.ResponseInfo.Success)
            {
                ToastService.ShowSuccess(response.ResponseInfo.Message, "Success");
                await LoadCompanies();
                
                // Auto-expand newly created company
                if (!editMode && response.Response != null)
                {
                    var newCompany = response.Response as Company;
                    if (newCompany != null)
                    {
                        expandedCompanies.Add(newCompany.Id);
                    }
                }
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"An error occurred: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
            companyDialogVisible = false;
            StateHasChanged();
        }
    }

    // Branch Dialog Methods
    private void OpenBranchDialog(int companyId)
    {
        selectedCompanyId = companyId;
        selectedBranch = new Branch
            {
                CompanyId = companyId,
                Address = new Address(),
                EmailAddresses = new List<Email>
                {
                    new Email { IsPrimary = true, IsActive = true, RelatedEntityType = "Branch" }
                },
                ContactNumbers = new List<ContactNumber>
                {
                    new ContactNumber { IsPrimary = true, IsActive = true, RelatedEntityType = "Branch", Type = ContactNumberType.Mobile }
                }
            };
        editMode = false;
        branchDialogVisible = true;
    }

    private void EditBranch(Branch branch)
    {
        selectedBranch = branch;
        selectedCompanyId = branch.CompanyId;

        // Ensure the branch has at least one email and contact number
        if (selectedBranch.EmailAddresses == null)
        {
            selectedBranch.EmailAddresses = new List<Email>();
        }

        if (!selectedBranch.EmailAddresses.Any(e => e.IsPrimary))
        {
            selectedBranch.EmailAddresses.Add(new Email
                {
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Branch",
                    RelatedEntityId = branch.Id
                });
        }

        if (selectedBranch.ContactNumbers == null)
        {
            selectedBranch.ContactNumbers = new List<ContactNumber>();
        }

        if (!selectedBranch.ContactNumbers.Any(c => c.IsPrimary))
        {
            selectedBranch.ContactNumbers.Add(new ContactNumber
                {
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Branch",
                    RelatedEntityId = branch.Id,
                    Type = ContactNumberType.Mobile
                });
        }

        editMode = true;
        branchDialogVisible = true;
    }

    private void CloseBranchDialog()
    {
        branchDialogVisible = false;
    }

    private async Task SaveBranch(Branch branch)
    {
        isLoading = true;

        try
        {
            ResponseModel response;

            // Set audit fields
            if (editMode)
            {
                branch.UpdatedDate = DateTime.Now;
                branch.UpdatedBy = "CurrentUser"; // Replace with actual logged-in user ID/name

                response = await UserService.UpdateBranch(branch.Id, branch);
            }
            else
            {
                branch.CreatedOn = DateTime.Now;
                branch.CreatedBy = "CurrentUser"; // Replace with actual logged-in user ID/name
                branch.IsActive = true;

                // Initialize collections if null
                if (branch.EmailAddresses == null)
                    branch.EmailAddresses = new List<Email>();

                if (branch.ContactNumbers == null)
                    branch.ContactNumbers = new List<ContactNumber>();

                // Set primary email
                if (!branch.EmailAddresses.Any(e => e.IsPrimary) && !string.IsNullOrEmpty(branch.GetPrimaryEmail()))
                {
                    branch.EmailAddresses.Add(new Email
                        {
                            EmailAddress = branch.GetPrimaryEmail(),
                            IsPrimary = true,
                            IsActive = true,
                            RelatedEntityType = "Branch",
                            CreatedOn = DateTime.Now
                        });
                }

                // Set primary contact number
                if (!branch.ContactNumbers.Any(c => c.IsPrimary) && !string.IsNullOrEmpty(branch.GetPrimaryContactNumber()))
                {
                    branch.ContactNumbers.Add(new ContactNumber
                        {
                            Number = branch.GetPrimaryContactNumber(),
                            IsPrimary = true,
                            IsActive = true,
                            RelatedEntityType = "Branch",
                            Type = ContactNumberType.Mobile,
                            CreatedOn = DateTime.Now
                        });
                }

                response = await UserService.CreateBranch(branch);
            }

            if (response.ResponseInfo.Success)
            {
                ToastService.ShowSuccess(response.ResponseInfo.Message, "Success");
                
                // Ensure company is expanded
                if (!expandedCompanies.Contains(branch.CompanyId))
                {
                    expandedCompanies.Add(branch.CompanyId);
                }
                
                await LoadCompanies();
                
                // Set active tab to the new/edited branch
                if (response.Response != null)
                {
                    var updatedBranch = response.Response as Branch;
                    if (updatedBranch != null)
                    {
                        activeBranchTabs[updatedBranch.CompanyId] = updatedBranch.Id;
                    }
                }
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"An error occurred: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
            branchDialogVisible = false;
            StateHasChanged();
        }
    }

    // User Dialog Methods
    private void OpenUserDialog(int companyId, int branchId)
    {
        selectedCompanyId = companyId;
        selectedBranchId = branchId;
        selectedUser = new ApplicationUser
            {
                CompanyId = companyId,
                BranchId = branchId,
                Role = SystemRole.StandardUser,
                IsActive = true,
                EmailAddresses = new List<Email>
                {
                    new Email { IsPrimary = true, IsActive = true, RelatedEntityType = "User" }
                },
                ContactNumbers = new List<ContactNumber>
                {
                    new ContactNumber { IsPrimary = true, IsActive = true, RelatedEntityType = "User", Type = ContactNumberType.Mobile }
                }
            };
        editMode = false;
        userDialogVisible = true;
    }

    private void EditUser(ApplicationUser user)
    {
        selectedUser = user;
        selectedCompanyId = user.CompanyId ?? 0;
        selectedBranchId = user.BranchId ?? 0;

        // Ensure the user has at least one email and contact number
        if (selectedUser.EmailAddresses == null)
        {
            selectedUser.EmailAddresses = new List<Email>();
        }

        if (!selectedUser.EmailAddresses.Any(e => e.IsPrimary))
        {
            selectedUser.EmailAddresses.Add(new Email
                {
                    EmailAddress = user.Email,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "User",
                    RelatedEntityId = int.Parse(user.Id)
                });
        }

        if (selectedUser.ContactNumbers == null)
        {
            selectedUser.ContactNumbers = new List<ContactNumber>();
        }

        if (!selectedUser.ContactNumbers.Any(c => c.IsPrimary))
        {
            selectedUser.ContactNumbers.Add(new ContactNumber
                {
                    Number = user.PhoneNumber,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "User",
                    RelatedEntityId = int.Parse(user.Id),
                    Type = ContactNumberType.Mobile
                });
        }

        editMode = true;
        userDialogVisible = true;
    }

    private void CloseUserDialog()
    {
        userDialogVisible = false;
    }

    private async Task SaveUser(ApplicationUser user)
    {
        isLoading = true;

        try
        {
            ResponseModel response;

            // Set common properties
            user.UserName = user.Email;

            if (editMode)
            {
                user.UpdatedDate = DateTime.Now;
                user.UpdatedBy = "CurrentUser"; // Replace with actual logged-in user ID/name

                // Convert string ID to int for the service
                int userId = int.Parse(user.Id);
                response = await UserService.UpdateUser(userId, user);
            }
            else
            {
                user.CreatedDate = DateTime.Now;
                user.CreatedBy = "CurrentUser"; // Replace with actual logged-in user ID/name

                // In a real app, you would need to create the user with Identity first
                // This is a simplified example
                // Here we would typically call UserManager<ApplicationUser> to create the user

                // After creating the user, update company and branch assignments
                // await UserService.UpdateUserCompanyId(userId, user.CompanyId.Value);
                // await UserService.UpdateUserBranch(user.Id, user.BranchId.Value);

                // Since we cannot create a user here without Identity, show a toast
                ToastService.ShowInfo("In production, this would create a new user with Identity", "Demo Mode");
                response = new ResponseModel
                    {
                        ResponseInfo = new ResponseInfo
                        {
                            Success = true,
                            Message = "User creation simulated successfully"
                        }
                    };
            }

            if (response.ResponseInfo.Success)
            {
                ToastService.ShowSuccess(response.ResponseInfo.Message, "Success");
                
                // Ensure company is expanded
                if (!expandedCompanies.Contains(user.CompanyId ?? 0))
                {
                    expandedCompanies.Add(user.CompanyId ?? 0);
                }
                
                // Ensure correct branch tab is active
                if (user.BranchId.HasValue)
                {
                    activeBranchTabs[user.CompanyId ?? 0] = user.BranchId.Value;
                }
                
                await LoadCompanies();
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"An error occurred: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
            userDialogVisible = false;
            StateHasChanged();
        }
    }
}