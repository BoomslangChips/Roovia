@using Roovia.Models.Users
@using Roovia.Models.Helper
@using Roovia.Services

<RVModal IsVisible="@IsVisible"
         Title="@(IsEdit ? "Edit User" : "Add New User")"
         OnClose="CloseModal"
         OnConfirm="HandleValidSubmit"
         ConfirmText="Save"
         CancelText="Cancel"
         Size="md">
    <ChildContent>
        <EditForm Model="UserModel" OnValidSubmit="HandleValidSubmit">
            <div class="grid grid-cols-2 gap-4">
                <div class="col-span-1">
                    <RVTextbox Label="First Name"
                               Id="firstName"
                               Value="@UserModel.FirstName"
                               ValueChanged="@((string val) => UserModel.FirstName = val)"
                               IsValid="@(!string.IsNullOrEmpty(UserModel.FirstName))"
                               ValidationMessage="First name is required"
                               IconLeft="far fa-user" />
                </div>

                <div class="col-span-1">
                    <RVTextbox Label="Last Name"
                               Id="lastName"
                               Value="@UserModel.LastName"
                               ValueChanged="@((string val) => UserModel.LastName = val)"
                               IsValid="@(!string.IsNullOrEmpty(UserModel.LastName))"
                               ValidationMessage="Last name is required"
                               IconLeft="far fa-user" />
                </div>

                <div class="col-span-2">
                    <h5 class="text-primary font-weight-semibold mb-2">Primary Contact Information</h5>
                </div>

                <div class="col-span-2">
                    <RVTextbox Label="Primary Email"
                               Id="primaryEmail"
                               Type="email"
                               Value="@PrimaryEmail"
                               ValueChanged="@((string val) => UpdatePrimaryEmail(val))"
                               IsValid="@(!string.IsNullOrEmpty(PrimaryEmail) && IsValidEmail(PrimaryEmail))"
                               ValidationMessage="Valid primary email is required"
                               IconLeft="far fa-envelope" />
                </div>

                <div class="col-span-2">
                    <RVTextbox Label="Primary Phone Number"
                               Id="primaryContactNumber"
                               Value="@PrimaryContactNumber"
                               ValueChanged="@((string val) => UpdatePrimaryContactNumber(val))"
                               IsValid="@(!string.IsNullOrEmpty(PrimaryContactNumber))"
                               ValidationMessage="Primary phone number is required"
                               IconLeft="far fa-phone" />
                </div>

                <div class="col-span-2">
                    <div class="form-group mb-3">
                        <label class="form-label text-primary font-weight-semibold mb-2">User Role</label>
                        <RVDropdown Items="@RoleOptions"
                                    SelectedValue="@SelectedRole"
                                    SelectedValueChanged="@OnRoleChanged"
                                    TriggerText="@GetRoleName(UserModel.Role.GetValueOrDefault())"
                                    TriggerIcon="far fa-shield-check"
                                    ButtonType="outline"
                                    FullWidth="true" />
                    </div>
                </div>

                <div class="col-span-2">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="UserModel.IsActive" id="userActive">
                        <label class="form-check-label" for="userActive">
                            Is Active
                        </label>
                    </div>
                </div>

                @if (!IsEdit)
                {
                    <div class="col-span-2">
                        <RVTextbox Label="Password"
                                   Id="password"
                                   Type="password"
                                   Value="@Password"
                                   ValueChanged="@((string val) => Password = val)"
                                   IsValid="@(!string.IsNullOrEmpty(Password) && Password.Length >= 6)"
                                   ValidationMessage="Password must be at least 6 characters"
                                   IconLeft="far fa-lock" />
                    </div>

                    <div class="col-span-2">
                        <RVTextbox Label="Confirm Password"
                                   Id="confirmPassword"
                                   Type="password"
                                   Value="@ConfirmPassword"
                                   ValueChanged="@((string val) => ConfirmPassword = val)"
                                   IsValid="@(Password == ConfirmPassword)"
                                   ValidationMessage="Passwords do not match"
                                   IconLeft="far fa-lock" />
                    </div>
                }

                @if (IsEdit && UserModel.EmailAddresses != null && UserModel.EmailAddresses.Count > 1)
                {
                    <div class="col-span-2">
                        <h5 class="text-primary font-weight-semibold mb-2">Additional Email Addresses</h5>
                        <div class="grid grid-cols-1 gap-2">
                            @foreach (var email in UserModel.EmailAddresses.Where(e => !e.IsPrimary))
                            {
                                <div class="border rounded p-2 d-flex justify-content-between align-items-center">
                                    <div>
                                        <div class="d-flex align-items-center">
                                            <i class="far fa-envelope me-2"></i>
                                            <span>@email.EmailAddress</span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(email.Description))
                                        {
                                            <small class="text-muted">@email.Description</small>
                                        }
                                    </div>
                                    <div class="d-flex gap-2">
                                        <RVButton Text=""
                                                  IconLeft="far fa-edit"
                                                  ButtonType="outline"
                                                  Size="sm"
                                                  OnClick="() => EditEmail(email)" />
                                        <RVButton Text=""
                                                  IconLeft="far fa-trash"
                                                  ButtonType="outline-danger"
                                                  Size="sm"
                                                  OnClick="() => RemoveEmail(email)" />
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="mt-2">
                            <RVButton Text="Add Email"
                                      IconLeft="far fa-plus"
                                      ButtonType="outline-primary"
                                      Size="sm"
                                      OnClick="AddEmail" />
                        </div>
                    </div>
                }

                @if (IsEdit && UserModel.ContactNumbers != null && UserModel.ContactNumbers.Count > 1)
                {
                    <div class="col-span-2">
                        <h5 class="text-primary font-weight-semibold mb-2">Additional Contact Numbers</h5>
                        <div class="grid grid-cols-1 gap-2">
                            @foreach (var contact in UserModel.ContactNumbers.Where(c => !c.IsPrimary))
                            {
                                <div class="border rounded p-2 d-flex justify-content-between align-items-center">
                                    <div>
                                        <div class="d-flex align-items-center">
                                            <i class="far fa-phone me-2"></i>
                                            <span>@contact.Number</span>
                                        </div>
                                        <div class="d-flex gap-2">
                                            <small class="text-muted">@contact.Type</small>
                                            @if (!string.IsNullOrEmpty(contact.Description))
                                            {
                                                <small class="text-muted">(@contact.Description)</small>
                                            }
                                        </div>
                                    </div>
                                    <div class="d-flex gap-2">
                                        <RVButton Text=""
                                                  IconLeft="far fa-edit"
                                                  ButtonType="outline"
                                                  Size="sm"
                                                  OnClick="() => EditContactNumber(contact)" />
                                        <RVButton Text=""
                                                  IconLeft="far fa-trash"
                                                  ButtonType="outline-danger"
                                                  Size="sm"
                                                  OnClick="() => RemoveContactNumber(contact)" />
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="mt-2">
                            <RVButton Text="Add Contact Number"
                                      IconLeft="far fa-plus"
                                      ButtonType="outline-primary"
                                      Size="sm"
                                      OnClick="AddContactNumber" />
                        </div>
                    </div>
                }
            </div>
        </EditForm>
    </ChildContent>
</RVModal>

@if (emailDialogVisible)
{
    <RVModal IsVisible="true"
             Title="@(editingEmail.Id == 0 ? "Add Email" : "Edit Email")"
             OnClose="CloseEmailDialog"
             OnConfirm="SaveEmail"
             ConfirmText="Save"
             CancelText="Cancel"
             Size="sm">
        <ChildContent>
            <div class="grid grid-cols-1 gap-3">
                <RVTextbox Label="Email Address"
                           Id="emailAddress"
                           Type="email"
                           Value="@editingEmail.EmailAddress"
                           ValueChanged="@((string val) => editingEmail.EmailAddress = val)"
                           IsValid="@(!string.IsNullOrEmpty(editingEmail.EmailAddress) && IsValidEmail(editingEmail.EmailAddress))"
                           ValidationMessage="Valid email address is required"
                           IconLeft="far fa-envelope" />

                <RVTextbox Label="Description (Optional)"
                           Id="emailDescription"
                           Value="@editingEmail.Description"
                           ValueChanged="@((string val) => editingEmail.Description = val)"
                           IconLeft="far fa-tag" />

                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="editingEmail.IsActive" id="emailActive">
                    <label class="form-check-label" for="emailActive">
                        Is Active
                    </label>
                </div>
            </div>
        </ChildContent>
    </RVModal>
}

@if (contactDialogVisible)
{
    <RVModal IsVisible="true"
             Title="@(editingContact.Id == 0 ? "Add Contact Number" : "Edit Contact Number")"
             OnClose="CloseContactDialog"
             OnConfirm="SaveContactNumber"
             ConfirmText="Save"
             CancelText="Cancel"
             Size="sm">
        <ChildContent>
            <div class="grid grid-cols-1 gap-3">
                <RVTextbox Label="Phone Number"
                           Id="phoneNumber"
                           Value="@editingContact.Number"
                           ValueChanged="@((string val) => editingContact.Number = val)"
                           IsValid="@(!string.IsNullOrEmpty(editingContact.Number))"
                           ValidationMessage="Phone number is required"
                           IconLeft="far fa-phone" />

                <div class="form-group">
                    <label class="form-label">Contact Type</label>
                    <select class="form-select" @bind="editingContact.Type">
                        @foreach (var type in Enum.GetValues(typeof(ContactNumberType)))
                        {
                            <option value="@type">@type</option>
                        }
                    </select>
                </div>

                <RVTextbox Label="Description (Optional)"
                           Id="contactDescription"
                           Value="@editingContact.Description"
                           ValueChanged="@((string val) => editingContact.Description = val)"
                           IconLeft="far fa-tag" />

                <div class="form-check">
                    <input class="form-check-input" type="checkbox" @bind="editingContact.IsActive" id="contactActive">
                    <label class="form-check-label" for="contactActive">
                        Is Active
                    </label>
                </div>
            </div>
        </ChildContent>
    </RVModal>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public ApplicationUser UserModel { get; set; } = new ApplicationUser();
    [Parameter] public int CompanyId { get; set; }
    [Parameter] public int BranchId { get; set; }
    [Parameter] public EventCallback<ApplicationUser> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    [Inject] private ToastService ToastService { get; set; }

    private string Password { get; set; } = string.Empty;
    private string ConfirmPassword { get; set; } = string.Empty;
    private string SelectedRole { get; set; }

    // Contact and email management
    private string PrimaryEmail
    {
        get => UserModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary)?.EmailAddress ?? UserModel.Email;
    }

    private string PrimaryContactNumber
    {
        get => UserModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary)?.Number ?? UserModel.PhoneNumber;
    }

    // Email dialog
    private bool emailDialogVisible = false;
    private Email editingEmail = new Email();

    // Contact dialog
    private bool contactDialogVisible = false;
    private ContactNumber editingContact = new ContactNumber();

    private List<RVDropdown.DropdownItem> RoleOptions = new List<RVDropdown.DropdownItem>
    {
        new RVDropdown.DropdownItem { Value = "1", Text = "Global Admin", Icon = "far fa-user-crown" },
        new RVDropdown.DropdownItem { Value = "2", Text = "Company Admin", Icon = "far fa-user-tie" },
        new RVDropdown.DropdownItem { Value = "3", Text = "Branch Manager", Icon = "far fa-user-hard-hat" },
        new RVDropdown.DropdownItem { Value = "4", Text = "Standard User", Icon = "far fa-user" }
    };

    protected override void OnInitialized()
    {
        if (!IsEdit)
        {
            UserModel = new ApplicationUser
                {
                    CompanyId = CompanyId,
                    BranchId = BranchId,
                    Role = UserRole.StandardUser,
                    IsActive = true,
                    EmailAddresses = new List<Email>
                {
                    new Email
                    {
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "User"
                    }
                },
                    ContactNumbers = new List<ContactNumber>
                {
                    new ContactNumber
                    {
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "User",
                        Type = ContactNumberType.Mobile
                    }
                }
                };
        }
        else
        {
            // Ensure collections exist
            if (UserModel.EmailAddresses == null)
            {
                UserModel.EmailAddresses = new List<Email>
                {
                    new Email
                    {
                        EmailAddress = UserModel.Email,
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "User",
                        RelatedEntityId = int.Parse(UserModel.Id)
                    }
                };
            }

            if (UserModel.ContactNumbers == null)
            {
                UserModel.ContactNumbers = new List<ContactNumber>
                {
                    new ContactNumber
                    {
                        Number = UserModel.PhoneNumber,
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "User",
                        RelatedEntityId = int.Parse(UserModel.Id),
                        Type = ContactNumberType.Mobile
                    }
                };
            }
        }

        SelectedRole = ((int)UserModel.Role).ToString();
    }

    private void UpdatePrimaryEmail(string value)
    {
        // Update the Identity property
        UserModel.Email = value;

        // Update or create the primary email in the collection
        var primaryEmail = UserModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary);

        if (primaryEmail == null)
        {
            if (UserModel.EmailAddresses == null)
                UserModel.EmailAddresses = new List<Email>();

            UserModel.EmailAddresses.Add(new Email
                {
                    EmailAddress = value,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "User",
                    RelatedEntityId = !string.IsNullOrEmpty(UserModel.Id) ? int.Parse(UserModel.Id) : 0
                });
        }
        else
        {
            primaryEmail.EmailAddress = value;
        }
    }

    private void UpdatePrimaryContactNumber(string value)
    {
        // Update the Identity property
        UserModel.PhoneNumber = value;

        // Update or create the primary contact in the collection
        var primaryContact = UserModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary);

        if (primaryContact == null)
        {
            if (UserModel.ContactNumbers == null)
                UserModel.ContactNumbers = new List<ContactNumber>();

            UserModel.ContactNumbers.Add(new ContactNumber
                {
                    Number = value,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "User",
                    RelatedEntityId = !string.IsNullOrEmpty(UserModel.Id) ? int.Parse(UserModel.Id) : 0,
                    Type = ContactNumberType.Mobile
                });
        }
        else
        {
            primaryContact.Number = value;
        }
    }

    private void OnRoleChanged(string value)
    {
        if (Enum.TryParse<UserRole>(value, out var role))
        {
            UserModel.Role = role;
        }
        SelectedRole = value;
    }

    private string GetRoleName(UserRole role)
    {
        return role switch
        {
            UserRole.GlobalAdmin => "Global Admin",
            UserRole.CompanyAdmin => "Company Admin",
            UserRole.BranchManager => "Branch Manager",
            UserRole.StandardUser => "Standard User",
            _ => "Select Role"
        };
    }

    // Email management
    private void AddEmail()
    {
        editingEmail = new Email
            {
                IsActive = true,
                RelatedEntityType = "User",
                RelatedEntityId = !string.IsNullOrEmpty(UserModel.Id) ? int.Parse(UserModel.Id) : 0
            };
        emailDialogVisible = true;
    }

    private void EditEmail(Email email)
    {
        editingEmail = new Email
            {
                Id = email.Id,
                EmailAddress = email.EmailAddress,
                Description = email.Description,
                IsActive = email.IsActive,
                IsPrimary = email.IsPrimary,
                RelatedEntityType = email.RelatedEntityType,
                RelatedEntityId = email.RelatedEntityId
            };
        emailDialogVisible = true;
    }

    private void RemoveEmail(Email email)
    {
        if (email.IsPrimary)
        {
            ToastService.ShowError("Cannot remove primary email address", "Error");
            return;
        }

        UserModel.EmailAddresses.Remove(email);
    }

    private void CloseEmailDialog()
    {
        emailDialogVisible = false;
    }

    private void SaveEmail()
    {
        if (string.IsNullOrWhiteSpace(editingEmail.EmailAddress) || !IsValidEmail(editingEmail.EmailAddress))
        {
            ToastService.ShowError("Please enter a valid email address", "Validation Error");
            return;
        }

        var existingEmail = UserModel.EmailAddresses.FirstOrDefault(e => e.Id == editingEmail.Id);
        if (existingEmail != null)
        {
            // Update existing
            existingEmail.EmailAddress = editingEmail.EmailAddress;
            existingEmail.Description = editingEmail.Description;
            existingEmail.IsActive = editingEmail.IsActive;
        }
        else
        {
            // Add new
            UserModel.EmailAddresses.Add(editingEmail);
        }

        emailDialogVisible = false;
    }

    // Contact number management
    private void AddContactNumber()
    {
        editingContact = new ContactNumber
            {
                IsActive = true,
                RelatedEntityType = "User",
                RelatedEntityId = !string.IsNullOrEmpty(UserModel.Id) ? int.Parse(UserModel.Id) : 0,
                Type = ContactNumberType.Mobile
            };
        contactDialogVisible = true;
    }

    private void EditContactNumber(ContactNumber contact)
    {
        editingContact = new ContactNumber
            {
                Id = contact.Id,
                Number = contact.Number,
                Type = contact.Type,
                Description = contact.Description,
                IsActive = contact.IsActive,
                IsPrimary = contact.IsPrimary,
                RelatedEntityType = contact.RelatedEntityType,
                RelatedEntityId = contact.RelatedEntityId
            };
        contactDialogVisible = true;
    }

    private void RemoveContactNumber(ContactNumber contact)
    {
        if (contact.IsPrimary)
        {
            ToastService.ShowError("Cannot remove primary contact number", "Error");
            return;
        }

        UserModel.ContactNumbers.Remove(contact);
    }

    private void CloseContactDialog()
    {
        contactDialogVisible = false;
    }

    private void SaveContactNumber()
    {
        if (string.IsNullOrWhiteSpace(editingContact.Number))
        {
            ToastService.ShowError("Please enter a contact number", "Validation Error");
            return;
        }

        var existingContact = UserModel.ContactNumbers.FirstOrDefault(c => c.Id == editingContact.Id);
        if (existingContact != null)
        {
            // Update existing
            existingContact.Number = editingContact.Number;
            existingContact.Type = editingContact.Type;
            existingContact.Description = editingContact.Description;
            existingContact.IsActive = editingContact.IsActive;
        }
        else
        {
            // Add new
            UserModel.ContactNumbers.Add(editingContact);
        }

        contactDialogVisible = false;
    }

    private async Task HandleValidSubmit()
    {
        // Basic validation
        if (string.IsNullOrWhiteSpace(UserModel.FirstName) ||
            string.IsNullOrWhiteSpace(UserModel.LastName))
        {
            ToastService.ShowError("First name and last name are required", "Validation Error");
            return;
        }

        // Validate primary email
        var primaryEmail = UserModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary);
        if (primaryEmail == null || string.IsNullOrWhiteSpace(primaryEmail.EmailAddress) || !IsValidEmail(primaryEmail.EmailAddress))
        {
            ToastService.ShowError("A valid primary email address is required", "Validation Error");
            return;
        }

        // Validate primary contact number
        var primaryContact = UserModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary);
        if (primaryContact == null || string.IsNullOrWhiteSpace(primaryContact.Number))
        {
            ToastService.ShowError("A primary contact number is required", "Validation Error");
            return;
        }

        // Password validation for new users
        if (!IsEdit && (string.IsNullOrWhiteSpace(Password) || Password.Length < 6))
        {
            ToastService.ShowError("Password must be at least 6 characters", "Validation Error");
            return;
        }

        if (!IsEdit && Password != ConfirmPassword)
        {
            ToastService.ShowError("Passwords do not match", "Validation Error");
            return;
        }

        // For new users, ensure UserName is set to email
        if (!IsEdit)
        {
            UserModel.UserName = primaryEmail.EmailAddress;
            // In a real app, you'd hash the password here or in the service
            // This is a simplified example
            UserModel.PasswordHash = Password;
        }

        // Set entity relationships if not already set
        foreach (var email in UserModel.EmailAddresses)
        {
            email.RelatedEntityType = "User";
            if (!string.IsNullOrEmpty(UserModel.Id))
            {
                email.RelatedEntityId = int.Parse(UserModel.Id);
            }
        }

        foreach (var contact in UserModel.ContactNumbers)
        {
            contact.RelatedEntityType = "User";
            if (!string.IsNullOrEmpty(UserModel.Id))
            {
                contact.RelatedEntityId = int.Parse(UserModel.Id);
            }
        }

        // Ensure the Identity properties are in sync with our primary contacts
        UserModel.Email = primaryEmail.EmailAddress;
        UserModel.PhoneNumber = primaryContact.Number;

        await OnSave.InvokeAsync(UserModel);
        CloseModal();
    }

    private void CloseModal()
    {
        OnCancel.InvokeAsync();
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}