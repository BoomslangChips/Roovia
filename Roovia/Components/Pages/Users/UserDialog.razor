@using Roovia.Models.Users
@using Roovia.Models.Helper
@using Roovia.Services

<RVModal IsVisible="@IsVisible"
         Title="@(IsEdit ? "Edit User" : "Add New User")"
         OnClose="CloseModal"
         OnConfirm="HandleValidSubmit"
         ConfirmText="Save"
         CancelText="Cancel"
         Size="md"
         CssClass="user-dialog-modal">
    <ChildContent>
        <div class="user-form">
            <EditForm Model="UserModel" OnValidSubmit="HandleValidSubmit">
                <div class="form-section">
                    <div class="section-header">
                        <h3><i class="far fa-user-circle"></i> Personal Information</h3>
                        <p>Enter user's personal details</p>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <RVTextbox Label="First Name"
                                       Id="firstName"
                                       Value="@UserModel.FirstName"
                                       ValueChanged="@((string val) => UserModel.FirstName = val)"
                                       IsValid="@(!string.IsNullOrEmpty(UserModel.FirstName))"
                                       ValidationMessage="First name is required"
                                       IconLeft="far fa-user"
                                       CssClass="modern-input" />
                        </div>

                        <div class="form-group">
                            <RVTextbox Label="Last Name"
                                       Id="lastName"
                                       Value="@UserModel.LastName"
                                       ValueChanged="@((string val) => UserModel.LastName = val)"
                                       IsValid="@(!string.IsNullOrEmpty(UserModel.LastName))"
                                       ValidationMessage="Last name is required"
                                       IconLeft="far fa-user"
                                       CssClass="modern-input" />
                        </div>
                    </div>

                    <div class="section-header">
                        <h3><i class="far fa-address-card"></i> Contact Information</h3>
                        <p>How to reach this user</p>
                    </div>

                    <div class="form-group full-width">
                        <RVTextbox Label="Email Address"
                                   Id="primaryEmail"
                                   Type="email"
                                   Value="@PrimaryEmail"
                                   ValueChanged="@((string val) => UpdatePrimaryEmail(val))"
                                   IsValid="@(!string.IsNullOrEmpty(PrimaryEmail) && IsValidEmail(PrimaryEmail))"
                                   ValidationMessage="Valid email address is required"
                                   IconLeft="far fa-envelope"
                                   CssClass="modern-input" />
                    </div>

                    <div class="form-group full-width">
                        <RVTextbox Label="Phone Number"
                                   Id="primaryContactNumber"
                                   Value="@PrimaryContactNumber"
                                   ValueChanged="@((string val) => UpdatePrimaryContactNumber(val))"
                                   IsValid="@(!string.IsNullOrEmpty(PrimaryContactNumber))"
                                   ValidationMessage="Phone number is required"
                                   IconLeft="far fa-phone"
                                   CssClass="modern-input" />
                    </div>

                    <div class="section-header">
                        <h3><i class="far fa-shield-check"></i> Role & Permissions</h3>
                        <p>Set access level and activation status</p>
                    </div>

                    <div class="form-group full-width">
                        <label class="modern-label">User Role</label>
                        <div class="role-selector">
                            @foreach (var role in RoleOptions)
                            {
                                <div class="role-option @(SelectedRole == role.Value ? "selected" : "")"
                                     @onclick="() => OnRoleChanged(role.Value)">
                                    <div class="role-icon"><i class="@role.Icon"></i></div>
                                    <div class="role-info">
                                        <div class="role-name">@role.Text</div>
                                        <div class="role-description">@GetRoleDescription(role.Value)</div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="modern-checkbox">
                        <label class="checkbox-container">
                            <input type="checkbox" @bind="UserModel.IsActive" id="userActive" />
                            <span class="checkmark"></span>
                            <span class="checkbox-label">Account is active</span>
                        </label>
                        <div class="checkbox-hint">Inactive accounts cannot log in to the system</div>
                    </div>

                    @if (!IsEdit)
                    {
                        <div class="section-header">
                            <h3><i class="far fa-lock"></i> Account Security</h3>
                            <p>Set initial password for the user</p>
                        </div>

                        <div class="form-group full-width">
                            <RVTextbox Label="Password"
                                       Id="password"
                                       Type="password"
                                       Value="@Password"
                                       ValueChanged="@((string val) => Password = val)"
                                       IsValid="@(!string.IsNullOrEmpty(Password) && Password.Length >= 6)"
                                       ValidationMessage="Password must be at least 6 characters"
                                       IconLeft="far fa-lock"
                                       CssClass="modern-input" />
                        </div>

                        <div class="form-group full-width">
                            <RVTextbox Label="Confirm Password"
                                       Id="confirmPassword"
                                       Type="password"
                                       Value="@ConfirmPassword"
                                       ValueChanged="@((string val) => ConfirmPassword = val)"
                                       IsValid="@(Password == ConfirmPassword)"
                                       ValidationMessage="Passwords do not match"
                                       IconLeft="far fa-lock-keyhole"
                                       CssClass="modern-input" />
                        </div>

                        <div class="password-requirements">
                            <div class="requirement @(Password?.Length >= 6 ? "met" : "")">
                                <i class="@(Password?.Length >= 6 ? "far fa-check-circle" : "far fa-circle")"></i>
                                <span>At least 6 characters</span>
                            </div>
                            <div class="requirement @(Password?.Any(char.IsUpper) == true ? "met" : "")">
                                <i class="@(Password?.Any(char.IsUpper) == true ? "far fa-check-circle" : "far fa-circle")"></i>
                                <span>One uppercase letter</span>
                            </div>
                            <div class="requirement @(Password?.Any(char.IsLower) == true ? "met" : "")">
                                <i class="@(Password?.Any(char.IsLower) == true ? "far fa-check-circle" : "far fa-circle")"></i>
                                <span>One lowercase letter</span>
                            </div>
                            <div class="requirement @(Password?.Any(char.IsDigit) == true ? "met" : "")">
                                <i class="@(Password?.Any(char.IsDigit) == true ? "far fa-check-circle" : "far fa-circle")"></i>
                                <span>One number</span>
                            </div>
                        </div>
                    }

                    @if (IsEdit && UserModel.EmailAddresses != null && UserModel.EmailAddresses.Count > 1)
                    {
                        <div class="section-header with-actions">
                            <div>
                                <h3><i class="far fa-envelope-open"></i> Additional Email Addresses</h3>
                                <p>Alternative contact emails for this user</p>
                            </div>
                            <button type="button" class="add-item-btn" @onclick="AddEmail">
                                <i class="far fa-plus"></i>
                                <span>Add Email</span>
                            </button>
                        </div>

                        <div class="contact-items">
                            @foreach (var email in UserModel.EmailAddresses.Where(e => !e.IsPrimary))
                            {
                                <div class="contact-item">
                                    <div class="contact-item-icon">
                                        <i class="far fa-envelope"></i>
                                    </div>
                                    <div class="contact-item-details">
                                        <div class="contact-item-primary">@email.EmailAddress</div>
                                        @if (!string.IsNullOrEmpty(email.Description))
                                        {
                                            <div class="contact-item-secondary">@email.Description</div>
                                        }
                                    </div>
                                    <div class="contact-item-actions">
                                        <button type="button" class="item-action edit" @onclick="() => EditEmail(email)">
                                            <i class="far fa-edit"></i>
                                        </button>
                                        <button type="button" class="item-action delete" @onclick="() => RemoveEmail(email)">
                                            <i class="far fa-trash-alt"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else if (IsEdit)
                    {
                        <div class="section-header with-actions">
                            <div>
                                <h3><i class="far fa-envelope-open"></i> Additional Email Addresses</h3>
                                <p>Alternative contact emails for this user</p>
                            </div>
                            <button type="button" class="add-item-btn" @onclick="AddEmail">
                                <i class="far fa-plus"></i>
                                <span>Add Email</span>
                            </button>
                        </div>
                        <div class="no-items-message">
                            <i class="far fa-envelope-open"></i>
                            <p>No additional email addresses have been added</p>
                        </div>
                    }

                    @if (IsEdit && UserModel.ContactNumbers != null && UserModel.ContactNumbers.Count > 1)
                    {
                        <div class="section-header with-actions">
                            <div>
                                <h3><i class="far fa-phone-alt"></i> Additional Contact Numbers</h3>
                                <p>Alternative phone numbers for this user</p>
                            </div>
                            <button type="button" class="add-item-btn" @onclick="AddContactNumber">
                                <i class="far fa-plus"></i>
                                <span>Add Number</span>
                            </button>
                        </div>

                        <div class="contact-items">
                            @foreach (var contact in UserModel.ContactNumbers.Where(c => !c.IsPrimary))
                            {
                                <div class="contact-item">
                                    <div class="contact-item-icon contact-@contact.Type.ToString().ToLower()">
                                        <i class="@GetContactTypeIcon(contact.Type)"></i>
                                    </div>
                                    <div class="contact-item-details">
                                        <div class="contact-item-primary">@contact.Number</div>
                                        <div class="contact-item-secondary">
                                            <span class="contact-type">@contact.Type</span>
                                            @if (!string.IsNullOrEmpty(contact.Description))
                                            {
                                                <span class="contact-description">@contact.Description</span>
                                            }
                                        </div>
                                    </div>
                                    <div class="contact-item-actions">
                                        <button type="button" class="item-action edit" @onclick="() => EditContactNumber(contact)">
                                            <i class="far fa-edit"></i>
                                        </button>
                                        <button type="button" class="item-action delete" @onclick="() => RemoveContactNumber(contact)">
                                            <i class="far fa-trash-alt"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else if (IsEdit)
                    {
                        <div class="section-header with-actions">
                            <div>
                                <h3><i class="far fa-phone-alt"></i> Additional Contact Numbers</h3>
                                <p>Alternative phone numbers for this user</p>
                            </div>
                            <button type="button" class="add-item-btn" @onclick="AddContactNumber">
                                <i class="far fa-plus"></i>
                                <span>Add Number</span>
                            </button>
                        </div>
                        <div class="no-items-message">
                            <i class="far fa-phone"></i>
                            <p>No additional contact numbers have been added</p>
                        </div>
                    }
                </div>
            </EditForm>
        </div>
    </ChildContent>
</RVModal>

@if (emailDialogVisible)
{
    <RVModal IsVisible="true"
             Title="@(editingEmail.Id == 0 ? "Add Email Address" : "Edit Email Address")"
             OnClose="CloseEmailDialog"
             OnConfirm="SaveEmail"
             ConfirmText="Save"
             CancelText="Cancel"
             Size="sm"
             CssClass="contact-dialog-modal">
        <ChildContent>
            <div class="form-section">
                <div class="form-group full-width">
                    <RVTextbox Label="Email Address"
                               Id="emailAddress"
                               Type="email"
                               Value="@editingEmail.EmailAddress"
                               ValueChanged="@((string val) => editingEmail.EmailAddress = val)"
                               IsValid="@(!string.IsNullOrEmpty(editingEmail.EmailAddress) && IsValidEmail(editingEmail.EmailAddress))"
                               ValidationMessage="Valid email address is required"
                               IconLeft="far fa-envelope"
                               CssClass="modern-input" />
                </div>

                <div class="form-group full-width">
                    <RVTextbox Label="Description (Optional)"
                               Id="emailDescription"
                               Value="@editingEmail.Description"
                               ValueChanged="@((string val) => editingEmail.Description = val)"
                               Placeholder="e.g. Personal, Work, Recovery"
                               IconLeft="far fa-tag"
                               CssClass="modern-input" />
                </div>

                <div class="modern-checkbox">
                    <label class="checkbox-container">
                        <input type="checkbox" @bind="editingEmail.IsActive" id="emailActive" />
                        <span class="checkmark"></span>
                        <span class="checkbox-label">Is Active</span>
                    </label>
                </div>
            </div>
        </ChildContent>
    </RVModal>
}

@if (contactDialogVisible)
{
    <RVModal IsVisible="true"
             Title="@(editingContact.Id == 0 ? "Add Contact Number" : "Edit Contact Number")"
             OnClose="CloseContactDialog"
             OnConfirm="SaveContactNumber"
             ConfirmText="Save"
             CancelText="Cancel"
             Size="sm"
             CssClass="contact-dialog-modal">
        <ChildContent>
            <div class="form-section">
                <div class="form-group full-width">
                    <RVTextbox Label="Phone Number"
                               Id="phoneNumber"
                               Value="@editingContact.Number"
                               ValueChanged="@((string val) => editingContact.Number = val)"
                               IsValid="@(!string.IsNullOrEmpty(editingContact.Number))"
                               ValidationMessage="Phone number is required"
                               IconLeft="far fa-phone"
                               CssClass="modern-input" />
                </div>

                <div class="form-group full-width">
                    <label class="modern-label">Contact Type</label>
                    <div class="contact-type-selector">
                        @foreach (var type in Enum.GetValues(typeof(ContactNumberType)))
                        {
                            <div class="contact-type-option @(editingContact.Type.ToString() == type.ToString() ? "selected" : "")"
                                 @onclick="() => editingContact.Type = (ContactNumberType)type">
                                <i class="@GetContactTypeIcon((ContactNumberType)type)"></i>
                                <span>@type</span>
                            </div>
                        }
                    </div>
                </div>

                <div class="form-group full-width">
                    <RVTextbox Label="Description (Optional)"
                               Id="contactDescription"
                               Value="@editingContact.Description"
                               ValueChanged="@((string val) => editingContact.Description = val)"
                               Placeholder="e.g. Home, Office, Personal"
                               IconLeft="far fa-tag"
                               CssClass="modern-input" />
                </div>

                <div class="modern-checkbox">
                    <label class="checkbox-container">
                        <input type="checkbox" @bind="editingContact.IsActive" id="contactActive" />
                        <span class="checkmark"></span>
                        <span class="checkbox-label">Is Active</span>
                    </label>
                </div>
            </div>
        </ChildContent>
    </RVModal>
}



@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public ApplicationUser UserModel { get; set; } = new ApplicationUser();
    [Parameter] public int CompanyId { get; set; }
    [Parameter] public int BranchId { get; set; }
    [Parameter] public EventCallback<ApplicationUser> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    [Inject] private ToastService ToastService { get; set; }

    private string Password { get; set; } = string.Empty;
    private string ConfirmPassword { get; set; } = string.Empty;
    private string SelectedRole { get; set; }

    // Contact and email management
    private string PrimaryEmail
    {
        get => UserModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary)?.EmailAddress ?? UserModel.Email;
    }

    private string PrimaryContactNumber
    {
        get => UserModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary)?.Number ?? UserModel.PhoneNumber;
    }

    // Email dialog
    private bool emailDialogVisible = false;
    private Email editingEmail = new Email();

    // Contact dialog
    private bool contactDialogVisible = false;
    private ContactNumber editingContact = new ContactNumber();

    private List<RVDropdown.DropdownItem> RoleOptions = new List<RVDropdown.DropdownItem>
    {
        new RVDropdown.DropdownItem { Value = "1", Text = "Global Admin", Icon = "far fa-user-crown" },
        new RVDropdown.DropdownItem { Value = "2", Text = "Company Admin", Icon = "far fa-user-tie" },
        new RVDropdown.DropdownItem { Value = "3", Text = "Branch Manager", Icon = "far fa-user-hard-hat" },
        new RVDropdown.DropdownItem { Value = "4", Text = "Standard User", Icon = "far fa-user" }
    };

    protected override void OnInitialized()
    {
        if (!IsEdit)
        {
            UserModel = new ApplicationUser
                {
                    CompanyId = CompanyId,
                    BranchId = BranchId,
                    Role = SystemRole.StandardUser,
                    IsActive = true,
                    EmailAddresses = new List<Email>
                {
                    new Email
                    {
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "User"
                    }
                },
                    ContactNumbers = new List<ContactNumber>
                {
                    new ContactNumber
                    {
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "User",
                        Type = ContactNumberType.Mobile
                    }
                }
                };
        }
        else
        {
            // Ensure collections exist
            if (UserModel.EmailAddresses == null)
            {
                UserModel.EmailAddresses = new List<Email>
                {
                    new Email
                    {
                        EmailAddress = UserModel.Email,
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "User",
                        RelatedEntityId = int.Parse(UserModel.Id)
                    }
                };
            }

            if (UserModel.ContactNumbers == null)
            {
                UserModel.ContactNumbers = new List<ContactNumber>
                {
                    new ContactNumber
                    {
                        Number = UserModel.PhoneNumber,
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "User",
                        RelatedEntityId = int.Parse(UserModel.Id),
                        Type = ContactNumberType.Mobile
                    }
                };
            }
        }

        SelectedRole = ((int)UserModel.Role).ToString();
    }

    private void UpdatePrimaryEmail(string value)
    {
        // Update the Identity property
        UserModel.Email = value;

        // Update or create the primary email in the collection
        var primaryEmail = UserModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary);

        if (primaryEmail == null)
        {
            if (UserModel.EmailAddresses == null)
                UserModel.EmailAddresses = new List<Email>();

            UserModel.EmailAddresses.Add(new Email
                {
                    EmailAddress = value,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "User",
                    RelatedEntityId = !string.IsNullOrEmpty(UserModel.Id) ? int.Parse(UserModel.Id) : 0
                });
        }
        else
        {
            primaryEmail.EmailAddress = value;
        }
    }

    private void UpdatePrimaryContactNumber(string value)
    {
        // Update the Identity property
        UserModel.PhoneNumber = value;

        // Update or create the primary contact in the collection
        var primaryContact = UserModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary);

        if (primaryContact == null)
        {
            if (UserModel.ContactNumbers == null)
                UserModel.ContactNumbers = new List<ContactNumber>();

            UserModel.ContactNumbers.Add(new ContactNumber
                {
                    Number = value,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "User",
                    RelatedEntityId = !string.IsNullOrEmpty(UserModel.Id) ? int.Parse(UserModel.Id) : 0,
                    Type = ContactNumberType.Mobile
                });
        }
        else
        {
            primaryContact.Number = value;
        }
    }

    private void OnRoleChanged(string value)
    {
        if (Enum.TryParse<SystemRole>(value, out var role))
        {
            UserModel.Role = role;
        }
        SelectedRole = value;
    }

    private string GetRoleName(SystemRole role)
    {
        return role switch
        {
            SystemRole.GlobalAdmin => "Global Admin",
            SystemRole.CompanyAdmin => "Company Admin",
            SystemRole.BranchManager => "Branch Manager",
            SystemRole.StandardUser => "Standard User",
            _ => "Select Role"
        };
    }

    private string GetRoleDescription(string roleValue)
    {
        return roleValue switch
        {
            "1" => "Full access to all companies and system settings",
            "2" => "Manage all branches and users within a company",
            "3" => "Manage users and data for a specific branch",
            "4" => "Regular access with limited permissions",
            _ => ""
        };
    }

    private string GetContactTypeIcon(ContactNumberType type)
    {
        return type switch
        {
            ContactNumberType.Mobile => "far fa-mobile-alt",
            ContactNumberType.Landline => "far fa-phone-office",
            ContactNumberType.Fax => "far fa-fax",
            ContactNumberType.WhatsApp => "fab fa-whatsapp",
            _ => "far fa-phone"
        };
    }

    // Email management
    private void AddEmail()
    {
        editingEmail = new Email
            {
                IsActive = true,
                RelatedEntityType = "User",
                RelatedEntityId = !string.IsNullOrEmpty(UserModel.Id) ? int.Parse(UserModel.Id) : 0
            };
        emailDialogVisible = true;
    }

    private void EditEmail(Email email)
    {
        editingEmail = new Email
            {
                Id = email.Id,
                EmailAddress = email.EmailAddress,
                Description = email.Description,
                IsActive = email.IsActive,
                IsPrimary = email.IsPrimary,
                RelatedEntityType = email.RelatedEntityType,
                RelatedEntityId = email.RelatedEntityId
            };
        emailDialogVisible = true;
    }

    private void RemoveEmail(Email email)
    {
        if (email.IsPrimary)
        {
            ToastService.ShowError("Cannot remove primary email address", "Error");
            return;
        }

        UserModel.EmailAddresses.Remove(email);
    }

    private void CloseEmailDialog()
    {
        emailDialogVisible = false;
    }

    private void SaveEmail()
    {
        if (string.IsNullOrWhiteSpace(editingEmail.EmailAddress) || !IsValidEmail(editingEmail.EmailAddress))
        {
            ToastService.ShowError("Please enter a valid email address", "Validation Error");
            return;
        }

        var existingEmail = UserModel.EmailAddresses.FirstOrDefault(e => e.Id == editingEmail.Id);
        if (existingEmail != null)
        {
            // Update existing
            existingEmail.EmailAddress = editingEmail.EmailAddress;
            existingEmail.Description = editingEmail.Description;
            existingEmail.IsActive = editingEmail.IsActive;
        }
        else
        {
            // Add new
            UserModel.EmailAddresses.Add(editingEmail);
        }

        emailDialogVisible = false;
    }

    // Contact number management
    private void AddContactNumber()
    {
        editingContact = new ContactNumber
            {
                IsActive = true,
                RelatedEntityType = "User",
                RelatedEntityId = !string.IsNullOrEmpty(UserModel.Id) ? int.Parse(UserModel.Id) : 0,
                Type = ContactNumberType.Mobile
            };
        contactDialogVisible = true;
    }

    private void EditContactNumber(ContactNumber contact)
    {
        editingContact = new ContactNumber
            {
                Id = contact.Id,
                Number = contact.Number,
                Type = contact.Type,
                Description = contact.Description,
                IsActive = contact.IsActive,
                IsPrimary = contact.IsPrimary,
                RelatedEntityType = contact.RelatedEntityType,
                RelatedEntityId = contact.RelatedEntityId
            };
        contactDialogVisible = true;
    }

    private void RemoveContactNumber(ContactNumber contact)
    {
        if (contact.IsPrimary)
        {
            ToastService.ShowError("Cannot remove primary contact number", "Error");
            return;
        }

        UserModel.ContactNumbers.Remove(contact);
    }

    private void CloseContactDialog()
    {
        contactDialogVisible = false;
    }

    private void SaveContactNumber()
    {
        if (string.IsNullOrWhiteSpace(editingContact.Number))
        {
            ToastService.ShowError("Please enter a contact number", "Validation Error");
            return;
        }

        var existingContact = UserModel.ContactNumbers.FirstOrDefault(c => c.Id == editingContact.Id);
        if (existingContact != null)
        {
            // Update existing
            existingContact.Number = editingContact.Number;
            existingContact.Type = editingContact.Type;
            existingContact.Description = editingContact.Description;
            existingContact.IsActive = editingContact.IsActive;
        }
        else
        {
            // Add new
            UserModel.ContactNumbers.Add(editingContact);
        }

        contactDialogVisible = false;
    }

    private async Task HandleValidSubmit()
    {
        // Basic validation
        if (string.IsNullOrWhiteSpace(UserModel.FirstName) ||
            string.IsNullOrWhiteSpace(UserModel.LastName))
        {
            ToastService.ShowError("First name and last name are required", "Validation Error");
            return;
        }

        // Validate primary email
        var primaryEmail = UserModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary);
        if (primaryEmail == null || string.IsNullOrWhiteSpace(primaryEmail.EmailAddress) || !IsValidEmail(primaryEmail.EmailAddress))
        {
            ToastService.ShowError("A valid primary email address is required", "Validation Error");
            return;
        }

        // Validate primary contact number
        var primaryContact = UserModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary);
        if (primaryContact == null || string.IsNullOrWhiteSpace(primaryContact.Number))
        {
            ToastService.ShowError("A primary contact number is required", "Validation Error");
            return;
        }

        // Password validation for new users
        if (!IsEdit && (string.IsNullOrWhiteSpace(Password) || Password.Length < 6))
        {
            ToastService.ShowError("Password must be at least 6 characters", "Validation Error");
            return;
        }

        if (!IsEdit && Password != ConfirmPassword)
        {
            ToastService.ShowError("Passwords do not match", "Validation Error");
            return;
        }

        // For new users, ensure UserName is set to email
        if (!IsEdit)
        {
            UserModel.UserName = primaryEmail.EmailAddress;
            // In a real app, you'd hash the password here or in the service
            // This is a simplified example
            UserModel.PasswordHash = Password;
        }

        // Set entity relationships if not already set
        foreach (var email in UserModel.EmailAddresses)
        {
            email.RelatedEntityType = "User";
            if (!string.IsNullOrEmpty(UserModel.Id))
            {
                email.RelatedEntityId = int.Parse(UserModel.Id);
            }
        }

        foreach (var contact in UserModel.ContactNumbers)
        {
            contact.RelatedEntityType = "User";
            if (!string.IsNullOrEmpty(UserModel.Id))
            {
                contact.RelatedEntityId = int.Parse(UserModel.Id);
            }
        }

        // Ensure the Identity properties are in sync with our primary contacts
        UserModel.Email = primaryEmail.EmailAddress;
        UserModel.PhoneNumber = primaryContact.Number;

        await OnSave.InvokeAsync(UserModel);
        CloseModal();
    }

    private void CloseModal()
    {
        OnCancel.InvokeAsync();
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}