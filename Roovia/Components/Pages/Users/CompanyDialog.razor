@using Roovia.Models.Helper
@using Roovia.Models.Users
@using Roovia.Services
@inject IJSRuntime JSRuntime

<RVModal IsVisible="@IsVisible"
         Title="@(IsEdit ? "Edit Company" : "Add New Company")"
         OnClose="CloseModal"
         OnConfirm="HandleValidSubmit"
         ConfirmText="@(CurrentStep == TotalSteps ? "Save" : "Next")"
         CancelText="@(CurrentStep == 1 ? "Cancel" : "Back")"
         Size="md"
         CssClass="company-wizard-modal">
    <ChildContent>
        <div class="company-wizard">
            <div class="wizard-progress">
                @foreach (var step in Steps)
                {
                    <div class="wizard-step @(CurrentStep == step.Number ? "active" : "") @(CurrentStep > step.Number ? "completed" : "")">
                        <div class="step-indicator">
                            @if (CurrentStep > step.Number)
                            {
                                <i class="far fa-check"></i>
                            }
                            else
                            {
                                <span>@step.Number</span>
                            }
                        </div>
                        <div class="step-label">@step.Label</div>
                    </div>
                }
            </div>

            <div class="wizard-content">
                <EditForm Model="CompanyModel" OnValidSubmit="HandleValidSubmit">
                    <div class="wizard-panel @(CurrentStep == 1 ? "active" : "")">
                        <div class="section-header">
                            <h3><i class="far fa-building"></i> Company Information</h3>
                            <p>Enter the basic details about your company</p>
                        </div>

                        <div class="form-section">
                            <div class="form-group full-width">
                                <RVTextbox Label="Company Name"
                                           Id="companyName"
                                           Value="@CompanyModel.Name"
                                           ValueChanged="@((string val) => CompanyModel.Name = val)"
                                           IsValid="@(!string.IsNullOrEmpty(CompanyModel.Name))"
                                           ValidationMessage="Company name is required"
                                           IconLeft="far fa-building"
                                           CssClass="modern-input" />
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <RVTextbox Label="Registration Number"
                                               Id="registrationNumber"
                                               Value="@CompanyModel.RegistrationNumber"
                                               ValueChanged="@((string val) => CompanyModel.RegistrationNumber = val)"
                                               IconLeft="far fa-id-card"
                                               CssClass="modern-input" />
                                </div>

                                <div class="form-group">
                                    <RVTextbox Label="VAT Number (optional)"
                                               Id="vatNumber"
                                               Value="@CompanyModel.VatNumber"
                                               ValueChanged="@((string val) => CompanyModel.VatNumber = val)"
                                               IconLeft="far fa-file-invoice"
                                               CssClass="modern-input" />
                                </div>
                            </div>

                            <div class="form-group full-width">
                                <RVTextbox Label="Website (optional)"
                                           Id="website"
                                           Value="@CompanyModel.Website"
                                           ValueChanged="@((string val) => CompanyModel.Website = val)"
                                           IconLeft="far fa-globe"
                                           Placeholder="https://www.yourcompany.com"
                                           CssClass="modern-input" />
                            </div>
                        </div>
                    </div>

                    <div class="wizard-panel @(CurrentStep == 2 ? "active" : "")">
                        <div class="section-header">
                            <h3><i class="far fa-address-card"></i> Contact Information</h3>
                            <p>Add primary contact information for your company</p>
                        </div>

                        <div class="form-section">
                            <div class="form-group full-width">
                                <RVTextbox Label="Primary Email"
                                           Id="primaryEmail"
                                           Type="email"
                                           Value="@PrimaryEmail"
                                           ValueChanged="@((string val) => UpdatePrimaryEmail(val))"
                                           IsValid="@(!string.IsNullOrEmpty(PrimaryEmail) && IsValidEmail(PrimaryEmail))"
                                           ValidationMessage="Valid primary email is required"
                                           IconLeft="far fa-envelope"
                                           Placeholder="contact@yourcompany.com"
                                           CssClass="modern-input" />
                            </div>

                            <div class="form-group full-width">
                                <RVTextbox Label="Primary Contact Number"
                                           Id="primaryContactNumber"
                                           Value="@PrimaryContactNumber"
                                           ValueChanged="@((string val) => UpdatePrimaryContactNumber(val))"
                                           IsValid="@(!string.IsNullOrEmpty(PrimaryContactNumber))"
                                           ValidationMessage="Primary contact number is required"
                                           IconLeft="far fa-phone"
                                           Placeholder="+27 12 345 6789"
                                           CssClass="modern-input" />
                            </div>

                            @if (IsEdit && AdditionalEmails.Any())
                            {
                                <div class="section-header with-actions">
                                    <div>
                                        <h4><i class="far fa-envelope-open"></i> Additional Email Addresses</h4>
                                        <p>Other contact emails for this company</p>
                                    </div>
                                    <button type="button" class="add-item-btn" @onclick="AddEmail">
                                        <i class="far fa-plus"></i>
                                        <span>Add Email</span>
                                    </button>
                                </div>

                                <div class="contact-items">
                                    @foreach (var email in AdditionalEmails)
                                    {
                                        <div class="contact-item">
                                            <div class="contact-item-icon">
                                                <i class="far fa-envelope"></i>
                                            </div>
                                            <div class="contact-item-details">
                                                <div class="contact-item-primary">@email.EmailAddress</div>
                                                @if (!string.IsNullOrEmpty(email.Description))
                                                {
                                                    <div class="contact-item-secondary">@email.Description</div>
                                                }
                                            </div>
                                            <div class="contact-item-actions">
                                                <button type="button" class="item-action edit" @onclick="() => EditEmail(email)">
                                                    <i class="far fa-edit"></i>
                                                </button>
                                                <button type="button" class="item-action delete" @onclick="() => RemoveEmail(email)">
                                                    <i class="far fa-trash-alt"></i>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else if (IsEdit)
                            {
                                <div class="section-header with-actions">
                                    <div>
                                        <h4><i class="far fa-envelope-open"></i> Additional Email Addresses</h4>
                                        <p>Other contact emails for this company</p>
                                    </div>
                                    <button type="button" class="add-item-btn" @onclick="AddEmail">
                                        <i class="far fa-plus"></i>
                                        <span>Add Email</span>
                                    </button>
                                </div>
                                <div class="no-items-message">
                                    <i class="far fa-envelope-open"></i>
                                    <p>No additional email addresses have been added</p>
                                </div>
                            }

                            @if (IsEdit && AdditionalContactNumbers.Any())
                            {
                                <div class="section-header with-actions">
                                    <div>
                                        <h4><i class="far fa-phone-alt"></i> Additional Contact Numbers</h4>
                                        <p>Other phone numbers for this company</p>
                                    </div>
                                    <button type="button" class="add-item-btn" @onclick="AddContactNumber">
                                        <i class="far fa-plus"></i>
                                        <span>Add Number</span>
                                    </button>
                                </div>

                                <div class="contact-items">
                                    @foreach (var contact in AdditionalContactNumbers)
                                    {
                                        <div class="contact-item">
                                            <div class="contact-item-icon contact-@contact.Type.ToString().ToLower()">
                                                <i class="@GetContactTypeIcon(contact.Type)"></i>
                                            </div>
                                            <div class="contact-item-details">
                                                <div class="contact-item-primary">@contact.Number</div>
                                                <div class="contact-item-secondary">
                                                    <span class="contact-type">@contact.Type</span>
                                                    @if (!string.IsNullOrEmpty(contact.Description))
                                                    {
                                                        <span class="contact-description">@contact.Description</span>
                                                    }
                                                </div>
                                            </div>
                                            <div class="contact-item-actions">
                                                <button type="button" class="item-action edit" @onclick="() => EditContactNumber(contact)">
                                                    <i class="far fa-edit"></i>
                                                </button>
                                                <button type="button" class="item-action delete" @onclick="() => RemoveContactNumber(contact)">
                                                    <i class="far fa-trash-alt"></i>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else if (IsEdit)
                            {
                                <div class="section-header with-actions">
                                    <div>
                                        <h4><i class="far fa-phone-alt"></i> Additional Contact Numbers</h4>
                                        <p>Other phone numbers for this company</p>
                                    </div>
                                    <button type="button" class="add-item-btn" @onclick="AddContactNumber">
                                        <i class="far fa-plus"></i>
                                        <span>Add Number</span>
                                    </button>
                                </div>
                                <div class="no-items-message">
                                    <i class="far fa-phone"></i>
                                    <p>No additional contact numbers have been added</p>
                                </div>
                            }

                            @if (!IsEdit)
                            {
                                <div class="additional-contacts-actions">
                                    <button type="button" class="add-contact-btn" @onclick="AddEmail">
                                        <i class="far fa-envelope-plus"></i> Add Email Address
                                    </button>
                                    <button type="button" class="add-contact-btn" @onclick="AddContactNumber">
                                        <i class="far fa-phone-plus"></i> Add Contact Number
                                    </button>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="wizard-panel @(CurrentStep == 3 ? "active" : "")">
                        <div class="section-header">
                            <h3><i class="far fa-map-marker-alt"></i> Company Address</h3>
                            <p>Enter the physical address of your company</p>
                        </div>

                        <div class="form-section">
                            <div class="form-group full-width">
                                <RVTextbox Label="Street Address"
                                           Id="addressStreet"
                                           Value="@CompanyModel.Address.Street"
                                           ValueChanged="@((string val) => CompanyModel.Address.Street = val)"
                                           IconLeft="far fa-road"
                                           CssClass="modern-input" />
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <RVTextbox Label="Unit/Suite Number"
                                               Id="addressUnitNumber"
                                               Value="@CompanyModel.Address.UnitNumber"
                                               ValueChanged="@((string val) => CompanyModel.Address.UnitNumber = val)"
                                               IconLeft="far fa-door-open"
                                               CssClass="modern-input" />
                                </div>

                                <div class="form-group">
                                    <RVTextbox Label="Complex/Estate Name"
                                               Id="addressComplexName"
                                               Value="@CompanyModel.Address.ComplexName"
                                               ValueChanged="@((string val) => CompanyModel.Address.ComplexName = val)"
                                               IconLeft="far fa-building"
                                               CssClass="modern-input" />
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <RVTextbox Label="City"
                                               Id="addressCity"
                                               Value="@CompanyModel.Address.City"
                                               ValueChanged="@((string val) => CompanyModel.Address.City = val)"
                                               IconLeft="far fa-city"
                                               CssClass="modern-input" />
                                </div>

                                <div class="form-group">
                                    <RVTextbox Label="Suburb"
                                               Id="addressSuburb"
                                               Value="@CompanyModel.Address.Suburb"
                                               ValueChanged="@((string val) => CompanyModel.Address.Suburb = val)"
                                               IconLeft="far fa-map"
                                               CssClass="modern-input" />
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <RVTextbox Label="Province"
                                               Id="addressProvince"
                                               Value="@CompanyModel.Address.Province"
                                               ValueChanged="@((string val) => CompanyModel.Address.Province = val)"
                                               IconLeft="far fa-map"
                                               CssClass="modern-input" />
                                </div>

                                <div class="form-group">
                                    <RVTextbox Label="Postal Code"
                                               Id="addressPostalCode"
                                               Value="@CompanyModel.Address.PostalCode"
                                               ValueChanged="@((string val) => CompanyModel.Address.PostalCode = val)"
                                               IconLeft="far fa-mailbox"
                                               CssClass="modern-input" />
                                </div>
                            </div>

                            <div class="form-group full-width">
                                <RVTextbox Label="Country"
                                           Id="addressCountry"
                                           Value="@CompanyModel.Address.Country"
                                           ValueChanged="@((string val) => CompanyModel.Address.Country = val)"
                                           IconLeft="far fa-globe"
                                           CssClass="modern-input" />
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </ChildContent>
</RVModal>

@if (emailDialogVisible)
{
    <RVModal IsVisible="true"
             Title="@(editingEmail.Id == 0 ? "Add Email Address" : "Edit Email Address")"
             OnClose="CloseEmailDialog"
             OnConfirm="SaveEmail"
             ConfirmText="Save"
             CancelText="Cancel"
             Size="sm"
             CssClass="contact-dialog-modal">
        <ChildContent>
            <div class="form-section">
                <div class="form-group full-width">
                    <RVTextbox Label="Email Address"
                               Id="emailAddress"
                               Type="email"
                               Value="@editingEmail.EmailAddress"
                               ValueChanged="@((string val) => editingEmail.EmailAddress = val)"
                               IsValid="@(!string.IsNullOrEmpty(editingEmail.EmailAddress) && IsValidEmail(editingEmail.EmailAddress))"
                               ValidationMessage="Valid email address is required"
                               IconLeft="far fa-envelope"
                               CssClass="modern-input" />
                </div>

                <div class="form-group full-width">
                    <RVTextbox Label="Description (Optional)"
                               Id="emailDescription"
                               Value="@editingEmail.Description"
                               ValueChanged="@((string val) => editingEmail.Description = val)"
                               Placeholder="e.g. Billing, Support, Sales"
                               IconLeft="far fa-tag"
                               CssClass="modern-input" />
                </div>

                <div class="modern-checkbox">
                    <label class="checkbox-container">
                        <input type="checkbox" @bind="editingEmail.IsActive" id="emailActive" />
                        <span class="checkmark"></span>
                        <span class="checkbox-label">Is Active</span>
                    </label>
                </div>
            </div>
        </ChildContent>
    </RVModal>
}

@if (contactDialogVisible)
{
    <RVModal IsVisible="true"
             Title="@(editingContact.Id == 0 ? "Add Contact Number" : "Edit Contact Number")"
             OnClose="CloseContactDialog"
             OnConfirm="SaveContactNumber"
             ConfirmText="Save"
             CancelText="Cancel"
             Size="sm"
             CssClass="contact-dialog-modal">
        <ChildContent>
            <div class="form-section">
                <div class="form-group full-width">
                    <RVTextbox Label="Phone Number"
                               Id="phoneNumber"
                               Value="@editingContact.Number"
                               ValueChanged="@((string val) => editingContact.Number = val)"
                               IsValid="@(!string.IsNullOrEmpty(editingContact.Number))"
                               ValidationMessage="Phone number is required"
                               IconLeft="far fa-phone"
                               CssClass="modern-input" />
                </div>

                <div class="form-group full-width">
                    <label class="modern-label">Contact Type</label>
                    <div class="contact-type-selector">
                        @foreach (var type in Enum.GetValues(typeof(ContactNumberType)))
                        {
                            <div class="contact-type-option @(editingContact.Type.ToString() == type.ToString() ? "selected" : "")"
                                 @onclick="() => editingContact.Type = (ContactNumberType)type">
                                <i class="@GetContactTypeIcon((ContactNumberType)type)"></i>
                                <span>@type</span>
                            </div>
                        }
                    </div>
                </div>

                <div class="form-group full-width">
                    <RVTextbox Label="Description (Optional)"
                               Id="contactDescription"
                               Value="@editingContact.Description"
                               ValueChanged="@((string val) => editingContact.Description = val)"
                               Placeholder="e.g. Reception, Support Desk, Manager"
                               IconLeft="far fa-tag"
                               CssClass="modern-input" />
                </div>

                <div class="modern-checkbox">
                    <label class="checkbox-container">
                        <input type="checkbox" @bind="editingContact.IsActive" id="contactActive" />
                        <span class="checkmark"></span>
                        <span class="checkbox-label">Is Active</span>
                    </label>
                </div>
            </div>
        </ChildContent>
    </RVModal>
}

<style>
    /* Company Wizard Dialog Styling */
    .company-wizard-modal :deep(.roovia-modal-content) {
        max-height: 85vh;
        overflow-y: auto;
    }

    .company-wizard-modal :deep(.roovia-modal-header) {
        background: var(--subtle-bg);
        border-bottom: 1px solid var(--border-divider);
    }

    .company-wizard-modal :deep(.roovia-modal-title h3) {
        font-weight: 600;
        color: var(--primary);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .company-wizard-modal :deep(.roovia-modal-footer) {
        background: var(--subtle-bg);
        border-top: 1px solid var(--border-divider);
    }

    .contact-dialog-modal {
        --modal-width: 450px;
    }

    .company-wizard {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    /* Wizard Progress Bar */
    .wizard-progress {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem 1rem;
        position: relative;
        margin-bottom: 1rem;
    }

        .wizard-progress::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 8%;
            right: 8%;
            height: 2px;
            background-color: var(--border-divider);
            transform: translateY(-50%);
            z-index: 1;
        }

        .wizard-progress::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 8%;
            height: 2px;
            background: var(--primary-gradient);
            transform: translateY(-50%);
            z-index: 2;
            width: calc((84% / (var(--total-steps) - 1)) * (var(--current-step) - 1));
            transition: width 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
        }

    .wizard-step {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        position: relative;
        z-index: 3;
    }

    .step-indicator {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background-color: var(--content-bg);
        border: 2px solid var(--border-divider);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        color: var(--text-secondary);
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .wizard-step.active .step-indicator {
        border-color: var(--primary);
        background-color: var(--primary-light);
        color: var(--primary);
        transform: scale(1.1);
        box-shadow: 0 0 0 4px rgba(var(--primary-rgb), 0.15);
    }

    .wizard-step.completed .step-indicator {
        background-color: var(--primary);
        border-color: var(--primary);
        color: white;
    }

    .step-label {
        font-size: 0.8rem;
        color: var(--text-secondary);
        font-weight: 500;
        white-space: nowrap;
    }

    .wizard-step.active .step-label {
        color: var(--primary);
        font-weight: 600;
    }

    .wizard-step.completed .step-label {
        color: var(--text-primary);
    }

    /* Wizard Content */
    .wizard-content {
        position: relative;
        overflow: hidden;
    }

    .wizard-panel {
        display: none;
        animation: fadePanel 0.4s ease;
    }

        .wizard-panel.active {
            display: block;
        }

    @@keyframes fadePanel {
        from

    {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .section-header {
        margin-bottom: 1.5rem;
    }

        .section-header h3 {
            font-size: 1.15rem;
            font-weight: 600;
            color: var(--primary);
            margin-bottom: 0.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .section-header h4 {
            font-size: 1rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .section-header p {
            color: var(--text-secondary);
            font-size: 0.9rem;
            margin: 0;
        }

        .section-header.with-actions {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

    .form-section {
        display: flex;
        flex-direction: column;
        gap: 1.25rem;
    }

    .form-group {
        margin-bottom: 0.5rem;
    }

        .form-group.full-width {
            width: 100%;
        }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        width: 100%;
    }

    .modern-input:deep(.form-control) {
        border-radius: 10px;
        padding: 0.75rem 1rem 0.75rem 2.5rem;
        border: 1.5px solid var(--border-divider);
        background-color: var(--input-bg);
        transition: all 0.2s ease;
    }

    .modern-input:deep(.form-control:focus) {
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.15);
    }

    .modern-input:deep(.input-icon) {
        left: 1rem;
        color: var(--primary);
        opacity: 0.7;
    }

    .modern-input:deep(.form-label) {
        font-weight: 500;
        font-size: 0.9rem;
        color: var(--text-primary);
        margin-bottom: 0.4rem;
    }

    .modern-input:deep(.input-validation-message) {
        margin-top: 0.35rem;
        font-size: 0.8rem;
    }

    .modern-label {
        font-weight: 500;
        font-size: 0.9rem;
        color: var(--text-primary);
        margin-bottom: 0.4rem;
        display: block;
    }

    /* Additional contacts styling */
    .additional-contacts-actions {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-top: 0.5rem;
    }

    .add-contact-btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1rem;
        border: 1.5px dashed var(--border-divider);
        background-color: var(--subtle-bg);
        color: var(--text-secondary);
        border-radius: 10px;
        font-size: 0.9rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        flex: 1;
        justify-content: center;
    }

        .add-contact-btn:hover {
            border-color: var(--primary);
            background-color: var(--primary-lighter);
            color: var(--primary);
        }

    .add-item-btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 0.75rem;
        border: none;
        background-color: var(--primary-light);
        color: var(--primary);
        border-radius: 8px;
        font-size: 0.85rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .add-item-btn:hover {
            background-color: var(--primary);
            color: white;
        }

    .contact-items {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .contact-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.75rem 1rem;
        border-radius: 10px;
        background-color: var(--content-bg);
        border: 1px solid var(--border-divider);
        transition: all 0.2s ease;
    }

        .contact-item:hover {
            border-color: var(--border-color);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
            transform: translateY(-2px);
        }

    .contact-item-icon {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        background-color: var(--primary-light);
        color: var(--primary);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.1rem;
    }

        .contact-item-icon.contact-mobile {
            background-color: rgba(14, 165, 233, 0.1);
            color: #0ea5e9;
        }

        .contact-item-icon.contact-landline {
            background-color: rgba(245, 158, 11, 0.1);
            color: #f59e0b;
        }

        .contact-item-icon.contact-fax {
            background-color: rgba(168, 85, 247, 0.1);
            color: #a855f7;
        }

        .contact-item-icon.contact-whatsapp {
            background-color: rgba(34, 197, 94, 0.1);
            color: #22c55e;
        }

    .contact-item-details {
        flex: 1;
        min-width: 0;
    }

    .contact-item-primary {
        font-weight: 500;
        color: var(--text-primary);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .contact-item-secondary {
        font-size: 0.8rem;
        color: var(--text-secondary);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .contact-type {
        padding: 0.15rem 0.4rem;
        border-radius: 4px;
        background-color: var(--primary-lighter);
        color: var(--primary);
        font-size: 0.7rem;
        font-weight: 600;
        text-transform: uppercase;
    }

    .contact-description {
        color: var(--text-muted);
    }

    .contact-item-actions {
        display: flex;
        gap: 0.5rem;
    }

    .item-action {
        width: 32px;
        height: 32px;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: transparent;
        border: 1px solid var(--border-divider);
        color: var(--text-secondary);
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .item-action.edit:hover {
            background-color: var(--primary-light);
            color: var(--primary);
            border-color: var(--primary-light);
        }

        .item-action.delete:hover {
            background-color: var(--danger-light);
            color: var(--danger);
            border-color: var(--danger-light);
        }

    .no-items-message {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 2rem;
        background-color: var(--subtle-bg);
        border-radius: 10px;
        border: 1.5px dashed var(--border-divider);
        color: var(--text-muted);
    }

        .no-items-message i {
            font-size: 2rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        .no-items-message p {
            margin: 0;
            color: var(--text-secondary);
        }

    /* Contact type selector */
    .contact-type-selector {
        display: flex;
        flex-wrap: wrap;
        gap: 0.6rem;
    }

    .contact-type-option {
        flex: 1;
        min-width: 80px;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.4rem;
        padding: 0.75rem;
        border-radius: 8px;
        border: 1.5px solid var(--border-divider);
        background-color: var(--content-bg);
        color: var(--text-secondary);
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .contact-type-option:hover {
            border-color: var(--primary-light);
            background-color: var(--primary-lighter);
            color: var(--primary);
        }

        .contact-type-option.selected {
            border-color: var(--primary);
            background-color: var(--primary-light);
            color: var(--primary);
        }

        .contact-type-option i {
            font-size: 1.2rem;
        }

        .contact-type-option span {
            font-size: 0.8rem;
            font-weight: 500;
        }

    /* Modern checkbox */
    .modern-checkbox {
        margin-top: 0.5rem;
    }

    .checkbox-container {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        cursor: pointer;
        position: relative;
        user-select: none;
    }

        .checkbox-container input {
            position: absolute;
            opacity: 0;
            height: 0;
            width: 0;
        }

    .checkmark {
        height: 20px;
        width: 20px;
        border-radius: 6px;
        border: 1.5px solid var(--border-divider);
        background-color: var(--content-bg);
        position: relative;
        transition: all 0.2s ease;
    }

    .checkbox-container input:checked ~ .checkmark {
        background-color: var(--primary);
        border-color: var(--primary);
    }

    .checkmark:after {
        content: "";
        position: absolute;
        display: none;
        left: 6px;
        top: 2px;
        width: 5px;
        height: 10px;
        border: solid white;
        border-width: 0 2px 2px 0;
        transform: rotate(45deg);
    }

    .checkbox-container input:checked ~ .checkmark:after {
        display: block;
    }

    .checkbox-label {
        font-size: 0.9rem;
        color: var(--text-secondary);
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .wizard-step .step-label

    {
        display: none;
    }

    .form-row {
        grid-template-columns: 1fr;
    }

    .section-header.with-actions {
        flex-direction: column;
        gap: 0.75rem;
        align-items: flex-start;
    }

    .add-item-btn {
        width: 100%;
        justify-content: center;
    }

    .contact-item {
        flex-direction: column;
        align-items: flex-start;
    }

    .contact-item-actions {
        width: 100%;
        justify-content: flex-end;
        margin-top: 0.5rem;
    }

    .additional-contacts-actions {
        flex-direction: column;
    }

    }

    @@media (max-width: 480px) {
        .wizard-progress

    {
        padding: 0.5rem 0;
    }

    .step-indicator {
        width: 30px;
        height: 30px;
        font-size: 0.8rem;
    }

    .contact-type-selector {
        grid-template-columns: repeat(2, 1fr);
    }

    }

    @@media (max-width: 400px) {
        .contact-type-selector

    {
        grid-template-columns: 1fr;
    }

    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public Company CompanyModel { get; set; } = new Company();
    [Parameter] public EventCallback<Company> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    [Inject] private ToastService ToastService { get; set; }

    // Wizard State
    private int CurrentStep = 1;
    private const int TotalSteps = 3;
    private List<(int Number, string Label)> Steps = new List<(int Number, string Label)> {
        (1, "Company Info"),
        (2, "Contact Details"),
        (3, "Address")
    };

    // Contact and email management
    private string PrimaryEmail
    {
        get => CompanyModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary)?.EmailAddress ?? string.Empty;
    }

    private string PrimaryContactNumber
    {
        get => CompanyModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary)?.Number ?? string.Empty;
    }

    private IEnumerable<Email> AdditionalEmails =>
        CompanyModel.EmailAddresses?.Where(e => !e.IsPrimary) ?? Enumerable.Empty<Email>();

    private IEnumerable<ContactNumber> AdditionalContactNumbers =>
        CompanyModel.ContactNumbers?.Where(c => !c.IsPrimary) ?? Enumerable.Empty<ContactNumber>();

    // Email dialog
    private bool emailDialogVisible = false;
    private Email editingEmail = new Email();

    // Contact dialog
    private bool contactDialogVisible = false;
    private ContactNumber editingContact = new ContactNumber();

    protected override async Task OnInitializedAsync()
    {
        if (!IsEdit)
        {
            CompanyModel = new Company
                {
                    Address = new Address(),
                    EmailAddresses = new List<Email>
                {
                    new Email
                    {
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "Company"
                    }
                },
                    ContactNumbers = new List<ContactNumber>
                {
                    new ContactNumber
                    {
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "Company",
                        Type = ContactNumberType.Mobile
                    }
                }
                };
        }
        else
        {
            // Ensure collections exist
            if (CompanyModel.EmailAddresses == null)
            {
                CompanyModel.EmailAddresses = new List<Email>
                {
                    new Email
                    {
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "Company",
                        RelatedEntityId = CompanyModel.Id
                    }
                };
            }

            if (CompanyModel.ContactNumbers == null)
            {
                CompanyModel.ContactNumbers = new List<ContactNumber>
                {
                    new ContactNumber
                    {
                        IsPrimary = true,
                        IsActive = true,
                        RelatedEntityType = "Company",
                        RelatedEntityId = CompanyModel.Id,
                        Type = ContactNumberType.Mobile
                    }
                };
            }
        }

        // Set CSS variables for the progress bar
        await JSRuntime.InvokeVoidAsync("eval", @"
            document.documentElement.style.setProperty('--current-step', " + CurrentStep + @");
            document.documentElement.style.setProperty('--total-steps', " + TotalSteps + @");
        ");
    }

    private async Task HandleValidSubmit()
    {
        if (CurrentStep < TotalSteps)
        {
            // Validate current step
            if (!ValidateCurrentStep())
            {
                return;
            }

            // Move to next step
            CurrentStep++;
            await JSRuntime.InvokeVoidAsync("eval", @"
                document.documentElement.style.setProperty('--current-step', " + CurrentStep + @");
            ");
            return;
        }

        // On final step, submit the form
        if (!ValidateCurrentStep())
        {
            return;
        }

        // Set entity relationships if not already set
        foreach (var email in CompanyModel.EmailAddresses)
        {
            email.RelatedEntityType = "Company";
            email.RelatedEntityId = CompanyModel.Id;
        }

        foreach (var contact in CompanyModel.ContactNumbers)
        {
            contact.RelatedEntityType = "Company";
            contact.RelatedEntityId = CompanyModel.Id;
        }

        await OnSave.InvokeAsync(CompanyModel);
        CloseModal();
    }

    private bool ValidateCurrentStep()
    {
        switch (CurrentStep)
        {
            case 1: // Company Information
                if (string.IsNullOrWhiteSpace(CompanyModel.Name))
                {
                    ToastService.ShowError("Company name is required", "Validation Error");
                    return false;
                }
                return true;

            case 2: // Contact Information
                // Validate primary email
                var primaryEmail = CompanyModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary);
                if (primaryEmail == null || string.IsNullOrWhiteSpace(primaryEmail.EmailAddress) || !IsValidEmail(primaryEmail.EmailAddress))
                {
                    ToastService.ShowError("A valid primary email address is required", "Validation Error");
                    return false;
                }

                // Validate primary contact number
                var primaryContact = CompanyModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary);
                if (primaryContact == null || string.IsNullOrWhiteSpace(primaryContact.Number))
                {
                    ToastService.ShowError("A primary contact number is required", "Validation Error");
                    return false;
                }
                return true;

            case 3: // Address
                // Address is optional, so no validation needed
                return true;

            default:
                return true;
        }
    }

    private void CloseModal()
    {
        // Reset step if modal is closed
        CurrentStep = 1;
        OnCancel.InvokeAsync();
    }

    private void UpdatePrimaryEmail(string value)
    {
        var primaryEmail = CompanyModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary);

        if (primaryEmail == null)
        {
            if (CompanyModel.EmailAddresses == null)
                CompanyModel.EmailAddresses = new List<Email>();

            CompanyModel.EmailAddresses.Add(new Email
                {
                    EmailAddress = value,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Company",
                    RelatedEntityId = CompanyModel.Id
                });
        }
        else
        {
            primaryEmail.EmailAddress = value;
        }
    }

    private void UpdatePrimaryContactNumber(string value)
    {
        var primaryContact = CompanyModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary);

        if (primaryContact == null)
        {
            if (CompanyModel.ContactNumbers == null)
                CompanyModel.ContactNumbers = new List<ContactNumber>();

            CompanyModel.ContactNumbers.Add(new ContactNumber
                {
                    Number = value,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Company",
                    RelatedEntityId = CompanyModel.Id,
                    Type = ContactNumberType.Mobile
                });
        }
        else
        {
            primaryContact.Number = value;
        }
    }

    // Email management
    private void AddEmail()
    {
        editingEmail = new Email
            {
                IsActive = true,
                RelatedEntityType = "Company",
                RelatedEntityId = CompanyModel.Id
            };
        emailDialogVisible = true;
    }

    private void EditEmail(Email email)
    {
        editingEmail = new Email
            {
                Id = email.Id,
                EmailAddress = email.EmailAddress,
                Description = email.Description,
                IsActive = email.IsActive,
                IsPrimary = email.IsPrimary,
                RelatedEntityType = email.RelatedEntityType,
                RelatedEntityId = email.RelatedEntityId
            };
        emailDialogVisible = true;
    }

    private void RemoveEmail(Email email)
    {
        if (email.IsPrimary)
        {
            ToastService.ShowError("Cannot remove primary email address", "Error");
            return;
        }

        CompanyModel.EmailAddresses.Remove(email);
    }

    private void CloseEmailDialog()
    {
        emailDialogVisible = false;
    }

    private void SaveEmail()
    {
        if (string.IsNullOrWhiteSpace(editingEmail.EmailAddress) || !IsValidEmail(editingEmail.EmailAddress))
        {
            ToastService.ShowError("Please enter a valid email address", "Validation Error");
            return;
        }

        var existingEmail = CompanyModel.EmailAddresses.FirstOrDefault(e => e.Id == editingEmail.Id);
        if (existingEmail != null)
        {
            // Update existing
            existingEmail.EmailAddress = editingEmail.EmailAddress;
            existingEmail.Description = editingEmail.Description;
            existingEmail.IsActive = editingEmail.IsActive;
        }
        else
        {
            // Add new
            CompanyModel.EmailAddresses.Add(editingEmail);
        }

        emailDialogVisible = false;
    }

    // Contact number management
    private void AddContactNumber()
    {
        editingContact = new ContactNumber
            {
                IsActive = true,
                RelatedEntityType = "Company",
                RelatedEntityId = CompanyModel.Id,
                Type = ContactNumberType.Mobile
            };
        contactDialogVisible = true;
    }

    private void EditContactNumber(ContactNumber contact)
    {
        editingContact = new ContactNumber
            {
                Id = contact.Id,
                Number = contact.Number,
                Type = contact.Type,
                Description = contact.Description,
                IsActive = contact.IsActive,
                IsPrimary = contact.IsPrimary,
                RelatedEntityType = contact.RelatedEntityType,
                RelatedEntityId = contact.RelatedEntityId
            };
        contactDialogVisible = true;
    }

    private void RemoveContactNumber(ContactNumber contact)
    {
        if (contact.IsPrimary)
        {
            ToastService.ShowError("Cannot remove primary contact number", "Error");
            return;
        }

        CompanyModel.ContactNumbers.Remove(contact);
    }

    private void CloseContactDialog()
    {
        contactDialogVisible = false;
    }

    private void SaveContactNumber()
    {
        if (string.IsNullOrWhiteSpace(editingContact.Number))
        {
            ToastService.ShowError("Please enter a contact number", "Validation Error");
            return;
        }

        var existingContact = CompanyModel.ContactNumbers.FirstOrDefault(c => c.Id == editingContact.Id);
        if (existingContact != null)
        {
            // Update existing
            existingContact.Number = editingContact.Number;
            existingContact.Type = editingContact.Type;
            existingContact.Description = editingContact.Description;
            existingContact.IsActive = editingContact.IsActive;
        }
        else
        {
            // Add new
            CompanyModel.ContactNumbers.Add(editingContact);
        }

        contactDialogVisible = false;
    }

    private string GetContactTypeIcon(ContactNumberType type)
    {
        return type switch
        {
            ContactNumberType.Mobile => "far fa-mobile-alt",
            ContactNumberType.Landline => "far fa-phone-office",
            ContactNumberType.Fax => "far fa-fax",
            ContactNumberType.WhatsApp => "fab fa-whatsapp",
            _ => "far fa-phone"
        };
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}