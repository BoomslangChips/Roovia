@using Microsoft.AspNetCore.Components.Forms
@using Roovia.Components.Elements.Forms
@using Roovia.Interfaces
@using Roovia.Models.BusinessHelperModels
@using Roovia.Models.ProjectCdnConfigModels
@using Roovia.Models.UserCompanyMappingModels
@using Roovia.Models.UserCompanyModels
@using Roovia.Services
@using Roovia.Services.General
@inject IUser UserService
@inject ICdnService CdnService
@inject ToastService ToastService

<RVModal IsVisible="true"
Title="@GetDialogTitle()"
Icon="@GetDialogIcon()"
OnClose="OnCancel"
OnCancel="OnCancel"
OnConfirm="HandleConfirmAction"
ConfirmText="@(IsView ? "Close" : (IsEditMode ? "Save" : "Edit"))"
CancelText="@(IsEditMode ? "Cancel" : "Close")"
Size="lg">
    <ChildContent>
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <h3 class="loading-text">Loading company details...</h3>
            </div>
        }
        else
        {
            <div class="company-dialog">
                @if (IsViewMode)
                {
                    <div class="view-mode">
                        <div class="detail-header">
                            <div class="detail-icon">
                                @if (CompanyModel.MainLogoId.HasValue && CompanyModel.MainLogo != null)
                                {
                                    <img src="@CompanyModel.MainLogo.Url" alt="@CompanyModel.Name" class="company-logo-icon" />
                                }
                                else
                                {
                                    <i class="fa-light fa-building"></i>
                                }
                            </div>
                            <div class="detail-title">
                                <h2>@CompanyModel.Name</h2>
                                <div class="company-status">
                                    @if (CompanyModel.Status != null)
                                    {
                                        <span class="status-badge @(CompanyModel.IsActive ? "active" : "inactive")">
                                            @CompanyModel.Status.Name
                                        </span>
                                    }
                                    @if (CompanyModel.SubscriptionPlanId.HasValue && currentSubscriptionPlan != null)
                                    {
                                        <span class="subscription-badge">@currentSubscriptionPlan.Name</span>
                                    }
                                </div>
                            </div>
                            @if (CanEdit)
                            {
                                <div class="detail-actions">
                                    <RVButton ButtonType="primary" IconLeft="fa-light fa-edit" Text="Edit"
                                    OnClick="SwitchToEditMode" CssClass="edit-btn" />
                                </div>
                            }
                        </div>

                        <div class="detail-sections">
                            <div class="detail-section">
                                <h3><i class="fa-light fa-info-circle"></i> Basic Information</h3>
                                <div class="detail-grid">
                                    <div class="detail-item">
                                        <span class="detail-label">Registration Number</span>
                                        <span class="detail-value">@CompanyModel.RegistrationNumber</span>
                                    </div>
                                    <div class="detail-item">
                                        <span class="detail-label">VAT Number</span>
                                        <span class="detail-value">@(string.IsNullOrEmpty(CompanyModel.VatNumber) ? "Not provided" : CompanyModel.VatNumber)</span>
                                    </div>
                                    <div class="detail-item">
                                        <span class="detail-label">Website</span>
                                        <span class="detail-value">
                                            @if (!string.IsNullOrEmpty(CompanyModel.Website))
                                            {
                                                <a href="@CompanyModel.Website" target="_blank">@CompanyModel.Website</a>
                                            }
                                            else
                                            {
                                                <span>Not provided</span>
                                            }
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <span class="detail-label">Status</span>
                                        <span class="detail-value">
                                            @if (CompanyModel.Status != null)
                                            {
                                                @CompanyModel.Status.Name
                                            }
                                            else
                                            {
                                                <span>Not set</span>
                                            }
                                        </span>
                                    </div>
                                    <div class="detail-item">
                                        <span class="detail-label">Subscription Plan</span>
                                        <span class="detail-value">
                                            @if (currentSubscriptionPlan != null)
                                            {
                                                @currentSubscriptionPlan.Name
                                            }
                                            else
                                            {
                                                <span>No plan selected</span>
                                            }
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <div class="detail-section">
                                <h3><i class="fa-light fa-address-card"></i> Contact Information</h3>
                                <div class="detail-grid">
                                    @if (CompanyModel.EmailAddresses?.Any() == true)
                                    {
                                        var primaryEmail = CompanyModel.EmailAddresses.FirstOrDefault(e => e.IsPrimary);
                                        <div class="detail-item">
                                            <span class="detail-label">Primary Email</span>
                                            <span class="detail-value">
                                                @if (primaryEmail != null)
                                                {
                                                    <a href="mailto:@primaryEmail.EmailAddress">@primaryEmail.EmailAddress</a>
                                                }
                                                else
                                                {
                                                    <span>Not provided</span>
                                                }
                                            </span>
                                        </div>
                                    }
                                    @if (CompanyModel.ContactNumbers?.Any() == true)
                                    {
                                        var primaryContact = CompanyModel.ContactNumbers.FirstOrDefault(c => c.IsPrimary);
                                        <div class="detail-item">
                                            <span class="detail-label">Primary Contact</span>
                                            <span class="detail-value">
                                                @if (primaryContact != null)
                                                {
                                                    <a href="tel:@primaryContact.Number">@primaryContact.Number</a>
                                                }
                                                else
                                                {
                                                    <span>Not provided</span>
                                                }
                                            </span>
                                        </div>
                                    }
                                </div>

                                @if (CompanyModel.EmailAddresses?.Count > 1)
                                {
                                    <div class="additional-emails mt-3">
                                        <h4>Additional Email Addresses</h4>
                                        <div class="contact-list">
                                            @foreach (var email in CompanyModel.EmailAddresses.Where(e => !e.IsPrimary))
                                            {
                                                <div class="contact-item">
                                                    <div class="contact-type">
                                                        @(!string.IsNullOrEmpty(email.Description) ? email.Description : "Email")
                                                    </div>
                                                    <div class="contact-value">
                                                        <a href="mailto:@email.EmailAddress">@email.EmailAddress</a>
                                                    </div>
                                                    <div class="contact-status">
                                                        @if (!email.IsActive)
                                                        {
                                                            <span class="status-badge status-inactive">Inactive</span>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }

                                @if (CompanyModel.ContactNumbers?.Count > 1)
                                {
                                    <div class="additional-contacts mt-3">
                                        <h4>Additional Contact Numbers</h4>
                                        <div class="contact-list">
                                            @foreach (var phone in CompanyModel.ContactNumbers.Where(c => !c.IsPrimary))
                                            {
                                                <div class="contact-item">
                                                    <div class="contact-type">
                                                        @(!string.IsNullOrEmpty(phone.Description) ? phone.Description : phone.Type.ToString())
                                                    </div>
                                                    <div class="contact-value">
                                                        <a href="tel:@phone.Number">@phone.Number</a>
                                                    </div>
                                                    <div class="contact-status">
                                                        @if (!phone.IsActive)
                                                        {
                                                            <span class="status-badge status-inactive">Inactive</span>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="detail-section">
                                <h3><i class="fa-light fa-map-marker-alt"></i> Address</h3>
                                <div class="address-display">
                                    @if (CompanyModel.Address != null)
                                    {
                                        <p>
                                            @if (!string.IsNullOrEmpty(CompanyModel.Address.Street))
                                            {
                                                @CompanyModel.Address.Street

                                                <br />
                                            }
                                            @if (!string.IsNullOrEmpty(CompanyModel.Address.UnitNumber))
                                            {
                                                @:Unit @CompanyModel.Address.UnitNumber
                                                @if (!string.IsNullOrEmpty(CompanyModel.Address.ComplexName))
                                                {
                                                    @:, @CompanyModel.Address.ComplexName
                                                }
                                                <br />
                                            }
                                            else if (!string.IsNullOrEmpty(CompanyModel.Address.ComplexName))
                                            {
                                                @CompanyModel.Address.ComplexName

                                                <br />
                                            }
                                            @if (!string.IsNullOrEmpty(CompanyModel.Address.BuildingName))
                                            {
                                                @CompanyModel.Address.BuildingName

                                                <br />
                                            }
                                            @if (!string.IsNullOrEmpty(CompanyModel.Address.Suburb))
                                            {
                                                @CompanyModel.Address.Suburb
                                                @if (!string.IsNullOrEmpty(CompanyModel.Address.City))
                                                {
                                                    @:, @CompanyModel.Address.City
                                                }
                                                <br />
                                            }
                                            else if (!string.IsNullOrEmpty(CompanyModel.Address.City))
                                            {
                                                @CompanyModel.Address.City

                                                <br />
                                            }
                                            @if (!string.IsNullOrEmpty(CompanyModel.Address.Province))
                                            {
                                                @CompanyModel.Address.Province
                                                @if (!string.IsNullOrEmpty(CompanyModel.Address.PostalCode))
                                                {
                                                    @:, @CompanyModel.Address.PostalCode
                                                }
                                                <br />
                                            }
                                            else if (!string.IsNullOrEmpty(CompanyModel.Address.PostalCode))
                                            {
                                                @CompanyModel.Address.PostalCode

                                                <br />
                                            }
                                            @if (!string.IsNullOrEmpty(CompanyModel.Address.Country))
                                            {
                                                @CompanyModel.Address.Country
                                            }
                                        </p>
                                    }
                                    else
                                    {
                                        <p>No address information provided</p>
                                    }
                                </div>
                            </div>

                            <div class="detail-section">
                                <h3><i class="fa-light fa-image"></i> Company Logo</h3>
                                <div class="logo-display">
                                    @if (CompanyModel.MainLogoId.HasValue && CompanyModel.MainLogo != null)
                                    {
                                        <div class="logo-container">
                                            <img src="@CompanyModel.MainLogo.Url" alt="Company Logo" class="company-logo" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="empty-logo">
                                            <i class="fa-light fa-building fa-4x"></i>
                                            <p>No logo uploaded</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if (IsEditMode)
                {
                    <EditForm Model="CompanyModel" OnValidSubmit="Save" FormName="editCompany" class="company-edit-form">
                        <DataAnnotationsValidator />
                        <FluentValidationValidator />

                        <RVTab Tabs="formTabs" Size="sm" OnTabChange="HandleTabChange">
                            <RVTabPanel TabId="basic" IsActive='activeTab == "basic"'>
                                <div class="form-section">
                                    <div class="section-title">
                                        <h4><i class="fa-light fa-building"></i> Basic Information</h4>
                                        <p>Enter the basic details for this company</p>
                                    </div>

                                    <div class="form-group">
                                        <label for="name">Company Name</label>
                                        <RVTextbox Id="name"
                                        Value="@CompanyModel.Name"
                                        ValueChanged="value => CompanyModel.Name = value"
                                        Placeholder="Enter company name"
                                        IconLeft="fa-light fa-building" />
                                        <ValidationMessage For="@(() => CompanyModel.Name)" />
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="registrationNumber">Registration Number</label>
                                            <RVTextbox Id="registrationNumber"
                                            Value="@CompanyModel.RegistrationNumber"
                                            ValueChanged="value => CompanyModel.RegistrationNumber = value"
                                            Placeholder="Enter registration number"
                                            IconLeft="fa-light fa-id-card" />
                                            <ValidationMessage For="@(() => CompanyModel.RegistrationNumber)" />
                                        </div>

                                        <div class="form-group">
                                            <label for="vatNumber">VAT Number</label>
                                            <RVTextbox Id="vatNumber"
                                            Value="@CompanyModel.VatNumber"
                                            ValueChanged="value => CompanyModel.VatNumber = value"
                                            Placeholder="Enter VAT number (optional)"
                                            IconLeft="fa-light fa-receipt" />
                                            <ValidationMessage For="@(() => CompanyModel.VatNumber)" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="website">Website</label>
                                        <RVTextbox Id="website"
                                        Value="@CompanyModel.Website"
                                        ValueChanged="value => CompanyModel.Website = value"
                                        Placeholder="Enter website URL (optional)"
                                        IconLeft="fa-light fa-globe" />
                                        <ValidationMessage For="@(() => CompanyModel.Website)" />
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="status">Status</label>
                                            <RVSelect Id="status"
                                            Value="@(CompanyModel.StatusId?.ToString() ?? "")"
                                            ValueChanged="value => UpdateStatus(value)"
                                            Placeholder="Select status"
                                            IconLeft="fa-light fa-toggle-on">
                                                @if (CompanyStatusTypes != null)
                                                {
                                                    @foreach (var status in CompanyStatusTypes)
                                                    {
                                                        <option value="@status.Id">@status.Name</option>
                                                    }
                                                }
                                            </RVSelect>
                                        </div>

                                        <div class="form-group">
                                            <label for="subscription">Subscription Plan</label>
                                            <RVSelect Id="subscription"
                                            Value="@(CompanyModel.SubscriptionPlanId?.ToString() ?? "")"
                                            ValueChanged="value => UpdateSubscriptionPlan(value)"
                                            Placeholder="Select subscription plan"
                                            IconLeft="fa-light fa-credit-card">
                                                @if (SubscriptionPlans != null)
                                                {
                                                    @foreach (var plan in SubscriptionPlans)
                                                    {
                                                        <option value="@plan.Id">@plan.Name - $@plan.Price/@plan.BillingCycleDays days</option>
                                                    }
                                                }
                                            </RVSelect>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <RVSwitch Label="Active"
                                        Value="CompanyModel.IsActive"
                                        ValueChanged="value => CompanyModel.IsActive = value"
                                        HelperText="Inactive companies will not be accessible to users" />
                                    </div>
                                </div>
                            </RVTabPanel>

                            <RVTabPanel TabId="contact" IsActive='activeTab == "contact"'>
                                <div class="form-section">
                                    <div class="section-title">
                                        <h4><i class="fa-light fa-address-book"></i> Contact Information</h4>
                                        <p>Manage the company's contact details</p>
                                    </div>

                                    <!-- Primary Email -->
                                    <div class="form-group">
                                        <label for="primaryEmail">Primary Email Address</label>
                                        <RVTextbox Id="primaryEmail"
                                        Type="email"
                                        Value="@GetPrimaryEmail()"
                                        ValueChanged="UpdatePrimaryEmail"
                                        Placeholder="Enter primary email address"
                                        IconLeft="fa-light fa-envelope" />
                                    </div>

                                    <!-- Primary Phone -->
                                    <div class="form-group">
                                        <label for="primaryPhone">Primary Phone Number</label>
                                        <RVTextbox Id="primaryPhone"
                                        Type="tel"
                                        Value="@GetPrimaryPhone()"
                                        ValueChanged="UpdatePrimaryPhone"
                                        Placeholder="Enter primary phone number"
                                        IconLeft="fa-light fa-phone" />
                                    </div>

                                    <!-- Additional Email Addresses Section -->
                                    <div class="additional-contacts">
                                        <div class="section-subtitle">
                                            <h5><i class="fa-light fa-envelope"></i> Additional Email Addresses</h5>
                                            <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-plus" Text="Add Email"
                                            OnClick="AddEmail" CssClass="add-btn" />
                                        </div>

                                        @if (CompanyModel.EmailAddresses?.Where(e => !e.IsPrimary).Any() == true)
                                        {
                                            <div class="email-list">
                                                @foreach (var email in CompanyModel.EmailAddresses.Where(e => !e.IsPrimary))
                                                {
                                                    <div class="email-item">
                                                        <div class="email-content">
                                                            <RVTextbox Value="@email.EmailAddress"
                                                            ValueChanged="value => UpdateEmailAddress(email, value)"
                                                            Placeholder="Enter email address"
                                                            IconLeft="fa-light fa-envelope"
                                                            Size="sm" />
                                                            <RVTextbox Value="@email.Description"
                                                            ValueChanged="value => UpdateEmailDescription(email, value)"
                                                            Placeholder="Description (e.g. Work, Support)"
                                                            IconLeft="fa-light fa-tag"
                                                            Size="sm" />
                                                        </div>
                                                        <RVButton ButtonType="outline-danger" Size="xs" IconLeft="fa-light fa-trash"
                                                        OnClick="() => RemoveEmail(email)" CssClass="remove-btn" />
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="empty-list">
                                                <i class="fa-light fa-inbox-empty"></i>
                                                <p>No additional email addresses</p>
                                            </div>
                                        }
                                    </div>

                                    <!-- Additional Phone Numbers Section -->
                                    <div class="additional-contacts">
                                        <div class="section-subtitle">
                                            <h5><i class="fa-light fa-phone"></i> Additional Phone Numbers</h5>
                                            <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-plus" Text="Add Phone"
                                            OnClick="AddPhone" CssClass="add-btn" />
                                        </div>

                                        @if (CompanyModel.ContactNumbers?.Where(c => !c.IsPrimary).Any() == true)
                                        {
                                            <div class="phone-list">
                                                @foreach (var phone in CompanyModel.ContactNumbers.Where(c => !c.IsPrimary))
                                                {
                                                    <div class="phone-item">
                                                        <div class="phone-content">
                                                            <RVTextbox Value="@phone.Number"
                                                            ValueChanged="value => UpdatePhoneNumber(phone, value)"
                                                            Placeholder="Enter phone number"
                                                            IconLeft="fa-light fa-phone"
                                                            Size="sm" />
                                                            <RVSelect Value="@phone.Type.ToString()"
                                                            ValueChanged="value => UpdatePhoneType(phone, value)"
                                                            Placeholder="Select type"
                                                            IconLeft="fa-light fa-phone-office"
                                                            Size="sm">
                                                                @foreach (var type in Enum.GetValues(typeof(ContactNumberType)))
                                                                {
                                                                    <option value="@type">@type</option>
                                                                }
                                                            </RVSelect>
                                                            <RVTextbox Value="@phone.Description"
                                                            ValueChanged="value => UpdatePhoneDescription(phone, value)"
                                                            Placeholder="Description"
                                                            IconLeft="fa-light fa-tag"
                                                            Size="sm" />
                                                        </div>
                                                        <RVButton ButtonType="outline-danger" Size="xs" IconLeft="fa-light fa-trash"
                                                        OnClick="() => RemovePhone(phone)" CssClass="remove-btn" />
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="empty-list">
                                                <i class="fa-light fa-phone-slash"></i>
                                                <p>No additional phone numbers</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </RVTabPanel>

                            <RVTabPanel TabId="address" IsActive='activeTab == "address"'>
                                <div class="form-section">
                                    <div class="section-title">
                                        <h4><i class="fa-light fa-map-marker-alt"></i> Address Information</h4>
                                        <p>Enter the company's address details</p>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="street">Street</label>
                                            <RVTextbox Id="street"
                                            Value="@CompanyModel.Address.Street"
                                            ValueChanged="value => CompanyModel.Address.Street = value"
                                            Placeholder="Enter street address"
                                            IconLeft="fa-light fa-road" />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="unitNumber">Unit Number</label>
                                            <RVTextbox Id="unitNumber"
                                            Value="@CompanyModel.Address.UnitNumber"
                                            ValueChanged="value => CompanyModel.Address.UnitNumber = value"
                                            Placeholder="Enter unit number (optional)"
                                            IconLeft="fa-light fa-door-closed" />
                                        </div>

                                        <div class="form-group">
                                            <label for="complexName">Complex Name</label>
                                            <RVTextbox Id="complexName"
                                            Value="@CompanyModel.Address.ComplexName"
                                            ValueChanged="value => CompanyModel.Address.ComplexName = value"
                                            Placeholder="Enter complex name (optional)"
                                            IconLeft="fa-light fa-building" />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="buildingName">Building Name</label>
                                            <RVTextbox Id="buildingName"
                                            Value="@CompanyModel.Address.BuildingName"
                                            ValueChanged="value => CompanyModel.Address.BuildingName = value"
                                            Placeholder="Enter building name (optional)"
                                            IconLeft="fa-light fa-building" />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="suburb">Suburb</label>
                                            <RVTextbox Id="suburb"
                                            Value="@CompanyModel.Address.Suburb"
                                            ValueChanged="value => CompanyModel.Address.Suburb = value"
                                            Placeholder="Enter suburb"
                                            IconLeft="fa-light fa-map" />
                                        </div>

                                        <div class="form-group">
                                            <label for="city">City</label>
                                            <RVTextbox Id="city"
                                            Value="@CompanyModel.Address.City"
                                            ValueChanged="value => CompanyModel.Address.City = value"
                                            Placeholder="Enter city"
                                            IconLeft="fa-light fa-city" />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="province">Province</label>
                                            <RVTextbox Id="province"
                                            Value="@CompanyModel.Address.Province"
                                            ValueChanged="value => CompanyModel.Address.Province = value"
                                            Placeholder="Enter province"
                                            IconLeft="fa-light fa-map-marked" />
                                        </div>

                                        <div class="form-group">
                                            <label for="postalCode">Postal Code</label>
                                            <RVTextbox Id="postalCode"
                                            Value="@CompanyModel.Address.PostalCode"
                                            ValueChanged="value => CompanyModel.Address.PostalCode = value"
                                            Placeholder="Enter postal code"
                                            IconLeft="fa-light fa-mailbox" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="country">Country</label>
                                        <RVTextbox Id="country"
                                        Value="@CompanyModel.Address.Country"
                                        ValueChanged="value => CompanyModel.Address.Country = value"
                                        Placeholder="Enter country"
                                        IconLeft="fa-light fa-globe" />
                                    </div>
                                </div>
                            </RVTabPanel>

                            <RVTabPanel TabId="logo" IsActive='activeTab == "logo"'>
                                <div class="form-section">
                                    <div class="section-title">
                                        <h4><i class="fa-light fa-image"></i> Company Logo</h4>
                                        <p>Upload your company logo</p>
                                    </div>

                                    <div class="logo-upload-section">
                                        <div class="current-logo">
                                            <h5>Current Logo</h5>
                                            @if (CompanyModel.MainLogoId.HasValue && CompanyModel.MainLogo != null)
                                            {
                                                <div class="logo-preview">
                                                    <img src="@CompanyModel.MainLogo.Url" alt="Company Logo" class="logo-image" />
                                                </div>
                                                <div class="logo-actions mt-2">
                                                    <RVButton ButtonType="outline-danger" Size="sm" IconLeft="fa-light fa-trash"
                                                    Text="Remove Logo" OnClick="RemoveLogo" />
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="empty-logo">
                                                    <i class="fa-light fa-image fa-3x"></i>
                                                    <p>No logo uploaded yet</p>
                                                </div>
                                            }
                                        </div>

                                        <div class="upload-area">
                                            <h5>Upload New Logo</h5>
                                            <InputFile OnChange="OnLogoInputChange" class="upload-input" accept="image/*" />
                                            <div class="upload-placeholder @(isUploading ? "d-none" : "")">
                                                <i class="fa-light fa-cloud-upload fa-2x"></i>
                                                <p>Drag and drop your logo here, or click to browse</p>
                                                <span class="file-hint">Recommended size: 512x512px, JPG or PNG format</span>
                                            </div>
                                            @if (isUploading)
                                            {
                                                <div class="upload-progress">
                                                    <div class="loading-spinner sm"></div>
                                                    <span>Uploading logo... @uploadProgress%</span>
                                                </div>
                                            }
                                            @if (!string.IsNullOrEmpty(logoPreview))
                                            {
                                                <div class="logo-preview-new">
                                                    <img src="@logoPreview" alt="New Logo Preview" class="preview-image" />
                                                    <div class="preview-actions">
                                                        <RVButton ButtonType="outline-danger" Size="sm" IconLeft="fa-light fa-times"
                                                        Text="Remove" OnClick="CancelLogoUpload" />
                                                        <RVButton ButtonType="primary" Size="sm" IconLeft="fa-light fa-check"
                                                        Text="Use This Logo" OnClick="ApplyLogo" />
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </RVTabPanel>
                        </RVTab>
                    </EditForm>
                }
            </div>
        }
    </ChildContent>
</RVModal>

@code {
    [Parameter] public Company CompanyModel { get; set; } = new Company();
    [Parameter] public IEnumerable<CompanyStatusType>? CompanyStatusTypes { get; set; }
    [Parameter] public IEnumerable<SubscriptionPlan>? SubscriptionPlans { get; set; }
    [Parameter] public bool IsEdit { get; set; } = false;
    [Parameter] public bool IsView { get; set; } = false;
    [Parameter] public bool CanEdit { get; set; } = true;
    [Parameter] public EventCallback<Company> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private bool isLoading = false;
    private string activeTab = "basic";
    private bool IsEditMode => (IsEdit || isInEditMode) && !IsView;
    private bool isInEditMode = false;
    private bool IsViewMode => IsView || !IsEditMode;
    private SubscriptionPlan? currentSubscriptionPlan = null;

    // Logo handling
    private string logoPreview = string.Empty;
    private IBrowserFile? logoFile;
    private bool isUploading = false;
    private int uploadProgress = 0;
    private long maxFileSize = 1024 * 1024 * 5; // 5MB

    // Form tabs
    private List<RVTab.RVTabItem> formTabs = new List<RVTab.RVTabItem>
    {
        new RVTab.RVTabItem { Id = "basic", Title = "Basic Information", Icon = "fa-light fa-building" },
        new RVTab.RVTabItem { Id = "contact", Title = "Contact Details", Icon = "fa-light fa-address-card" },
        new RVTab.RVTabItem { Id = "address", Title = "Address", Icon = "fa-light fa-map-marker-alt" },
        new RVTab.RVTabItem { Id = "logo", Title = "Company Logo", Icon = "fa-light fa-image" }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (CompanyModel.Id != 0)
            {
                await LoadCompanyData();
            }
            else
            {
                InitializeNewCompany();
            }

            // For new companies, start in edit mode
            if (CompanyModel.Id == 0)
            {
                isInEditMode = true;
            }
            else if (IsView)
            {
                isInEditMode = false;
            }

            // Load current subscription plan
            if (CompanyModel.SubscriptionPlanId.HasValue && SubscriptionPlans != null)
            {
                currentSubscriptionPlan = SubscriptionPlans.FirstOrDefault(p => p.Id == CompanyModel.SubscriptionPlanId.Value);
            }

            await InvokeAsync(() => this.StateHasChanged());
        }

    }

    private void InitializeNewCompany()
    {
        CompanyModel = new Company
            {
                IsActive = true,
                Address = new Address { Country = "South Africa" },
                EmailAddresses = new List<Email>(),
                ContactNumbers = new List<ContactNumber>(),
                CreatedOn = DateTime.Now
            };
    }

    private async Task HandleConfirmAction()
    {
        if (IsView)
        {
            await OnCancel.InvokeAsync();
        }
        else if (IsEditMode)
        {
            await Save();
        }
        else
        {
            SwitchToEditMode();
        }
    }

    private async Task LoadCompanyData()
    {
        isLoading = true;

        try
        {
            var response = await UserService.GetCompanyWithDetails(CompanyModel.Id);
            if (response.ResponseInfo.Success)
            {
                CompanyModel = (Company)response.Response;

                // Load current subscription plan
                if (CompanyModel.SubscriptionPlanId.HasValue && SubscriptionPlans != null)
                {
                    currentSubscriptionPlan = SubscriptionPlans.FirstOrDefault(p => p.Id == CompanyModel.SubscriptionPlanId.Value);
                }
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading company: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetDialogTitle()
    {
        if (IsViewMode)
        {
            return "Company Details";
        }
        else if (CompanyModel.Id == 0)
        {
            return "Create Company";
        }
        else
        {
            return "Edit Company";
        }
    }

    private string GetDialogIcon()
    {
        if (IsViewMode)
        {
            return "fa-light fa-building";
        }
        else if (CompanyModel.Id == 0)
        {
            return "fa-light fa-building-plus";
        }
        else
        {
            return "fa-light fa-building-pen";
        }
    }

    private void SwitchToEditMode()
    {
        isInEditMode = true;
    }

    private void HandleTabChange(string tabId)
    {
        activeTab = tabId;
    }

    private async Task Save()
    {
        try
        {
            if (CompanyModel.Id == 0)
            {
                // Create new company
                CompanyModel.CreatedBy = "CurrentUser"; // Replace with actual current user ID
                CompanyModel.CreatedOn = DateTime.Now;
            }
            else
            {
                // Update existing company
                CompanyModel.UpdatedBy = "CurrentUser"; // Replace with actual current user ID
                CompanyModel.UpdatedDate = DateTime.Now;
            }

            await OnSave.InvokeAsync(CompanyModel);

            // If we're in "switch to edit mode" state, go back to view mode after save
            if (isInEditMode)
            {
                isInEditMode = false;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving company: {ex.Message}", "Error");
        }
    }

    // Status and Subscription Plan handlers
    private void UpdateStatus(string value)
    {
        if (int.TryParse(value, out var statusId))
        {
            CompanyModel.StatusId = statusId;
            // Update the status object if needed
            if (CompanyStatusTypes != null)
            {
                CompanyModel.Status = CompanyStatusTypes.FirstOrDefault(s => s.Id == statusId);
            }
        }
    }

    private void UpdateSubscriptionPlan(string value)
    {
        if (int.TryParse(value, out var planId))
        {
            CompanyModel.SubscriptionPlanId = planId;
            // Update the current subscription plan
            if (SubscriptionPlans != null)
            {
                currentSubscriptionPlan = SubscriptionPlans.FirstOrDefault(p => p.Id == planId);
            }
        }
    }

    // Helper methods for email and phone management
    private string GetPrimaryEmail()
    {
        var primaryEmail = CompanyModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary);
        return primaryEmail?.EmailAddress ?? string.Empty;
    }

    private string GetPrimaryPhone()
    {
        var primaryPhone = CompanyModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary);
        return primaryPhone?.Number ?? string.Empty;
    }

    private void UpdatePrimaryEmail(string value)
    {
        if (CompanyModel.EmailAddresses == null)
        {
            CompanyModel.EmailAddresses = new List<Email>();
        }

        var primaryEmail = CompanyModel.EmailAddresses.FirstOrDefault(e => e.IsPrimary);

        if (primaryEmail != null)
        {
            primaryEmail.EmailAddress = value;
            primaryEmail.UpdatedDate = DateTime.Now;
        }
        else if (!string.IsNullOrEmpty(value))
        {
            CompanyModel.EmailAddresses.Add(new Email
                {
                    EmailAddress = value,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Company",
                    CreatedOn = DateTime.Now
                });
        }
    }

    private void UpdatePrimaryPhone(string value)
    {
        if (CompanyModel.ContactNumbers == null)
        {
            CompanyModel.ContactNumbers = new List<ContactNumber>();
        }

        var primaryPhone = CompanyModel.ContactNumbers.FirstOrDefault(c => c.IsPrimary);

        if (primaryPhone != null)
        {
            primaryPhone.Number = value;
            primaryPhone.UpdatedDate = DateTime.Now;
        }
        else if (!string.IsNullOrEmpty(value))
        {
            CompanyModel.ContactNumbers.Add(new ContactNumber
                {
                    Number = value,
                    Type = ContactNumberType.Mobile,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Company",
                    CreatedOn = DateTime.Now
                });
        }
    }

    private void AddEmail()
    {
        if (CompanyModel.EmailAddresses == null)
        {
            CompanyModel.EmailAddresses = new List<Email>();
        }

        CompanyModel.EmailAddresses.Add(new Email
            {
                IsPrimary = false,
                IsActive = true,
                RelatedEntityType = "Company",
                CreatedOn = DateTime.Now
            });
    }

    private void RemoveEmail(Email email)
    {
        if (CompanyModel.EmailAddresses != null)
        {
            CompanyModel.EmailAddresses.Remove(email);
        }
    }

    private void UpdateEmailAddress(Email email, string value)
    {
        email.EmailAddress = value;
    }

    private void UpdateEmailDescription(Email email, string value)
    {
        email.Description = value;
    }

    private void AddPhone()
    {
        if (CompanyModel.ContactNumbers == null)
        {
            CompanyModel.ContactNumbers = new List<ContactNumber>();
        }

        CompanyModel.ContactNumbers.Add(new ContactNumber
            {
                Type = ContactNumberType.Mobile,
                IsPrimary = false,
                IsActive = true,
                RelatedEntityType = "Company",
                CreatedOn = DateTime.Now
            });
    }

    private void RemovePhone(ContactNumber phone)
    {
        if (CompanyModel.ContactNumbers != null)
        {
            CompanyModel.ContactNumbers.Remove(phone);
        }
    }

    private void UpdatePhoneNumber(ContactNumber phone, string value)
    {
        phone.Number = value;
    }

    private void UpdatePhoneType(ContactNumber phone, string value)
    {
        if (Enum.TryParse<ContactNumberType>(value, out var type))
        {
            phone.Type = type;
        }
    }

    private void UpdatePhoneDescription(ContactNumber phone, string value)
    {
        phone.Description = value;
    }

    // Logo handling methods
    private async Task OnLogoInputChange(InputFileChangeEventArgs e)
    {
        try
        {
            logoFile = e.File;

            if (logoFile.Size > maxFileSize)
            {
                ToastService.ShowError("File size exceeds 5MB limit", "Error");
                return;
            }

            // Validate file type
            if (!logoFile.ContentType.StartsWith("image/"))
            {
                ToastService.ShowError("Please select an image file", "Error");
                return;
            }

            // Generate preview
            isUploading = true;
            uploadProgress = 0;

            // Simulate upload progress
            for (int i = 0; i <= 100; i += 10)
            {
                uploadProgress = i;
                await Task.Delay(100); // Simulated delay
                StateHasChanged();
            }

            var imageFormat = logoFile.ContentType.Split('/')[1];
            var resizedImageFile = await logoFile.RequestImageFileAsync(logoFile.ContentType, 512, 512);

            using var stream = resizedImageFile.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            byte[] imageData = ms.ToArray();

            // Generate base64 preview
            logoPreview = $"data:{logoFile.ContentType};base64,{Convert.ToBase64String(imageData)}";

            isUploading = false;
            uploadProgress = 100;
        }
        catch (Exception ex)
        {
            isUploading = false;
            ToastService.ShowError($"Error uploading logo: {ex.Message}", "Error");
        }
    }

    private void CancelLogoUpload()
    {
        logoPreview = string.Empty;
        logoFile = null;
    }

    private async Task RemoveLogo()
    {
        try
        {
            if (CompanyModel.MainLogoId.HasValue)
            {
                CompanyModel.MainLogoId = null;
                CompanyModel.MainLogo = null;
                ToastService.ShowSuccess("Logo removed successfully", "Success");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error removing logo: {ex.Message}", "Error");
        }
    }
    private async Task ApplyLogo()
    {
        if (logoFile == null) return;

        try
        {
            isUploading = true;
            uploadProgress = 0;

            // Create a unique filename
            var fileName = $"company-logo-{CompanyModel.Id}-{DateTime.Now:yyyyMMddHHmmss}{Path.GetExtension(logoFile.Name)}";

            // Update progress
            uploadProgress = 30;
            StateHasChanged();

            // Convert IBrowserFile to Stream
            using var stream = logoFile.OpenReadStream(maxFileSize);

            // Upload the file using CDN service
            var url = await CdnService.UploadFileAsync(
                stream,
                fileName,
                logoFile.ContentType,
                "logos", // category as string
                CompanyModel.Id > 0 ? CompanyModel.Id.ToString() : ""
            );

            uploadProgress = 60;
            StateHasChanged();

            if (!string.IsNullOrEmpty(url))
            {
                // Get the file metadata
                var metadata = await CdnService.GetFileMetadataAsync(url);

                if (metadata != null)
                {
                    CompanyModel.MainLogoId = metadata.Id;
                    CompanyModel.MainLogo = metadata;

                    uploadProgress = 100;
                    ToastService.ShowSuccess("Logo uploaded successfully", "Success");
                    logoPreview = string.Empty;
                    logoFile = null;
                }
                else
                {
                    ToastService.ShowError("Failed to retrieve uploaded file metadata", "Error");
                }
            }
            else
            {
                ToastService.ShowError("Failed to upload logo", "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error uploading logo: {ex.Message}", "Error");
        }
        finally
        {
            isUploading = false;
            uploadProgress = 0;
            StateHasChanged();
        }
    }
}