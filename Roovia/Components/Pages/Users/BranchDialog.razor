@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using Roovia.Components
@using Roovia.Components.Elements.Forms
@using Roovia.Data
@using Roovia.Interfaces
@using Roovia.Models.BusinessHelperModels
@using Roovia.Models.UserCompanyMappingModels
@using Roovia.Models.UserCompanyModels
@using Roovia.Services
@using Roovia.Services.General
@inject IUser UserService
@inject ICdnService CdnService
@inject ToastService ToastService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<RVModal IsVisible="true"
Title="@GetDialogTitle()"
Icon="@GetDialogIcon()"
OnClose="OnCancel"
OnCancel="OnCancel"
OnConfirm="HandleConfirmAction"
ConfirmText="@(IsView ? "Close" : (IsEditMode ? "Save" : "Edit"))"
CancelText="@(IsView ? "Close" : "Cancel")"
DefaultFooter="false"
Size="lg">
    <ChildContent>
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <h3 class="loading-text">Loading branch details...</h3>
            </div>
        }
        else
        {
            <div class="branch-dialog">
                @if (IsViewMode)
                {
                    <div class="branch-view-container">
                        <div class="branch-header">
                            <div class="branch-header-flex">
                                <div class="branch-icon-wrapper">
                                    @if (BranchModel.MainLogoId.HasValue && BranchModel.MainLogo != null)
                                    {
                                        <img src="@BranchModel.MainLogo.Url" alt="@BranchModel.Name" class="branch-logo-large" />
                                    }
                                    else
                                    {
                                        <div class="branch-icon-large">
                                            <i class="fa-light fa-code-branch"></i>
                                        </div>
                                    }
                                    <div class="status-indicator @(BranchModel.IsActive ? "active" : "inactive")"></div>
                                </div>

                                <div class="branch-header-info">
                                    <h2>@BranchModel.Name</h2>

                                    <div class="branch-meta">
                                        @if (Company != null)
                                        {
                                            <span class="branch-meta-item"><i class="fa-light fa-building"></i>@Company.Name</span>
                                        }
                                        @if (BranchModel.IsHeadOffice)
                                        {
                                            <span class="badge bg-primary"><i class="fa-light fa-star"></i> Head Office</span>
                                        }
                                    </div>

                                    <div class="branch-badges">
                                        <span class="status-badge @(BranchModel.IsActive ? "status-active" : "status-inactive")">
                                            <i class="fa-light fa-@(BranchModel.IsActive ? "check-circle" : "times-circle")"></i>
                                            @(BranchModel.IsActive ? "Active" : "Inactive")
                                        </span>
                                        @if (BranchModel.Status != null)
                                        {
                                            <span class="status-badge">@BranchModel.Status.Name</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="branch-details-tabs">
                            @{
                                var branchTabs = new List<RVTab.RVTabItem>
                    {
                    new RVTab.RVTabItem
                    {
                    Id = "basic",
                    Title = "Basic Info",
                    Icon = "fa-light fa-info-circle",
                    IsActive = activeViewTab == "basic"
                    },
                    new RVTab.RVTabItem
                    {
                    Id = "contact",
                    Title = "Contact",
                    Icon = "fa-light fa-address-card",
                    IsActive = activeViewTab == "contact"
                    },
                    new RVTab.RVTabItem
                    {
                    Id = "address",
                    Title = "Address",
                    Icon = "fa-light fa-map-marker-alt",
                    IsActive = activeViewTab == "address"
                    },
                    new RVTab.RVTabItem
                    {
                    Id = "banking",
                    Title = "Banking",
                    Icon = "fa-light fa-university",
                    IsActive = activeViewTab == "banking"
                    },
                    new RVTab.RVTabItem
                    {
                    Id = "branding",
                    Title = "Branding",
                    Icon = "fa-light fa-image",
                    IsActive = activeViewTab == "branding"
                    }
                    };
                            }

                            <RVTab Tabs="branchTabs" Size="sm" OnTabChange="SetActiveViewTab">
                                <RVTabPanel TabId="basic" IsActive='activeViewTab == "basic"'>
                                    <div class="detail-section">
                                        <div class="detail-card">
                                            <div class="card-header">
                                                <h4><i class="fa-light fa-info-circle"></i> Basic Information</h4>
                                            </div>
                                            <div class="card-body">
                                                <div class="detail-row">
                                                    <div class="detail-label"><i class="fa-light fa-tag"></i> Branch Name</div>
                                                    <div class="detail-value">@BranchModel.Name</div>
                                                </div>
                                                <div class="detail-row">
                                                    <div class="detail-label"><i class="fa-light fa-code"></i> Branch Code</div>
                                                    <div class="detail-value">@(BranchModel.Code ?? "Not set")</div>
                                                </div>
                                                <div class="detail-row">
                                                    <div class="detail-label"><i class="fa-light fa-building"></i> Company</div>
                                                    <div class="detail-value">@(Company?.Name ?? "Not assigned")</div>
                                                </div>
                                                <div class="detail-row">
                                                    <div class="detail-label"><i class="fa-light fa-toggle-on"></i> Status</div>
                                                    <div class="detail-value">
                                                        <span class="status-badge @(BranchModel.IsActive ? "status-active" : "status-inactive")">
                                                            <i class="fa-light fa-@(BranchModel.IsActive ? "check-circle" : "times-circle")"></i>
                                                            @(BranchModel.IsActive ? "Active" : "Inactive")
                                                        </span>
                                                    </div>
                                                </div>
                                                <div class="detail-row">
                                                    <div class="detail-label"><i class="fa-light fa-star"></i> Head Office</div>
                                                    <div class="detail-value">@(BranchModel.IsHeadOffice ? "Yes" : "No")</div>
                                                </div>
                                                @if (BranchModel.MaxUsers.HasValue)
                                                {
                                                    <div class="detail-row">
                                                        <div class="detail-label"><i class="fa-light fa-users"></i> Max Users</div>
                                                        <div class="detail-value">@BranchModel.MaxUsers</div>
                                                    </div>
                                                }
                                                @if (BranchModel.MaxProperties.HasValue)
                                                {
                                                    <div class="detail-row">
                                                        <div class="detail-label"><i class="fa-light fa-home"></i> Max Properties</div>
                                                        <div class="detail-value">@BranchModel.MaxProperties</div>
                                                    </div>
                                                }
                                                @if (BranchModel.CreatedOn != default)
                                                {
                                                    <div class="detail-row">
                                                        <div class="detail-label"><i class="fa-light fa-calendar-plus"></i> Created On</div>
                                                        <div class="detail-value">@BranchModel.CreatedOn.ToString("dd MMM yyyy, HH:mm")</div>
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(BranchModel.CreatedBy))
                                                {
                                                    <div class="detail-row">
                                                        <div class="detail-label"><i class="fa-light fa-user"></i> Created By</div>
                                                        <div class="detail-value">@BranchModel.CreatedBy</div>
                                                    </div>
                                                }
                                                @if (BranchModel.UpdatedDate.HasValue)
                                                {
                                                    <div class="detail-row">
                                                        <div class="detail-label"><i class="fa-light fa-calendar-edit"></i> Last Updated</div>
                                                        <div class="detail-value">@BranchModel.UpdatedDate?.ToString("dd MMM yyyy, HH:mm")</div>
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(BranchModel.UpdatedBy))
                                                {
                                                    <div class="detail-row">
                                                        <div class="detail-label"><i class="fa-light fa-user-edit"></i> Updated By</div>
                                                        <div class="detail-value">@BranchModel.UpdatedBy</div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </RVTabPanel>

                                <RVTabPanel TabId="contact" IsActive='activeViewTab == "contact"'>
                                    <div class="detail-section">
                                        <div class="detail-card">
                                            <div class="card-header">
                                                <h4><i class="fa-light fa-envelope"></i> Email Addresses</h4>
                                            </div>
                                            <div class="card-body">
                                                @if (BranchModel.EmailAddresses?.Any() == true)
                                                {
                                                    <div class="contact-info">
                                                        @{
                                                            var primaryEmail = BranchModel.EmailAddresses.FirstOrDefault(e => e.IsPrimary);
                                                        }
                                                        @if (primaryEmail != null)
                                                        {
                                                            <div class="detail-row">
                                                                <div class="detail-label"><i class="fa-light fa-envelope"></i> Primary Email</div>
                                                                <div class="detail-value email-value">
                                                                    <a href="mailto:@primaryEmail.EmailAddress"><i class="fa-light fa-envelope"></i> @primaryEmail.EmailAddress</a>
                                                                </div>
                                                            </div>
                                                        }

                                                        @foreach (var email in BranchModel.EmailAddresses.Where(e => !e.IsPrimary).OrderBy(e => e.Description))
                                                        {
                                                            <div class="detail-row">
                                                                <div class="detail-label">
                                                                    <i class="fa-light fa-tag"></i>
                                                                    @(!string.IsNullOrEmpty(email.Description) ? email.Description : "Email")
                                                                </div>
                                                                <div class="detail-value email-value">
                                                                    <a href="mailto:@email.EmailAddress"><i class="fa-light fa-envelope"></i> @email.EmailAddress</a>
                                                                    @if (!email.IsActive)
                                                                    {
                                                                        <span class="status-badge status-inactive">
                                                                            <i class="fa-light fa-times-circle"></i> Inactive
                                                                        </span>
                                                                    }
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="empty-message">
                                                        <i class="fa-light fa-envelope-open"></i>
                                                        <p>No email addresses provided</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>

                                        <div class="detail-card">
                                            <div class="card-header">
                                                <h4><i class="fa-light fa-phone"></i> Contact Numbers</h4>
                                            </div>
                                            <div class="card-body">
                                                @if (BranchModel.ContactNumbers?.Any() == true)
                                                {
                                                    <div class="contact-info">
                                                        @{
                                                            var primaryContact = BranchModel.ContactNumbers.FirstOrDefault(c => c.IsPrimary);
                                                        }
                                                        @if (primaryContact != null)
                                                        {
                                                            <div class="detail-row">
                                                                <div class="detail-label"><i class="fa-light fa-phone"></i> Primary Contact</div>
                                                                <div class="detail-value phone-value">
                                                                    <a href="tel:@primaryContact.Number"><i class="fa-light fa-phone"></i> @primaryContact.Number</a>
                                                                </div>
                                                            </div>
                                                        }

                                                        @foreach (var phone in BranchModel.ContactNumbers.Where(c => !c.IsPrimary).OrderBy(c => c.Description))
                                                        {
                                                            <div class="detail-row">
                                                                <div class="detail-label">
                                                                    <i class="fa-light fa-tag"></i>
                                                                    @if (!string.IsNullOrEmpty(phone.Description))
                                                                    {
                                                                        @phone.Description
                                                                    }
                                                                    else
                                                                    {
                                                                        @phone.Type.ToString()
                                                                    }
                                                                </div>
                                                                <div class="detail-value phone-value">
                                                                    <a href="tel:@phone.Number"><i class="fa-light fa-phone"></i> @phone.Number</a>
                                                                    @if (!phone.IsActive)
                                                                    {
                                                                        <span class="status-badge status-inactive">
                                                                            <i class="fa-light fa-times-circle"></i> Inactive
                                                                        </span>
                                                                    }
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="empty-message">
                                                        <i class="fa-light fa-phone-slash"></i>
                                                        <p>No contact numbers provided</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </RVTabPanel>

                                <RVTabPanel TabId="address" IsActive='activeViewTab == "address"'>
                                    <div class="detail-section">
                                        <div class="detail-card">
                                            <div class="card-header">
                                                <h4><i class="fa-light fa-map-marker-alt"></i> Branch Address</h4>
                                            </div>
                                            <div class="card-body">
                                                @if (BranchModel.Address != null)
                                                {
                                                    <div class="address-display">
                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.ComplexName))
                                                        {
                                                            <div class="address-line"><i class="fa-light fa-building"></i> @BranchModel.Address.ComplexName</div>
                                                        }

                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.BuildingName))
                                                        {
                                                            <div class="address-line"><i class="fa-light fa-building"></i> @BranchModel.Address.BuildingName</div>
                                                        }

                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.UnitNumber))
                                                        {
                                                            <div class="address-line"><i class="fa-light fa-door-closed"></i> Unit @BranchModel.Address.UnitNumber</div>
                                                        }

                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.Street))
                                                        {
                                                            <div class="address-line"><i class="fa-light fa-road"></i> @BranchModel.Address.Street</div>
                                                        }

                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.Suburb))
                                                        {
                                                            <div class="address-line"><i class="fa-light fa-map"></i> @BranchModel.Address.Suburb</div>
                                                        }

                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.City))
                                                        {
                                                            <div class="address-line">
                                                                <i class="fa-light fa-city"></i>
                                                                @BranchModel.Address.City@(!string.IsNullOrEmpty(BranchModel.Address.Province) ? $", {BranchModel.Address.Province}" : "")
                                                            </div>
                                                        }

                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.PostalCode))
                                                        {
                                                            <div class="address-line"><i class="fa-light fa-mailbox"></i> @BranchModel.Address.PostalCode</div>
                                                        }

                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.Country))
                                                        {
                                                            <div class="address-line"><i class="fa-light fa-globe"></i> @BranchModel.Address.Country</div>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="empty-message">
                                                        <i class="fa-light fa-map-marker-slash"></i>
                                                        <p>No address information provided</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </RVTabPanel>

                                <RVTabPanel TabId="banking" IsActive='activeViewTab == "banking"'>
                                    <div class="detail-section">
                                        <div class="detail-card">
                                            <div class="card-header">
                                                <h4><i class="fa-light fa-university"></i> Banking Details</h4>
                                            </div>
                                            <div class="card-body">
                                                @if (BranchModel.BankAccount != null && !string.IsNullOrEmpty(BranchModel.BankAccount.AccountNumber))
                                                {
                                                    <div class="detail-row">
                                                        <div class="detail-label"><i class="fa-light fa-university"></i> Bank Name</div>
                                                        <div class="detail-value">@(BranchModel.BankAccount.BankName?.ToString() ?? "Not set")</div>
                                                    </div>
                                                    <div class="detail-row">
                                                        <div class="detail-label"><i class="fa-light fa-credit-card"></i> Account Type</div>
                                                        <div class="detail-value">@(BranchModel.BankAccount.AccountType ?? "Not set")</div>
                                                    </div>
                                                    <div class="detail-row">
                                                        <div class="detail-label"><i class="fa-light fa-hashtag"></i> Account Number</div>
                                                        <div class="detail-value">@BranchModel.BankAccount.AccountNumber</div>
                                                    </div>
                                                    <div class="detail-row">
                                                        <div class="detail-label"><i class="fa-light fa-code"></i> Branch Code</div>
                                                        <div class="detail-value">@BranchModel.BankAccount.BranchCode</div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="empty-message">
                                                        <i class="fa-light fa-credit-card-blank"></i>
                                                        <p>No banking details provided</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </RVTabPanel>

                                <RVTabPanel TabId="branding" IsActive='activeViewTab == "branding"'>
                                    <div class="detail-section">
                                        <div class="detail-card">
                                            <div class="card-header">
                                                <h4><i class="fa-light fa-image"></i> Branch Logo</h4>
                                            </div>
                                            <div class="card-body">
                                                @if (BranchModel.MainLogoId.HasValue && BranchModel.MainLogo != null)
                                                {
                                                    <div class="logo-display">
                                                        <div class="logo-container">
                                                            <img src="@BranchModel.MainLogo.Url" alt="@BranchModel.Name Logo" class="logo-image" />
                                                        </div>
                                                        <div class="logo-info">
                                                            <div class="logo-title">@BranchModel.MainLogo.FileName</div>
                                                            <div class="logo-meta">
                                                                <span><i class="fa-light fa-file-image"></i> @BranchModel.MainLogo.ContentType</span>
                                                                <span><i class="fa-light fa-weight"></i> @((BranchModel.MainLogo.FileSize / 1024).ToString("N0")) KB</span>
                                                                <span><i class="fa-light fa-calendar"></i> @BranchModel.MainLogo.UploadDate.ToString("dd MMM yyyy")</span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="empty-message">
                                                        <i class="fa-light fa-file-image"></i>
                                                        <p>No logo uploaded</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </RVTabPanel>
                            </RVTab>
                        </div>

                        <div class="branch-details-footer">
                            <RVButton ButtonType="outline" IconLeft="fa-light fa-times" Text="Close" OnClick="OnCancel" />
                            @if (CanEdit)
                            {
                                <RVButton ButtonType="primary" IconLeft="fa-light fa-edit" Text="Edit Branch" OnClick="SwitchToEditMode" />
                            }
                        </div>
                    </div>
                }
                else if (IsEditMode)
                {
                    <EditForm Model="BranchModel" OnValidSubmit="Save" FormName="editBranch" class="branch-edit-form">
                        <DataAnnotationsValidator />
                        <Roovia.Components.Elements.Forms.FluentValidationValidator />

                        <RVTab Tabs="formTabs" Size="sm" OnTabChange="HandleTabChange">
                            <RVTabPanel TabId="basic" IsActive='activeTab == "basic"'>
                                <div class="form-section">
                                    <div class="section-title">
                                        <h4><i class="fa-light fa-code-branch"></i> Basic Information</h4>
                                        <p>Enter the basic details for this branch</p>
                                    </div>

                                    <div class="form-group">
                                        <label for="name">Branch Name *</label>
                                        <RVTextbox Id="name"
                                        Value="@BranchModel.Name"
                                        ValueChanged="value => BranchModel.Name = value"
                                        Placeholder="Enter branch name"
                                        IconLeft="fa-light fa-code-branch" />
                                        <ValidationMessage For="@(() => BranchModel.Name)" />
                                    </div>

                                    <div class="form-group">
                                        <label for="code">Branch Code</label>
                                        <RVTextbox Id="code"
                                        Value="@BranchModel.Code"
                                        ValueChanged="value => BranchModel.Code = value"
                                        Placeholder="Enter unique branch code"
                                        IconLeft="fa-light fa-code" />
                                    </div>

                                    <div class="form-group">
                                        <label for="company">Company *</label>
                                        <RVSelect Id="company"
                                        Value="@BranchModel.CompanyId.ToString()"
                                        ValueChanged="HandleCompanyChange"
                                        Placeholder="Select company"
                                        IconLeft="fa-light fa-building"
                                        Disabled="@(Companies == null || !Companies.Any() || !CanEditCompany)">
                                            @if (Companies != null)
                                            {
                                                @foreach (var company in Companies.OrderBy(c => c.Name))
                                                {
                                                    <option value="@company.Id">@company.Name</option>
                                                }
                                            }
                                        </RVSelect>
                                        <ValidationMessage For="@(() => BranchModel.CompanyId)" />
                                    </div>

                                    <div class="form-group">
                                        <label for="status">Status</label>
                                        <RVSelect Id="status"
                                        Value="@(BranchModel.StatusId?.ToString() ?? "")"
                                        ValueChanged="value => BranchModel.StatusId = string.IsNullOrEmpty(value) ? null : int.Parse(value)"
                                        Placeholder="Select status"
                                        IconLeft="fa-light fa-toggle-on">
                                            <option value="">-- No Status --</option>
                                            @if (branchStatusTypes != null)
                                            {
                                                @foreach (var status in branchStatusTypes.OrderBy(s => s.DisplayOrder))
                                                {
                                                    <option value="@status.Id">@status.Name</option>
                                                }
                                            }
                                        </RVSelect>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group">
                                            <label for="maxUsers">Max Users</label>
                                            <RVTextbox Id="maxUsers"
                                            Type="number"
                                            Value="@(BranchModel.MaxUsers?.ToString() ?? "")"
                                            ValueChanged="value => BranchModel.MaxUsers = string.IsNullOrEmpty(value) ? null : int.Parse(value)"
                                            Placeholder="Maximum users allowed"
                                            IconLeft="fa-light fa-users" />
                                        </div>

                                        <div class="form-group">
                                            <label for="maxProperties">Max Properties</label>
                                            <RVTextbox Id="maxProperties"
                                            Type="number"
                                            Value="@(BranchModel.MaxProperties?.ToString() ?? "")"
                                            ValueChanged="value => BranchModel.MaxProperties = string.IsNullOrEmpty(value) ? null : int.Parse(value)"
                                            Placeholder="Maximum properties allowed"
                                            IconLeft="fa-light fa-home" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <RVSwitch Label="Active"
                                        Value="BranchModel.IsActive"
                                        ValueChanged="value => BranchModel.IsActive = value"
                                        HelperText="Inactive branches will not be accessible to users" />
                                    </div>

                                    <div class="form-group">
                                        <RVSwitch Label="Head Office"
                                        Value="BranchModel.IsHeadOffice"
                                        ValueChanged="value => BranchModel.IsHeadOffice = value"
                                        HelperText="Designate this branch as the head office" />
                                    </div>
                                </div>
                            </RVTabPanel>

                            <RVTabPanel TabId="contact" IsActive='activeTab == "contact"'>
                                <div class="form-section">
                                    <div class="section-title">
                                        <h4><i class="fa-light fa-address-book"></i> Contact Information</h4>
                                        <p>Manage the branch's contact details</p>
                                    </div>

                                    <!-- Primary Email -->
                                    <div class="form-group">
                                        <label for="primaryEmail">Primary Email Address</label>
                                        <RVTextbox Id="primaryEmail"
                                        Type="email"
                                        Value="@GetPrimaryEmail()"
                                        ValueChanged="UpdatePrimaryEmail"
                                        Placeholder="Enter primary email address"
                                        IconLeft="fa-light fa-envelope" />
                                    </div>

                                    <!-- Primary Phone -->
                                    <div class="form-group">
                                        <label for="primaryPhone">Primary Phone Number</label>
                                        <RVTextbox Id="primaryPhone"
                                        Type="tel"
                                        Value="@GetPrimaryPhone()"
                                        ValueChanged="UpdatePrimaryPhone"
                                        Placeholder="Enter primary phone number"
                                        IconLeft="fa-light fa-phone" />
                                    </div>

                                    <!-- Additional Email Addresses Section -->
                                    <div class="additional-contacts">
                                        <div class="section-subtitle">
                                            <h5><i class="fa-light fa-envelope"></i> Additional Email Addresses</h5>
                                            <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-plus" Text="Add Email"
                                            OnClick="AddEmail" CssClass="add-btn" />
                                        </div>

                                        @if (BranchModel.EmailAddresses?.Where(e => !e.IsPrimary).Any() == true)
                                        {
                                            <div class="email-list">
                                                @foreach (var email in BranchModel.EmailAddresses.Where(e => !e.IsPrimary))
                                                {
                                                    <div class="email-item">
                                                        <div class="email-content">
                                                            <RVTextbox Value="@email.EmailAddress"
                                                            ValueChanged="value => UpdateEmailAddress(email, value)"
                                                            Placeholder="Enter email address"
                                                            IconLeft="fa-light fa-envelope"
                                                            Size="sm" />
                                                            <RVTextbox Value="@email.Description"
                                                            ValueChanged="value => UpdateEmailDescription(email, value)"
                                                            Placeholder="Description (e.g. Sales, Support)"
                                                            IconLeft="fa-light fa-tag"
                                                            Size="sm" />
                                                        </div>
                                                        <RVButton ButtonType="outline-danger" Size="xs" IconLeft="fa-light fa-trash"
                                                        OnClick="() => RemoveEmail(email)" CssClass="remove-btn" />
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="empty-list">
                                                <i class="fa-light fa-inbox"></i>
                                                <p>No additional email addresses</p>
                                            </div>
                                        }
                                    </div>

                                    <!-- Additional Phone Numbers Section -->
                                    <div class="additional-contacts">
                                        <div class="section-subtitle">
                                            <h5><i class="fa-light fa-phone"></i> Additional Phone Numbers</h5>
                                            <RVButton ButtonType="outline" Size="xs" IconLeft="fa-light fa-plus" Text="Add Phone"
                                            OnClick="AddPhone" CssClass="add-btn" />
                                        </div>

                                        @if (BranchModel.ContactNumbers?.Where(c => !c.IsPrimary).Any() == true)
                                        {
                                            <div class="phone-list">
                                                @foreach (var phone in BranchModel.ContactNumbers.Where(c => !c.IsPrimary))
                                                {
                                                    <div class="phone-item">
                                                        <div class="phone-content">
                                                            <RVTextbox Value="@phone.Number"
                                                            ValueChanged="value => UpdatePhoneNumber(phone, value)"
                                                            Placeholder="Enter phone number"
                                                            IconLeft="fa-light fa-phone"
                                                            Size="sm" />
                                                            <RVSelect Value="@phone.Type.ToString()"
                                                            ValueChanged="value => UpdatePhoneType(phone, value)"
                                                            Placeholder="Select type"
                                                            IconLeft="fa-light fa-phone-office"
                                                            Size="sm">
                                                                @foreach (var type in Enum.GetValues(typeof(ContactNumberType)))
                                                                {
                                                                    <option value="@type">@type</option>
                                                                }
                                                            </RVSelect>
                                                            <RVTextbox Value="@phone.Description"
                                                            ValueChanged="value => UpdatePhoneDescription(phone, value)"
                                                            Placeholder="Description"
                                                            IconLeft="fa-light fa-tag"
                                                            Size="sm" />
                                                        </div>
                                                        <RVButton ButtonType="outline-danger" Size="xs" IconLeft="fa-light fa-trash"
                                                        OnClick="() => RemovePhone(phone)" CssClass="remove-btn" />
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="empty-list">
                                                <i class="fa-light fa-phone-slash"></i>
                                                <p>No additional phone numbers</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </RVTabPanel>

                            <RVTabPanel TabId="address" IsActive='activeTab == "address"'>
                                <div class="form-section">
                                    <div class="section-title">
                                        <h4><i class="fa-light fa-map-marker-alt"></i> Address Information</h4>
                                        <p>Enter the branch's address details</p>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group col-12">
                                            <label for="street">Street</label>
                                            <RVTextbox Id="street"
                                            Value="@BranchModel.Address.Street"
                                            ValueChanged="value => BranchModel.Address.Street = value"
                                            Placeholder="Enter street address"
                                            IconLeft="fa-light fa-road" />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group col-md-4">
                                            <label for="unitNumber">Unit Number</label>
                                            <RVTextbox Id="unitNumber"
                                            Value="@BranchModel.Address.UnitNumber"
                                            ValueChanged="value => BranchModel.Address.UnitNumber = value"
                                            Placeholder="Unit number"
                                            IconLeft="fa-light fa-door-closed" />
                                        </div>

                                        <div class="form-group col-md-8">
                                            <label for="complexName">Complex Name</label>
                                            <RVTextbox Id="complexName"
                                            Value="@BranchModel.Address.ComplexName"
                                            ValueChanged="value => BranchModel.Address.ComplexName = value"
                                            Placeholder="Complex name"
                                            IconLeft="fa-light fa-building" />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group col-12">
                                            <label for="buildingName">Building Name</label>
                                            <RVTextbox Id="buildingName"
                                            Value="@BranchModel.Address.BuildingName"
                                            ValueChanged="value => BranchModel.Address.BuildingName = value"
                                            Placeholder="Building name"
                                            IconLeft="fa-light fa-building" />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group col-md-6">
                                            <label for="suburb">Suburb</label>
                                            <RVTextbox Id="suburb"
                                            Value="@BranchModel.Address.Suburb"
                                            ValueChanged="value => BranchModel.Address.Suburb = value"
                                            Placeholder="Enter suburb"
                                            IconLeft="fa-light fa-map" />
                                        </div>

                                        <div class="form-group col-md-6">
                                            <label for="city">City</label>
                                            <RVTextbox Id="city"
                                            Value="@BranchModel.Address.City"
                                            ValueChanged="value => BranchModel.Address.City = value"
                                            Placeholder="Enter city"
                                            IconLeft="fa-light fa-city" />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group col-md-6">
                                            <label for="province">Province</label>
                                            <RVTextbox Id="province"
                                            Value="@BranchModel.Address.Province"
                                            ValueChanged="value => BranchModel.Address.Province = value"
                                            Placeholder="Enter province"
                                            IconLeft="fa-light fa-map-marked" />
                                        </div>

                                        <div class="form-group col-md-6">
                                            <label for="postalCode">Postal Code</label>
                                            <RVTextbox Id="postalCode"
                                            Value="@BranchModel.Address.PostalCode"
                                            ValueChanged="value => BranchModel.Address.PostalCode = value"
                                            Placeholder="Enter postal code"
                                            IconLeft="fa-light fa-mailbox" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="country">Country</label>
                                        <RVTextbox Id="country"
                                        Value="@BranchModel.Address.Country"
                                        ValueChanged="value => BranchModel.Address.Country = value"
                                        Placeholder="Enter country"
                                        IconLeft="fa-light fa-globe" />
                                    </div>
                                </div>
                            </RVTabPanel>

                            <!-- Banking Details Tab -->
                            <RVTabPanel TabId="banking" IsActive='activeTab == "banking"'>
                                <div class="form-section">
                                    <div class="section-title">
                                        <h4><i class="fa-light fa-university"></i> Banking Details</h4>
                                        <p>Enter the branch's banking information for invoicing and payments</p>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group col-md-6">
                                            <label for="bank">Bank Name</label>
                                            <RVSelect Id="bank"
                                            Value="@(BranchModel.BankAccount.BankName?.ToString() ?? "")"
                                            ValueChanged="value => UpdateBankName(value)"
                                            IconLeft="fa-light fa-university">
                                                <option value="">-- Select Bank --</option>
                                                @foreach (var bank in Enum.GetValues(typeof(BankName)))
                                                {
                                                    <option value="@bank">@bank</option>
                                                }
                                            </RVSelect>
                                        </div>

                                        <div class="form-group col-md-6">
                                            <label for="accountType">Account Type</label>
                                            <RVTextbox Id="accountType"
                                            Value="@BranchModel.BankAccount.AccountType"
                                            ValueChanged="value => BranchModel.BankAccount.AccountType = value"
                                            Placeholder="E.g. Current, Savings, Business"
                                            IconLeft="fa-light fa-credit-card" />
                                            <ValidationMessage For="@(() => BranchModel.BankAccount.AccountType)" />
                                        </div>
                                    </div>

                                    <div class="form-row">
                                        <div class="form-group col-md-6">
                                            <label for="accountNumber">Account Number</label>
                                            <RVTextbox Id="accountNumber"
                                            Value="@BranchModel.BankAccount.AccountNumber"
                                            ValueChanged="value => BranchModel.BankAccount.AccountNumber = value"
                                            Placeholder="Enter account number"
                                            IconLeft="fa-light fa-hashtag" />
                                            <ValidationMessage For="@(() => BranchModel.BankAccount.AccountNumber)" />
                                        </div>

                                        <div class="form-group col-md-6">
                                            <label for="branchCode">Branch Code</label>
                                            <RVTextbox Id="branchCode"
                                            Value="@BranchModel.BankAccount.BranchCode"
                                            ValueChanged="value => BranchModel.BankAccount.BranchCode = value"
                                            Placeholder="Enter branch code"
                                            IconLeft="fa-light fa-code" />
                                            <ValidationMessage For="@(() => BranchModel.BankAccount.BranchCode)" />
                                        </div>
                                    </div>
                                </div>
                            </RVTabPanel>

                            <RVTabPanel TabId="logo" IsActive='activeTab == "logo"'>
                                <div class="form-section">
                                    <div class="section-title">
                                        <h4><i class="fa-light fa-image"></i> Branch Logo</h4>
                                        <p>Upload a logo for the branch</p>
                                    </div>

                                    <div class="logo-upload-container">
                                        @if (BranchModel.MainLogoId.HasValue && BranchModel.MainLogo != null)
                                        {
                                            <div class="current-logo">
                                                <h5>Current Logo</h5>
                                                <div class="logo-preview">
                                                    <img src="@BranchModel.MainLogo.Url" alt="Branch Logo" class="logo-image" />
                                                </div>
                                                <div class="logo-actions">
                                                    <RVButton ButtonType="outline-danger" Size="sm" IconLeft="fa-light fa-trash"
                                                    Text="Remove" OnClick="RemoveLogo" />
                                                    <RVButton ButtonType="outline" Size="sm" IconLeft="fa-light fa-exchange"
                                                    Text="Replace" OnClick="ShowUploadDialog" />
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="empty-logo-upload">
                                                <i class="fa-light fa-image fa-3x"></i>
                                                <p>No logo uploaded</p>
                                                <RVButton ButtonType="primary" Size="sm" IconLeft="fa-light fa-cloud-upload"
                                                Text="Upload Logo" OnClick="ShowUploadDialog" />
                                            </div>
                                        }

                                        @if (isUploading)
                                        {
                                            <div class="upload-progress">
                                                <div class="progress-bar">
                                                    <div class="progress-fill" style="width: @uploadProgress%"></div>
                                                </div>
                                                <span class="progress-text">Uploading... @uploadProgress%</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </RVTabPanel>
                        </RVTab>

                        <div class="branch-edit-footer">
                            <RVButton ButtonType="outline" IconLeft="fa-light fa-times" Text="Cancel" OnClick="OnCancel" />
                            <RVButton ButtonType="primary" IconLeft="fa-light fa-save" Text="Save Changes" Type="submit" />
                        </div>
                    </EditForm>
                }
            </div>
        }
    </ChildContent>
</RVModal>

@* Logo Upload Modal *@
@if (showLogoUploadDialog)
{
    <RVModal IsVisible="true"
    Title="Upload Logo"
    Icon="fa-light fa-cloud-upload"
    OnClose="CloseUploadDialog"
    OnCancel="CloseUploadDialog"
    OnConfirm="UploadLogo"
    ConfirmText="Upload"
    CancelText="Cancel"
    Size="md">
        <ChildContent>
            <div class="logo-upload-dialog">
                <div class="upload-instructions">
                    <h4>Upload Branch Logo</h4>
                    <p>Please select an image file to upload as the branch logo.</p>
                    <p>Recommended size: 512x512 pixels</p>
                    <p>Maximum file size: 5MB</p>
                    <p>Supported formats: JPG, PNG, GIF</p>
                </div>

                <div class="upload-area">
                    <InputFile OnChange="OnLogoFileSelected" class="upload-input" accept="image/*" />
                    <div class="upload-placeholder @(logoFile != null ? "d-none" : "")">
                        <i class="fa-light fa-cloud-upload fa-3x"></i>
                        <p>Drag and drop your logo here, or click to browse</p>
                        <span class="file-hint">JPG, PNG or GIF format recommended</span>
                    </div>
                    @if (logoFile != null)
                    {
                        <div class="file-selected">
                            <i class="fa-light fa-file-image"></i>
                            <span>@logoFile.Name</span>
                            <span class="file-size">(@((logoFile.Size / 1024).ToString("N0")) KB)</span>
                        </div>
                    }
                </div>

                @if (!string.IsNullOrEmpty(uploadError))
                {
                    <div class="upload-error">
                        <i class="fa-light fa-exclamation-triangle"></i>
                        <p>@uploadError</p>
                    </div>
                }
            </div>
        </ChildContent>
    </RVModal>
}
@code {
    [Parameter] public Branch BranchModel { get; set; } = new Branch();
    [Parameter] public List<Company>? Companies { get; set; }
    [Parameter] public List<BranchStatusType>? branchStatusTypes { get; set; }
    [Parameter] public int CompanyId { get; set; } = 0;
    [Parameter] public bool IsEdit { get; set; } = false;
    [Parameter] public bool IsView { get; set; } = false;
    [Parameter] public bool CanEdit { get; set; } = true;
    [Parameter] public bool CanEditCompany { get; set; } = true;
    [Parameter] public EventCallback<Branch> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private bool isLoading = false;
    private string activeTab = "basic";
    private string activeViewTab = "basic";
    private bool IsEditMode => (IsEdit || isInEditMode) && !IsView;
    private bool isInEditMode = false;
    private bool IsViewMode => IsView || !IsEditMode;
    private Company? Company { get; set; }

    // Logo upload related fields
    private bool showLogoUploadDialog = false;
    private IBrowserFile? logoFile;
    private bool isUploading = false;
    private int uploadProgress = 0;
    private string uploadError = string.Empty;
    private long maxFileSize = 1024 * 1024 * 5; // 5MB

    // Form tabs
    private List<RVTab.RVTabItem> formTabs = new List<RVTab.RVTabItem>
    {
        new RVTab.RVTabItem { Id = "basic", Title = "Basic Information", Icon = "fa-light fa-code-branch" },
        new RVTab.RVTabItem { Id = "contact", Title = "Contact Details", Icon = "fa-light fa-address-card" },
        new RVTab.RVTabItem { Id = "address", Title = "Address", Icon = "fa-light fa-map-marker-alt" },
        new RVTab.RVTabItem { Id = "banking", Title = "Banking Details", Icon = "fa-light fa-university" },
        new RVTab.RVTabItem { Id = "logo", Title = "Branch Logo", Icon = "fa-light fa-image" }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (BranchModel.Id != 0)
            {
                await LoadBranchData();
            }
            else
            {
                InitializeNewBranch();
            }

            // For new branches, start in edit mode
            if (BranchModel.Id == 0)
            {
                isInEditMode = true;
            }
            else if (IsView)
            {
                isInEditMode = false;
            }

            if (CompanyId > 0 && (BranchModel.Id == 0 || BranchModel.CompanyId != CompanyId))
            {
                BranchModel.CompanyId = CompanyId;

                // Load the company details
                await LoadCompanyDetails(CompanyId);
            }


            await InvokeAsync(() => this.StateHasChanged());
        }

    }


    private void InitializeNewBranch()
    {
        BranchModel = new Branch
            {
                CompanyId = CompanyId,
                IsActive = true,
                Address = new Address { Country = "South Africa" },
                BankAccount = new BankAccount { BankName = BankName.StandardBank },
                EmailAddresses = new List<Email>(),
                ContactNumbers = new List<ContactNumber>(),
                CreatedOn = DateTime.Now
            };

        // Initialize collections if null
        if (BranchModel.EmailAddresses == null)
            BranchModel.EmailAddresses = new List<Email>();
        if (BranchModel.ContactNumbers == null)
            BranchModel.ContactNumbers = new List<ContactNumber>();
    }

    private async Task LoadBranchData()
    {
        isLoading = true;

        try
        {
            var response = await UserService.GetBranchById(BranchModel.Id);
            if (response.ResponseInfo.Success)
            {
                BranchModel = (Branch)response.Response;

                // Initialize collections if null
                if (BranchModel.EmailAddresses == null)
                    BranchModel.EmailAddresses = new List<Email>();
                if (BranchModel.ContactNumbers == null)
                    BranchModel.ContactNumbers = new List<ContactNumber>();

                // Initialize bank account if null
                if (BranchModel.BankAccount == null)
                {
                    BranchModel.BankAccount = new BankAccount { BankName = BankName.StandardBank };
                }

                // Load the company details
                if (BranchModel.CompanyId > 0)
                {
                    await LoadCompanyDetails(BranchModel.CompanyId);
                }

                // Load the logo if there's one
                if (BranchModel.MainLogoId.HasValue)
                {
                    using var context = await DbContextFactory.CreateDbContextAsync();
                    BranchModel.MainLogo = await context.CdnFileMetadata
                        .FirstOrDefaultAsync(f => f.Id == BranchModel.MainLogoId.Value);
                }

                // Load status if there's one
                if (BranchModel.StatusId.HasValue)
                {
                    using var context = await DbContextFactory.CreateDbContextAsync();
                    BranchModel.Status = await context.BranchStatusTypes
                        .FirstOrDefaultAsync(s => s.Id == BranchModel.StatusId.Value);
                }
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading branch: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCompanyDetails(int companyId)
    {
        try
        {
            var response = await UserService.GetCompanyById(companyId);
            if (response.ResponseInfo.Success)
            {
                Company = (Company)response.Response;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading company details: {ex.Message}", "Error");
        }
    }

    private string GetDialogTitle()
    {
        if (IsViewMode)
        {
            return "Branch Details";
        }
        else if (BranchModel.Id == 0)
        {
            return "Create Branch";
        }
        else
        {
            return "Edit Branch";
        }
    }

    private string GetDialogIcon()
    {
        if (IsViewMode)
        {
            return "fa-light fa-code-branch";
        }
        else if (BranchModel.Id == 0)
        {
            return "fa-light fa-plus-circle";
        }
        else
        {
            return "fa-light fa-edit";
        }
    }

    private void SwitchToEditMode()
    {
        isInEditMode = true;
        IsView = false;
        StateHasChanged();
    }

    private void HandleTabChange(string tabId)
    {
        activeTab = tabId;
    }

    private void SetActiveViewTab(string tabId)
    {
        activeViewTab = tabId;
    }

    private async Task HandleCompanyChange(string value)
    {
        if (int.TryParse(value, out var id))
        {
            BranchModel.CompanyId = id;
            await LoadCompanyDetails(id);
        }
    }

    private async Task HandleConfirmAction()
    {
        if (IsView)
        {
            await OnCancel.InvokeAsync();
        }
        else if (IsEditMode)
        {
            await Save();
        }
        else
        {
            SwitchToEditMode();
        }
    }

    private async Task Save()
    {
        try
        {
            isLoading = true;

            if (BranchModel.Id == 0)
            {
                // Create new branch
                BranchModel.CreatedBy = "CurrentUser"; // Replace with actual current user ID
                BranchModel.CreatedOn = DateTime.Now;
            }
            else
            {
                // Update existing branch
                BranchModel.UpdatedBy = "CurrentUser"; // Replace with actual current user ID
                BranchModel.UpdatedDate = DateTime.Now;
            }

            await OnSave.InvokeAsync(BranchModel);

            if (isInEditMode)
            {
                // If we're in "switch to edit mode" state, go back to view mode after save
                isInEditMode = false;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving branch: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Helper method for banking details
    private void UpdateBankName(string value)
    {
        if (Enum.TryParse<BankName>(value, out var bankName))
        {
            BranchModel.BankAccount.BankName = bankName;
        }
    }

    // Helper methods for email and phone management
    private string GetPrimaryEmail()
    {
        var primaryEmail = BranchModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary);
        return primaryEmail?.EmailAddress ?? string.Empty;
    }

    private string GetPrimaryPhone()
    {
        var primaryPhone = BranchModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary);
        return primaryPhone?.Number ?? string.Empty;
    }

    private void UpdatePrimaryEmail(string value)
    {
        if (BranchModel.EmailAddresses == null)
        {
            BranchModel.EmailAddresses = new List<Email>();
        }

        var primaryEmail = BranchModel.EmailAddresses.FirstOrDefault(e => e.IsPrimary);

        if (primaryEmail != null)
        {
            primaryEmail.EmailAddress = value;
            primaryEmail.UpdatedDate = DateTime.Now;
        }
        else if (!string.IsNullOrEmpty(value))
        {
            var newEmail = new Email
                {
                    EmailAddress = value,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Branch",
                    CreatedOn = DateTime.Now
                };

            if (BranchModel.Id > 0)
            {
                newEmail.SetRelatedEntity("Branch", BranchModel.Id);
            }

            BranchModel.EmailAddresses.Add(newEmail);
        }
    }

    private void UpdatePrimaryPhone(string value)
    {
        if (BranchModel.ContactNumbers == null)
        {
            BranchModel.ContactNumbers = new List<ContactNumber>();
        }

        var primaryPhone = BranchModel.ContactNumbers.FirstOrDefault(c => c.IsPrimary);

        if (primaryPhone != null)
        {
            primaryPhone.Number = value;
            primaryPhone.UpdatedDate = DateTime.Now;
        }
        else if (!string.IsNullOrEmpty(value))
        {
            var newPhone = new ContactNumber
                {
                    Number = value,
                    Type = ContactNumberType.Mobile,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Branch",
                    CreatedOn = DateTime.Now
                };

            if (BranchModel.Id > 0)
            {
                newPhone.SetRelatedEntity("Branch", BranchModel.Id);
            }

            BranchModel.ContactNumbers.Add(newPhone);
        }
    }

    private void AddEmail()
    {
        if (BranchModel.EmailAddresses == null)
        {
            BranchModel.EmailAddresses = new List<Email>();
        }

        BranchModel.EmailAddresses.Add(new Email
            {
                IsPrimary = false,
                IsActive = true,
                RelatedEntityType = "Branch",
                CreatedOn = DateTime.Now
            });
    }

    private void RemoveEmail(Email email)
    {
        if (BranchModel.EmailAddresses != null)
        {
            BranchModel.EmailAddresses.Remove(email);
        }
    }

    private void UpdateEmailAddress(Email email, string value)
    {
        email.EmailAddress = value;
    }

    private void UpdateEmailDescription(Email email, string value)
    {
        email.Description = value;
    }

    private void AddPhone()
    {
        if (BranchModel.ContactNumbers == null)
        {
            BranchModel.ContactNumbers = new List<ContactNumber>();
        }

        BranchModel.ContactNumbers.Add(new ContactNumber
            {
                Type = ContactNumberType.Mobile,
                IsPrimary = false,
                IsActive = true,
                RelatedEntityType = "Branch",
                CreatedOn = DateTime.Now
            });
    }

    private void RemovePhone(ContactNumber phone)
    {
        if (BranchModel.ContactNumbers != null)
        {
            BranchModel.ContactNumbers.Remove(phone);
        }
    }

    private void UpdatePhoneNumber(ContactNumber phone, string value)
    {
        phone.Number = value;
    }

    private void UpdatePhoneType(ContactNumber phone, string value)
    {
        if (Enum.TryParse<ContactNumberType>(value, out var type))
        {
            phone.Type = type;
        }
    }

    private void UpdatePhoneDescription(ContactNumber phone, string value)
    {
        phone.Description = value;
    }

    // Logo handling methods
    private void ShowUploadDialog()
    {
        uploadError = string.Empty;
        logoFile = null;
        showLogoUploadDialog = true;
    }

    private void CloseUploadDialog()
    {
        showLogoUploadDialog = false;
        logoFile = null;
        uploadError = string.Empty;
    }

    private void OnLogoFileSelected(InputFileChangeEventArgs e)
    {
        logoFile = e.File;
        uploadError = string.Empty;

        if (logoFile.Size > maxFileSize)
        {
            uploadError = "File size exceeds 5MB limit";
            logoFile = null;
            return;
        }

        // Validate file type
        if (!logoFile.ContentType.StartsWith("image/"))
        {
            uploadError = "Please select an image file";
            logoFile = null;
            return;
        }
    }
    // Logo handling methods
    private async Task UploadLogo()
    {
        if (logoFile == null)
        {
            uploadError = "Please select a logo file to upload";
            return;
        }

        try
        {
            isUploading = true;
            uploadProgress = 0;
            StateHasChanged();

            // Create a unique filename
            var fileName = $"branch-logo-{BranchModel.Id}-{DateTime.Now:yyyyMMddHHmmss}{Path.GetExtension(logoFile.Name)}";

            // Update progress as we prepare the upload
            uploadProgress = 30;
            StateHasChanged();

            // Use the CDN service to upload the file
            using var stream = logoFile.OpenReadStream(maxFileSize);
            var url = await CdnService.UploadFileAsync(
                stream,
                fileName,
                logoFile.ContentType,
                "logos",
                BranchModel.Id > 0 ? BranchModel.Id.ToString() : ""
            );

            uploadProgress = 80;
            StateHasChanged();

            if (!string.IsNullOrEmpty(url))
            {
                // Get the file metadata
                var metadata = await CdnService.GetFileMetadataAsync(url);

                if (metadata != null)
                {
                    // Update the branch model with the new logo
                    BranchModel.MainLogoId = metadata.Id;
                    BranchModel.MainLogo = metadata;

                    uploadProgress = 100;
                    ToastService.ShowSuccess("Logo uploaded successfully", "Success");
                    showLogoUploadDialog = false;
                }
                else
                {
                    uploadError = "Failed to retrieve uploaded file metadata";
                }
            }
            else
            {
                uploadError = "Failed to upload logo";
            }
        }
        catch (Exception ex)
        {
            uploadError = $"Error uploading logo: {ex.Message}";
            ToastService.ShowError(uploadError, "Error");
        }
        finally
        {
            isUploading = false;
            uploadProgress = 0;
            StateHasChanged();
        }
    }

    private async Task RemoveLogo()
    {
        try
        {
            if (BranchModel.MainLogoId.HasValue && BranchModel.MainLogo != null)
            {
                // Remove from CDN using the URL
                await CdnService.DeleteFileAsync(BranchModel.MainLogo.Url);

                // Update the model
                BranchModel.MainLogoId = null;
                BranchModel.MainLogo = null;

                ToastService.ShowSuccess("Logo removed successfully", "Success");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error removing logo: {ex.Message}", "Error");
        }
    }
}