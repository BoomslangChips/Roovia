@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using Roovia.Data
@using Roovia.Interfaces
@using Roovia.Models.BusinessHelperModels
@using Roovia.Models.UserCompanyMappingModels
@using Roovia.Models.UserCompanyModels
@using Roovia.Services
@using Roovia.Services.General
@using Syncfusion.Blazor.Inputs
@inject IUser UserService
@inject ICdnService CdnService
@inject ToastService ToastService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory

<link rel="stylesheet" href="@Assets["css/BranchDialog.css"]" />
<div class="bd-modal-backdrop" @onclick="OnCancel"></div>

<div class="bd-modal-wrapper">
    <div class="bd-modal-header">
        <div class="bd-modal-title">
            <i class="@GetDialogIcon()"></i>
            <span>@GetDialogTitle()</span>
        </div>
        <button class="bd-close-button" @onclick="OnCancel">
            <i class="fa-light fa-times"></i>
        </button>
    </div>

    <div class="bd-modal-body">
        @if (isLoading)
        {
            <div class="bd-loading">
                <div class="bd-spinner"></div>
                <span class="bd-loading-text">Loading branch details...</span>
            </div>
        }
        else
        {
            <div class="bd-branch-dialog">
                @if (IsViewMode)
                {
                    <div class="bd-view-container">
                        <div class="bd-branch-header">
                            <div class="bd-avatar-container">
                                @if (BranchModel.MainLogoId.HasValue && BranchModel.MainLogo != null)
                                {
                                    <div class="bd-avatar bd-has-image">
                                        <img src="@BranchModel.MainLogo.Url" alt="@BranchModel.Name" />
                                    </div>
                                }
                                else
                                {
                                    <div class="bd-avatar">
                                        <i class="fa-light fa-code-branch"></i>
                                    </div>
                                }
                                <div class="bd-status-indicator @(BranchModel.IsActive ? "bd-active" : "bd-inactive")"></div>
                            </div>

                            <div class="bd-branch-info">
                                <h2 class="bd-branch-name">@BranchModel.Name</h2>

                                <div class="bd-badges-container">
                                    <span class="bd-status-badge @(BranchModel.IsActive ? "bd-active" : "bd-inactive")">
                                        <i class="fa-light fa-@(BranchModel.IsActive ? "check-circle" : "times-circle")"></i>
                                        @(BranchModel.IsActive ? "Active" : "Inactive")
                                    </span>
                                    @if (BranchModel.IsHeadOffice)
                                    {
                                        <span class="bd-role-badge bd-head-office">
                                            <i class="fa-light fa-star"></i>
                                            Head Office
                                        </span>
                                    }
                                </div>

                                <div class="bd-meta-list">
                                    @if (Company != null)
                                    {
                                        <span class="bd-meta-item"><i class="fa-light fa-building"></i>@Company.Name</span>
                                    }
                                    @if (!string.IsNullOrEmpty(BranchModel.Code))
                                    {
                                        <span class="bd-meta-item"><i class="fa-light fa-barcode"></i>@BranchModel.Code</span>
                                    }
                                </div>
                            </div>

                            <div class="bd-branch-actions">
                                @if (CanEdit)
                                {
                                    <button type="button" class="bd-button bd-button-primary" @onclick="SwitchToEditMode">
                                        <i class="fa-light fa-edit"></i>
                                        <span>Edit</span>
                                    </button>
                                }
                            </div>
                        </div>

                        <div class="bd-tabs-container">
                            <div class="bd-tabs-header">
                                <button type="button" class="bd-tab-button @(activeViewTab == "basic" ? "bd-active" : "")" @onclick='() => SetActiveViewTab("basic")'>
                                    <i class="fa-light fa-info-circle"></i>
                                    <span>Basic Info</span>
                                </button>
                                <button type="button" class="bd-tab-button @(activeViewTab == "contact" ? "bd-active" : "")" @onclick='() => SetActiveViewTab("contact")'>
                                    <i class="fa-light fa-address-card"></i>
                                    <span>Contact</span>
                                </button>
                                <button type="button" class="bd-tab-button @(activeViewTab == "address" ? "bd-active" : "")" @onclick='() => SetActiveViewTab("address")'>
                                    <i class="fa-light fa-map-marker-alt"></i>
                                    <span>Address</span>
                                </button>
                                <button type="button" class="bd-tab-button @(activeViewTab == "banking" ? "bd-active" : "")" @onclick='() => SetActiveViewTab("banking")'>
                                    <i class="fa-light fa-university"></i>
                                    <span>Banking</span>
                                </button>
                                <button type="button" class="bd-tab-button @(activeViewTab == "branding" ? "bd-active" : "")" @onclick='() => SetActiveViewTab("branding")'>
                                    <i class="fa-light fa-image"></i>
                                    <span>Branding</span>
                                </button>
                            </div>

                            <div class="bd-tab-content">
                                <div class="bd-tab-pane @(activeViewTab == "basic" ? "bd-active" : "")">
                                    <div class="bd-card-grid">
                                        <div class="bd-info-card">
                                            <div class="bd-card-header">
                                                <i class="fa-light fa-info-circle bd-card-header-icon"></i>
                                                <h3 class="bd-card-title">Basic Information</h3>
                                            </div>
                                            <div class="bd-card-body">
                                                <div class="bd-info-group">
                                                    <span class="bd-info-label">Branch Name</span>
                                                    <span class="bd-info-value">@BranchModel.Name</span>
                                                </div>
                                                <div class="bd-info-group">
                                                    <span class="bd-info-label">Branch Code</span>
                                                    <span class="bd-info-value">@(BranchModel.Code ?? "Not set")</span>
                                                </div>
                                                <div class="bd-info-group">
                                                    <span class="bd-info-label">Company</span>
                                                    <span class="bd-info-value">@(Company?.Name ?? "Not assigned")</span>
                                                </div>
                                                <div class="bd-info-group">
                                                    <span class="bd-info-label">Status</span>
                                                    <span class="bd-info-value">
                                                        <span class="bd-status-badge @(BranchModel.IsActive ? "bd-active" : "bd-inactive")">
                                                            <i class="fa-light fa-@(BranchModel.IsActive ? "check-circle" : "times-circle")"></i>
                                                            @(BranchModel.IsActive ? "Active" : "Inactive")
                                                        </span>
                                                    </span>
                                                </div>
                                                <div class="bd-info-group">
                                                    <span class="bd-info-label">Head Office</span>
                                                    <span class="bd-info-value">@(BranchModel.IsHeadOffice ? "Yes" : "No")</span>
                                                </div>
                                                @if (BranchModel.MaxUsers.HasValue)
                                                {
                                                    <div class="bd-info-group">
                                                        <span class="bd-info-label">Max Users</span>
                                                        <span class="bd-info-value">@BranchModel.MaxUsers</span>
                                                    </div>
                                                }
                                                @if (BranchModel.MaxProperties.HasValue)
                                                {
                                                    <div class="bd-info-group">
                                                        <span class="bd-info-label">Max Properties</span>
                                                        <span class="bd-info-value">@BranchModel.MaxProperties</span>
                                                    </div>
                                                }
                                                @if (BranchModel.CreatedOn != default)
                                                {
                                                    <div class="bd-info-group">
                                                        <span class="bd-info-label">Created On</span>
                                                        <span class="bd-info-value">@BranchModel.CreatedOn.ToString("dd MMM yyyy, HH:mm")</span>
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(BranchModel.CreatedBy))
                                                {
                                                    <div class="bd-info-group">
                                                        <span class="bd-info-label">Created By</span>
                                                        <span class="bd-info-value">@BranchModel.CreatedBy</span>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="bd-tab-pane @(activeViewTab == "contact" ? "bd-active" : "")">
                                    <div class="bd-card-grid">
                                        <div class="bd-info-card">
                                            <div class="bd-card-header">
                                                <i class="fa-light fa-envelope bd-card-header-icon"></i>
                                                <h3 class="bd-card-title">Email Addresses</h3>
                                            </div>
                                            <div class="bd-card-body">
                                                @if (BranchModel.EmailAddresses?.Any() == true)
                                                {
                                                    var primaryEmail = BranchModel.EmailAddresses.FirstOrDefault(e => e.IsPrimary);
                                                    @if (primaryEmail != null)
                                                    {
                                                        <div class="bd-info-group">
                                                            <span class="bd-info-label">Primary Email</span>
                                                            <a href="mailto:@primaryEmail.EmailAddress" class="bd-info-value bd-email">
                                                                <i class="fa-light fa-envelope"></i> @primaryEmail.EmailAddress
                                                            </a>
                                                        </div>
                                                    }

                                                    @foreach (var email in BranchModel.EmailAddresses.Where(e => !e.IsPrimary))
                                                    {
                                                        <div class="bd-info-group">
                                                            <span class="bd-info-label">
                                                                @(!string.IsNullOrEmpty(email.Description) ? email.Description : "Email")
                                                            </span>
                                                            <a href="mailto:@email.EmailAddress" class="bd-info-value bd-email">
                                                                <i class="fa-light fa-envelope"></i> @email.EmailAddress
                                                            </a>
                                                        </div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div class="bd-empty-state">
                                                        <i class="fa-light fa-envelope-open bd-empty-icon"></i>
                                                        <p class="bd-empty-text">No email addresses provided</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>

                                        <div class="bd-info-card">
                                            <div class="bd-card-header">
                                                <i class="fa-light fa-phone bd-card-header-icon"></i>
                                                <h3 class="bd-card-title">Contact Numbers</h3>
                                            </div>
                                            <div class="bd-card-body">
                                                @if (BranchModel.ContactNumbers?.Any() == true)
                                                {
                                                    var primaryContact = BranchModel.ContactNumbers.FirstOrDefault(c => c.IsPrimary);
                                                    @if (primaryContact != null)
                                                    {
                                                        <div class="bd-info-group">
                                                            <span class="bd-info-label">Primary Phone</span>
                                                            <a href="tel:@primaryContact.Number" class="bd-info-value bd-phone">
                                                                <i class="fa-light fa-phone"></i> @primaryContact.Number
                                                            </a>
                                                        </div>
                                                    }

                                                    @foreach (var phone in BranchModel.ContactNumbers.Where(c => !c.IsPrimary))
                                                    {
                                                        <div class="bd-info-group">
                                                            <span class="bd-info-label">
                                                                @if (!string.IsNullOrEmpty(phone.Description))
                                                                {
                                                                    @phone.Description
                                                                }
                                                                else if (phone.ContactNumberType != null)
                                                                {
                                                                    @phone.ContactNumberType.Name
                                                                }
                                                                else
                                                                {
                                                                    @("Phone")
                                                                }
                                                            </span>
                                                            <a href="tel:@phone.Number" class="bd-info-value bd-phone">
                                                                <i class="fa-light fa-phone"></i> @phone.Number
                                                            </a>
                                                        </div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div class="bd-empty-state">
                                                        <i class="fa-light fa-phone-slash bd-empty-icon"></i>
                                                        <p class="bd-empty-text">No contact numbers provided</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="bd-tab-pane @(activeViewTab == "address" ? "bd-active" : "")">
                                    <div class="bd-card-grid">
                                        <div class="bd-info-card">
                                            <div class="bd-card-header">
                                                <i class="fa-light fa-map-marker-alt bd-card-header-icon"></i>
                                                <h3 class="bd-card-title">Branch Address</h3>
                                            </div>
                                            <div class="bd-card-body">
                                                @if (BranchModel.Address != null)
                                                {
                                                    <div class="bd-address-container">
                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.ComplexName))
                                                        {
                                                            <div class="bd-address-line"><i class="fa-light fa-building"></i> @BranchModel.Address.ComplexName</div>
                                                        }
                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.BuildingName))
                                                        {
                                                            <div class="bd-address-line"><i class="fa-light fa-building"></i> @BranchModel.Address.BuildingName</div>
                                                        }
                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.UnitNumber))
                                                        {
                                                            <div class="bd-address-line"><i class="fa-light fa-door-closed"></i> Unit @BranchModel.Address.UnitNumber</div>
                                                        }
                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.Street))
                                                        {
                                                            <div class="bd-address-line"><i class="fa-light fa-road"></i> @BranchModel.Address.Street</div>
                                                        }
                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.Suburb))
                                                        {
                                                            <div class="bd-address-line"><i class="fa-light fa-map"></i> @BranchModel.Address.Suburb</div>
                                                        }
                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.City))
                                                        {
                                                            <div class="bd-address-line">
                                                                <i class="fa-light fa-city"></i>
                                                                @BranchModel.Address.City@(!string.IsNullOrEmpty(BranchModel.Address.Province) ? $", {BranchModel.Address.Province}" : "")
                                                            </div>
                                                        }
                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.PostalCode))
                                                        {
                                                            <div class="bd-address-line"><i class="fa-light fa-mailbox"></i> @BranchModel.Address.PostalCode</div>
                                                        }
                                                        @if (!string.IsNullOrEmpty(BranchModel.Address.Country))
                                                        {
                                                            <div class="bd-address-line"><i class="fa-light fa-globe"></i> @BranchModel.Address.Country</div>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="bd-empty-state">
                                                        <i class="fa-light fa-map-marker-slash bd-empty-icon"></i>
                                                        <p class="bd-empty-text">No address information provided</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="bd-tab-pane @(activeViewTab == "banking" ? "bd-active" : "")">
                                    <div class="bd-card-grid">
                                        <div class="bd-info-card">
                                            <div class="bd-card-header">
                                                <i class="fa-light fa-university bd-card-header-icon"></i>
                                                <h3 class="bd-card-title">Banking Details</h3>
                                            </div>
                                            <div class="bd-card-body">
                                                @if (BranchModel.BankAccount != null && !string.IsNullOrEmpty(BranchModel.BankAccount.AccountNumber))
                                                {
                                                    <div class="bd-info-group">
                                                        <span class="bd-info-label">Bank Name</span>
                                                        <span class="bd-info-value">@(BranchModel.BankAccount.BankName?.Name ?? "Not set")</span>
                                                    </div>
                                                    <div class="bd-info-group">
                                                        <span class="bd-info-label">Account Type</span>
                                                        <span class="bd-info-value">@(BranchModel.BankAccount.AccountType ?? "Not set")</span>
                                                    </div>
                                                    <div class="bd-info-group">
                                                        <span class="bd-info-label">Account Number</span>
                                                        <span class="bd-info-value">@BranchModel.BankAccount.AccountNumber</span>
                                                    </div>
                                                    <div class="bd-info-group">
                                                        <span class="bd-info-label">Branch Code</span>
                                                        <span class="bd-info-value">@BranchModel.BankAccount.BranchCode</span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="bd-empty-state">
                                                        <i class="fa-light fa-credit-card-blank bd-empty-icon"></i>
                                                        <p class="bd-empty-text">No banking details provided</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="bd-tab-pane @(activeViewTab == "branding" ? "bd-active" : "")">
                                    <div class="bd-card-grid">
                                        <div class="bd-info-card">
                                            <div class="bd-card-header">
                                                <i class="fa-light fa-image bd-card-header-icon"></i>
                                                <h3 class="bd-card-title">Branch Logo</h3>
                                            </div>
                                            <div class="bd-card-body">
                                                @if (BranchModel.MainLogoId.HasValue && BranchModel.MainLogo != null)
                                                {
                                                    <div class="bd-logo-display">
                                                        <div class="bd-logo-container">
                                                            <img src="@BranchModel.MainLogo.Url" alt="@BranchModel.Name Logo" class="bd-logo-image" />
                                                        </div>
                                                        <div class="bd-logo-info">
                                                            <div class="bd-logo-title">@BranchModel.MainLogo.FileName</div>
                                                            <div class="bd-logo-meta">
                                                                <span><i class="fa-light fa-file-image"></i> @BranchModel.MainLogo.ContentType</span>
                                                                <span><i class="fa-light fa-weight"></i> @((BranchModel.MainLogo.FileSize / 1024).ToString("N0")) KB</span>
                                                                <span><i class="fa-light fa-calendar"></i> @BranchModel.MainLogo.UploadDate.ToString("dd MMM yyyy")</span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="bd-empty-state">
                                                        <i class="fa-light fa-file-image bd-empty-icon"></i>
                                                        <p class="bd-empty-text">No logo uploaded</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if (IsEditMode)
                {
                    <EditForm Model="BranchModel" OnValidSubmit="Save" FormName="editBranch" class="bd-edit-form">
                        <DataAnnotationsValidator />
                        <Roovia.Components.Elements.Forms.FluentValidationValidator />

                        <div class="bd-tabs-container">
                            <div class="bd-tabs-header">
                                <button type="button" class="bd-tab-button @(activeTab == "basic" ? "bd-active" : "")" @onclick='() => HandleTabChange("basic")'>
                                    <i class="fa-light fa-info-circle"></i>
                                    <span>Basic</span>
                                </button>
                                <button type="button" class="bd-tab-button @(activeTab == "contact" ? "bd-active" : "")" @onclick='() => HandleTabChange("contact")'>
                                    <i class="fa-light fa-address-card"></i>
                                    <span>Contact</span>
                                </button>
                                <button type="button" class="bd-tab-button @(activeTab == "address" ? "bd-active" : "")" @onclick='() => HandleTabChange("address")'>
                                    <i class="fa-light fa-map-marker-alt"></i>
                                    <span>Address</span>
                                </button>
                                <button type="button" class="bd-tab-button @(activeTab == "banking" ? "bd-active" : "")" @onclick='() => HandleTabChange("banking")'>
                                    <i class="fa-light fa-university"></i>
                                    <span>Banking</span>
                                </button>
                                <button type="button" class="bd-tab-button @(activeTab == "logo" ? "bd-active" : "")" @onclick='() => HandleTabChange("logo")'>
                                    <i class="fa-light fa-image"></i>
                                    <span>Logo</span>
                                </button>
                            </div>

                            <div class="bd-tab-content">
                                <div class="bd-tab-pane @(activeTab == "basic" ? "bd-active" : "")">
                                    <div class="bd-form-section">
                                        <div class="bd-form-group">
                                            <label for="name">Branch Name <span class="bd-required">*</span></label>
                                            <div class="bd-input-wrapper">
                                                <i class="fa-light fa-code-branch bd-input-icon"></i>
                                                <InputText @bind-Value="BranchModel.Name" id="name" class="bd-input" placeholder="Enter branch name" />
                                            </div>
                                            <ValidationMessage For="@(() => BranchModel.Name)" class="bd-validation-message" />
                                        </div>

                                        <div class="bd-form-group">
                                            <label for="code">Branch Code</label>
                                            <div class="bd-input-wrapper">
                                                <i class="fa-light fa-code bd-input-icon"></i>
                                                <InputText @bind-Value="BranchModel.Code" id="code" class="bd-input" placeholder="Enter unique branch code" />
                                            </div>
                                        </div>

                                        <div class="bd-form-group">
                                            <label for="company">Company <span class="bd-required">*</span></label>
                                            <div class="bd-select-wrapper">
                                                <i class="fa-light fa-building bd-input-icon"></i>
                                                <InputSelect @bind-Value="companyValue" id="company" class="bd-select" disabled="@(!CanEditCompany)">
                                                    @if (Companies != null)
                                                    {
                                                        @foreach (var company in Companies.OrderBy(c => c.Name))
                                                        {
                                                            <option value="@company.Id">@company.Name</option>
                                                        }
                                                    }
                                                </InputSelect>
                                                <i class="fa-light fa-chevron-down bd-select-arrow"></i>
                                            </div>
                                            <ValidationMessage For="@(() => BranchModel.CompanyId)" class="bd-validation-message" />
                                        </div>

                                        <div class="bd-form-group">
                                            <label for="status">Status</label>
                                            <div class="bd-select-wrapper">
                                                <i class="fa-light fa-toggle-on bd-input-icon"></i>
                                                <InputSelect @bind-Value="statusValue" id="status" class="bd-select">
                                                    <option value="">-- No Status --</option>
                                                    @if (branchStatusTypes != null)
                                                    {
                                                        @foreach (var status in branchStatusTypes.OrderBy(s => s.DisplayOrder))
                                                        {
                                                            <option value="@status.Id">@status.Name</option>
                                                        }
                                                    }
                                                </InputSelect>
                                                <i class="fa-light fa-chevron-down bd-select-arrow"></i>
                                            </div>
                                        </div>

                                        <div class="bd-form-row">
                                            <div class="bd-form-group bd-col-6">
                                                <label for="maxUsers">Max Users</label>
                                                <div class="bd-input-wrapper">
                                                    <i class="fa-light fa-users bd-input-icon"></i>
                                                    <InputNumber @bind-Value="BranchModel.MaxUsers" id="maxUsers" class="bd-input" placeholder="Maximum users allowed" />
                                                </div>
                                            </div>

                                            <div class="bd-form-group bd-col-6">
                                                <label for="maxProperties">Max Properties</label>
                                                <div class="bd-input-wrapper">
                                                    <i class="fa-light fa-home bd-input-icon"></i>
                                                    <InputNumber @bind-Value="BranchModel.MaxProperties" id="maxProperties" class="bd-input" placeholder="Maximum properties allowed" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="bd-form-group">
                                            <div class="bd-switch-wrapper">
                                                <label class="bd-switch">
                                                    <InputCheckbox @bind-Value="BranchModel.IsActive" class="bd-switch-input" />
                                                    <span class="bd-switch-slider"></span>
                                                </label>
                                                <div class="bd-switch-label">
                                                    <span>Active</span>
                                                    <small>Inactive branches will not be accessible to users</small>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="bd-form-group">
                                            <div class="bd-switch-wrapper">
                                                <label class="bd-switch">
                                                    <InputCheckbox @bind-Value="BranchModel.IsHeadOffice" class="bd-switch-input" />
                                                    <span class="bd-switch-slider"></span>
                                                </label>
                                                <div class="bd-switch-label">
                                                    <span>Head Office</span>
                                                    <small>Designate this branch as the head office</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="bd-tab-pane @(activeTab == "contact" ? "bd-active" : "")">
                                    <div class="bd-form-section">
                                        <div class="bd-form-group">
                                            <label for="primaryEmail">Primary Email Address</label>
                                            <div class="bd-input-wrapper">
                                                <i class="fa-light fa-envelope bd-input-icon"></i>
                                                <input type="email" id="primaryEmail" class="bd-input"
                                                       value="@GetPrimaryEmail()" @onchange="(e) => UpdatePrimaryEmail(e.Value?.ToString())"
                                                       placeholder="Enter primary email address" />
                                            </div>
                                        </div>

                                        <div class="bd-form-group">
                                            <label for="primaryPhone">Primary Phone Number</label>
                                            <div class="bd-input-wrapper">
                                                <i class="fa-light fa-phone bd-input-icon"></i>
                                                <input type="tel" id="primaryPhone" class="bd-input"
                                                       value="@GetPrimaryPhone()" @onchange="(e) => UpdatePrimaryPhone(e.Value?.ToString())"
                                                       placeholder="Enter primary phone number" />
                                            </div>
                                        </div>

                                        <div class="bd-section-divider">
                                            <div class="bd-section-label">
                                                <i class="fa-light fa-envelope"></i>
                                                <span>Additional Email Addresses</span>
                                            </div>
                                            <button type="button" class="bd-button-small bd-button-outline" @onclick="AddEmail">
                                                <i class="fa-light fa-plus"></i> Add Email
                                            </button>
                                        </div>

                                        @if (BranchModel.EmailAddresses?.Where(e => !e.IsPrimary).Any() == true)
                                        {
                                            <div class="bd-contact-list">
                                                @foreach (var email in BranchModel.EmailAddresses.Where(e => !e.IsPrimary))
                                                {
                                                    <div class="bd-contact-item">
                                                        <div class="bd-contact-content">
                                                            <div class="bd-input-wrapper bd-flex-grow">
                                                                <i class="fa-light fa-envelope bd-input-icon"></i>
                                                                <input type="email" class="bd-input"
                                                                       value="@email.EmailAddress" @onchange="(e) => UpdateEmailAddress(email, e.Value?.ToString())"
                                                                       placeholder="Enter email address" />
                                                            </div>
                                                            <div class="bd-input-wrapper">
                                                                <i class="fa-light fa-tag bd-input-icon"></i>
                                                                <input type="text" class="bd-input"
                                                                       value="@email.Description" @onchange="(e) => UpdateEmailDescription(email, e.Value?.ToString())"
                                                                       placeholder="Description" />
                                                            </div>
                                                        </div>
                                                        <button type="button" class="bd-button-icon bd-button-danger" @onclick="() => RemoveEmail(email)">
                                                            <i class="fa-light fa-trash"></i>
                                                        </button>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="bd-empty-list">
                                                <i class="fa-light fa-envelope-open"></i>
                                                <p>No additional email addresses</p>
                                            </div>
                                        }

                                        <div class="bd-section-divider">
                                            <div class="bd-section-label">
                                                <i class="fa-light fa-phone"></i>
                                                <span>Additional Phone Numbers</span>
                                            </div>
                                            <button type="button" class="bd-button-small bd-button-outline" @onclick="AddPhone">
                                                <i class="fa-light fa-plus"></i> Add Phone
                                            </button>
                                        </div>

                                        @if (BranchModel.ContactNumbers?.Where(c => !c.IsPrimary).Any() == true)
                                        {
                                            <div class="bd-contact-list">
                                                @foreach (var phone in BranchModel.ContactNumbers.Where(c => !c.IsPrimary))
                                                {
                                                    <div class="bd-contact-item">
                                                        <div class="bd-contact-content">
                                                            <div class="bd-input-wrapper bd-flex-grow">
                                                                <i class="fa-light fa-phone bd-input-icon"></i>
                                                                <input type="tel" class="bd-input"
                                                                       value="@phone.Number" @onchange="(e) => UpdatePhoneNumber(phone, e.Value?.ToString())"
                                                                       placeholder="Enter phone number" />
                                                            </div>
                                                            <div class="bd-select-wrapper">
                                                                <i class="fa-light fa-phone-office bd-input-icon"></i>
                                                                <select class="bd-select"
                                                                        value="@phone.ContactNumberTypeId" @onchange="(e) => UpdatePhoneTypeId(phone, e.Value?.ToString())">
                                                                    @if (contactNumberTypes != null)
                                                                    {
                                                                        @foreach (var type in contactNumberTypes)
                                                                        {
                                                                            <option value="@type.Id">@type.Name</option>
                                                                        }
                                                                    }
                                                                </select>
                                                                <i class="fa-light fa-chevron-down bd-select-arrow"></i>
                                                            </div>
                                                        </div>
                                                        <button type="button" class="bd-button-icon bd-button-danger" @onclick="() => RemovePhone(phone)">
                                                            <i class="fa-light fa-trash"></i>
                                                        </button>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="bd-empty-list">
                                                <i class="fa-light fa-phone-slash"></i>
                                                <p>No additional phone numbers</p>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <div class="bd-tab-pane @(activeTab == "address" ? "bd-active" : "")">
                                    <div class="bd-form-section">
                                        <div class="bd-form-group">
                                            <label for="street">Street</label>
                                            <div class="bd-input-wrapper">
                                                <i class="fa-light fa-road bd-input-icon"></i>
                                                <InputText @bind-Value="BranchModel.Address.Street" id="street" class="bd-input" placeholder="Enter street address" />
                                            </div>
                                        </div>

                                        <div class="bd-form-row">
                                            <div class="bd-form-group bd-col-4">
                                                <label for="unitNumber">Unit Number</label>
                                                <div class="bd-input-wrapper">
                                                    <i class="fa-light fa-door-closed bd-input-icon"></i>
                                                    <InputText @bind-Value="BranchModel.Address.UnitNumber" id="unitNumber" class="bd-input" placeholder="Unit number" />
                                                </div>
                                            </div>

                                            <div class="bd-form-group bd-col-8">
                                                <label for="complexName">Complex Name</label>
                                                <div class="bd-input-wrapper">
                                                    <i class="fa-light fa-building bd-input-icon"></i>
                                                    <InputText @bind-Value="BranchModel.Address.ComplexName" id="complexName" class="bd-input" placeholder="Complex name" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="bd-form-group">
                                            <label for="buildingName">Building Name</label>
                                            <div class="bd-input-wrapper">
                                                <i class="fa-light fa-building bd-input-icon"></i>
                                                <InputText @bind-Value="BranchModel.Address.BuildingName" id="buildingName" class="bd-input" placeholder="Building name" />
                                            </div>
                                        </div>

                                        <div class="bd-form-row">
                                            <div class="bd-form-group bd-col-6">
                                                <label for="suburb">Suburb</label>
                                                <div class="bd-input-wrapper">
                                                    <i class="fa-light fa-map bd-input-icon"></i>
                                                    <InputText @bind-Value="BranchModel.Address.Suburb" id="suburb" class="bd-input" placeholder="Enter suburb" />
                                                </div>
                                            </div>

                                            <div class="bd-form-group bd-col-6">
                                                <label for="city">City</label>
                                                <div class="bd-input-wrapper">
                                                    <i class="fa-light fa-city bd-input-icon"></i>
                                                    <InputText @bind-Value="BranchModel.Address.City" id="city" class="bd-input" placeholder="Enter city" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="bd-form-row">
                                            <div class="bd-form-group bd-col-6">
                                                <label for="province">Province</label>
                                                <div class="bd-input-wrapper">
                                                    <i class="fa-light fa-map-marked bd-input-icon"></i>
                                                    <InputText @bind-Value="BranchModel.Address.Province" id="province" class="bd-input" placeholder="Enter province" />
                                                </div>
                                            </div>

                                            <div class="bd-form-group bd-col-6">
                                                <label for="postalCode">Postal Code</label>
                                                <div class="bd-input-wrapper">
                                                    <i class="fa-light fa-mailbox bd-input-icon"></i>
                                                    <InputText @bind-Value="BranchModel.Address.PostalCode" id="postalCode" class="bd-input" placeholder="Enter postal code" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="bd-form-group">
                                            <label for="country">Country</label>
                                            <div class="bd-input-wrapper">
                                                <i class="fa-light fa-globe bd-input-icon"></i>
                                                <InputText @bind-Value="BranchModel.Address.Country" id="country" class="bd-input" placeholder="Enter country" />
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="bd-tab-pane @(activeTab == "banking" ? "bd-active" : "")">
                                    <div class="bd-form-section">
                                        <div class="bd-form-row">
                                            <div class="bd-form-group bd-col-6">
                                                <label for="bankNameId">Bank Name</label>
                                                <div class="bd-select-wrapper">
                                                    <i class="fa-light fa-university bd-input-icon"></i>
                                                    <select id="bankNameId" class="bd-select"
                                                            value="@(BranchModel.BankAccount.BankNameId?.ToString() ?? "")"
                                                            @onchange="(e) => UpdateBankNameId(e.Value?.ToString())">
                                                        <option value="">-- Select Bank --</option>
                                                        @if (bankNameTypes != null)
                                                        {
                                                            @foreach (var bank in bankNameTypes.OrderBy(b => b.Name))
                                                            {
                                                                <option value="@bank.Id">@bank.Name</option>
                                                            }
                                                        }
                                                    </select>
                                                    <i class="fa-light fa-chevron-down bd-select-arrow"></i>
                                                </div>
                                            </div>

                                            <div class="bd-form-group bd-col-6">
                                                <label for="accountType">Account Type</label>
                                                <div class="bd-input-wrapper">
                                                    <i class="fa-light fa-credit-card bd-input-icon"></i>
                                                    <InputText @bind-Value="BranchModel.BankAccount.AccountType" id="accountType" class="bd-input" placeholder="E.g. Current, Savings, Business" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="bd-form-row">
                                            <div class="bd-form-group bd-col-6">
                                                <label for="accountNumber">Account Number</label>
                                                <div class="bd-input-wrapper">
                                                    <i class="fa-light fa-hashtag bd-input-icon"></i>
                                                    <InputText @bind-Value="BranchModel.BankAccount.AccountNumber" id="accountNumber" class="bd-input" placeholder="Enter account number" />
                                                </div>
                                            </div>

                                            <div class="bd-form-group bd-col-6">
                                                <label for="branchCode">Branch Code</label>
                                                <div class="bd-input-wrapper">
                                                    <i class="fa-light fa-code bd-input-icon"></i>
                                                    <InputText @bind-Value="BranchModel.BankAccount.BranchCode" id="branchCode" class="bd-input" placeholder="Enter branch code" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="bd-tab-pane @(activeTab == "logo" ? "bd-active" : "")">
                                    <div class="bd-form-section">
                                        <div class="bd-logo-upload-container">
                                            @if (BranchModel.MainLogoId.HasValue && BranchModel.MainLogo != null)
                                            {
                                                <div class="bd-current-logo">
                                                    <h5>Current Logo</h5>
                                                    <div class="bd-logo-preview">
                                                        <img src="@BranchModel.MainLogo.Url" alt="Branch Logo" class="bd-logo-image" />
                                                    </div>
                                                    <div class="bd-logo-actions">
                                                        <button type="button" class="bd-button bd-button-danger" @onclick="RemoveLogo">
                                                            <i class="fa-light fa-trash"></i>
                                                            <span>Remove</span>
                                                        </button>
                                                        <button type="button" class="bd-button bd-button-outline" @onclick="ShowUploadDialog">
                                                            <i class="fa-light fa-exchange"></i>
                                                            <span>Replace</span>
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="bd-empty-logo-upload">
                                                    <i class="fa-light fa-image"></i>
                                                    <p>No logo uploaded</p>
                                                    <button type="button" class="bd-button bd-button-primary" @onclick="ShowUploadDialog">
                                                        <i class="fa-light fa-cloud-upload"></i>
                                                        <span>Upload Logo</span>
                                                    </button>
                                                </div>
                                            }

                                            @if (isUploading)
                                            {
                                                <div class="bd-upload-progress">
                                                    <div class="bd-progress-bar">
                                                        <div class="bd-progress-fill" style="width: @uploadProgress%"></div>
                                                    </div>
                                                    <span class="bd-progress-text">Uploading... @uploadProgress%</span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                }
            </div>
        }
    </div>

    <div class="bd-modal-footer">
        <button type="button" class="bd-button bd-button-outline" @onclick="OnCancel">
            <i class="fa-light fa-times"></i>
            <span>Cancel</span>
        </button>
        @if (IsViewMode && CanEdit)
        {
            <button type="button" class="bd-button bd-button-primary" @onclick="SwitchToEditMode">
                <i class="fa-light fa-edit"></i>
                <span>Edit</span>
            </button>
        }
        else if (IsEditMode)
        {
            <button class="bd-button bd-button-primary" @onclick="Save">
                <i class="fa-light fa-save"></i>
                <span>Save Changes</span>
            </button>
        }
    </div>
</div>

@if (showLogoUploadDialog)
{
    <div class="bd-modal-backdrop"></div>
    <div class="bd-upload-modal-wrapper">
        <div class="bd-modal-header">
            <div class="bd-modal-title">
                <i class="fa-light fa-cloud-upload"></i>
                <span>Upload Logo</span>
            </div>
            <button type="button" class="bd-close-button" @onclick="CloseUploadDialog">
                <i class="fa-light fa-times"></i>
            </button>
        </div>
        <div class="bd-modal-body">
            <div class="bd-upload-instructions">
                <h4>Upload Branch Logo</h4>
                <p>Please select an image file to upload as the branch logo.</p>
                <div class="bd-upload-specs">
                    <div class="bd-spec-item">
                        <i class="fa-light fa-image"></i>
                        <span>Recommended size: 512x512 pixels</span>
                    </div>
                    <div class="bd-spec-item">
                        <i class="fa-light fa-weight"></i>
                        <span>Maximum file size: 5MB</span>
                    </div>
                    <div class="bd-spec-item">
                        <i class="fa-light fa-file-image"></i>
                        <span>Supported formats: JPG, PNG, GIF</span>
                    </div>
                </div>
            </div>

            <div class="bd-upload-area @(logoFile != null ? "bd-has-file" : "")">
                <!-- Replace InputFile with SfUploader -->
                <SfUploader ID="LogoUploader" 
                           AllowedExtensions=".jpg, .jpeg, .png, .gif" 
                           MaxFileSize="5242880"
                           AllowMultiple="false"
                           ShowFileList="true"
                           AutoUpload="false">
                    <UploaderEvents ValueChange="OnLogoFileSelected"></UploaderEvents>
@*                     <UploaderButtons>
                        <ButtonsProps Browse="Select Logo" Clear="Clear"></ButtonsProps>
                    </UploaderButtons> *@
                </SfUploader>
                
                @if (previewImageData != null)
                {
                    <div class="bd-image-preview">
                        <h5>Preview</h5>
                        <div class="bd-preview-container">
                            <img src="@previewImageData" alt="Logo Preview" class="bd-logo-preview-image" />
                        </div>
                    </div>
                }
            </div>

            @if (!string.IsNullOrEmpty(uploadError))
            {
                <div class="bd-upload-error">
                    <i class="fa-light fa-exclamation-triangle"></i>
                    <p>@uploadError</p>
                </div>
            }
        </div>
        <div class="bd-modal-footer">
            <button type="button" class="bd-button bd-button-outline" @onclick="CloseUploadDialog">
                <i class="fa-light fa-times"></i>
                <span>Cancel</span>
            </button>
            <button type="button" class="bd-button bd-button-primary" @onclick="UploadLogo" disabled="@(logoFile == null)">
                <i class="fa-light fa-cloud-upload"></i>
                <span>Upload</span>
            </button>
        </div>
    </div>
}

@code {
    [Parameter] public Branch BranchModel { get; set; } = new Branch();
    [Parameter] public List<Company>? Companies { get; set; }
    [Parameter] public List<BranchStatusType>? branchStatusTypes { get; set; }
    [Parameter] public List<BankNameType>? bankNameTypes { get; set; }
    [Parameter] public List<ContactNumberType>? contactNumberTypes { get; set; }
    [Parameter] public int CompanyId { get; set; } = 0;
    [Parameter] public bool IsEdit { get; set; } = false;
    [Parameter] public bool IsView { get; set; } = false;
    [Parameter] public bool CanEdit { get; set; } = true;
    [Parameter] public bool CanEditCompany { get; set; } = true;
    [Parameter] public EventCallback<Branch> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private bool isLoading = false;
    private string activeTab = "basic";
    private string activeViewTab = "basic";
    private bool IsEditMode => (IsEdit || isInEditMode) && !IsView;
    private bool isInEditMode = false;
    private bool IsViewMode => IsView || !IsEditMode;
    private Company? Company { get; set; }
    
    // Add these properties to handle binding with InputSelect
    private string companyValue
    {
        get => BranchModel.CompanyId.ToString();
        set
        {
            if (int.TryParse(value, out var id))
            {
                BranchModel.CompanyId = id;
                _ = LoadCompanyDetails(id);
            }
        }
    }

    private string statusValue
    {
        get => BranchModel.StatusId?.ToString() ?? "";
        set
        {
            BranchModel.StatusId = string.IsNullOrEmpty(value) ? null : int.Parse(value);
        }
    }
    
    // Logo upload related fields
    private bool showLogoUploadDialog = false;
    private IBrowserFile? logoFile;
    private bool isUploading = false;
    private int uploadProgress = 0;
    private string uploadError = string.Empty;
    private long maxFileSize = 1024 * 1024 * 5; // 5MB
    
    // New fields for SfUploader and image processing
    private string? previewImageData;
    private byte[]? resizedImageData;
    private string logoContentType = string.Empty;
    private int logoTargetWidth = 512;
    private int logoTargetHeight = 512;

    // Form tabs
    private List<RVTab.RVTabItem> formTabs = new List<RVTab.RVTabItem>
    {
        new RVTab.RVTabItem { Id = "basic", Title = "Basic Information", Icon = "fa-light fa-code-branch", IsActive = true },
        new RVTab.RVTabItem { Id = "contact", Title = "Contact Details", Icon = "fa-light fa-address-card" },
        new RVTab.RVTabItem { Id = "address", Title = "Address", Icon = "fa-light fa-map-marker-alt" },
        new RVTab.RVTabItem { Id = "banking", Title = "Banking Details", Icon = "fa-light fa-university" },
        new RVTab.RVTabItem { Id = "logo", Title = "Branch Logo", Icon = "fa-light fa-image" }
    };

    protected override async Task OnInitializedAsync()
    {
        // Load reference data if not provided
        if (contactNumberTypes == null || bankNameTypes == null)
        {
            await LoadReferenceData();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (BranchModel.Id != 0)
            {
                await LoadBranchData();
            }
            else
            {
                InitializeNewBranch();
            }

            // For new branches, start in edit mode
            if (BranchModel.Id == 0)
            {
                isInEditMode = true;
            }
            else if (IsView)
            {
                isInEditMode = false;
            }

            if (CompanyId > 0 && (BranchModel.Id == 0 || BranchModel.CompanyId != CompanyId))
            {
                BranchModel.CompanyId = CompanyId;

                // Load the company details
                await LoadCompanyDetails(CompanyId);
            }

            await InvokeAsync(() => this.StateHasChanged());
        }
    }

    private async Task LoadReferenceData()
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();

            if (contactNumberTypes == null)
            {
                contactNumberTypes = await context.ContactNumberTypes
                    .Where(t => t.IsActive)
                    .OrderBy(t => t.DisplayOrder)
                    .ToListAsync();
            }

            if (bankNameTypes == null)
            {
                bankNameTypes = await context.BankNameTypes
                    .Where(b => b.IsActive)
                    .OrderBy(b => b.DisplayOrder)
                    .ToListAsync();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading reference data: {ex.Message}", "Error");
        }
    }

    private void InitializeNewBranch()
    {
        BranchModel = new Branch
            {
                CompanyId = CompanyId,
                IsActive = true,
                Address = new Address { Country = "South Africa" },
                BankAccount = new BankAccount(),
                EmailAddresses = new List<Email>(),
                ContactNumbers = new List<ContactNumber>(),
                CreatedOn = DateTime.Now
            };

        // Initialize collections if null
        if (BranchModel.EmailAddresses == null)
            BranchModel.EmailAddresses = new List<Email>();
        if (BranchModel.ContactNumbers == null)
            BranchModel.ContactNumbers = new List<ContactNumber>();
    }

    private async Task LoadBranchData()
    {
        isLoading = true;

        try
        {
            var response = await UserService.GetBranchWithDetails(BranchModel.Id);
            if (response.ResponseInfo.Success)
            {
                BranchModel = (Branch)response.Response;

                // Initialize collections if null
                if (BranchModel.EmailAddresses == null)
                    BranchModel.EmailAddresses = new List<Email>();
                if (BranchModel.ContactNumbers == null)
                    BranchModel.ContactNumbers = new List<ContactNumber>();

                // Initialize bank account if null
                if (BranchModel.BankAccount == null)
                {
                    BranchModel.BankAccount = new BankAccount();
                }

                // Load the company details
                if (BranchModel.CompanyId > 0)
                {
                    await LoadCompanyDetails(BranchModel.CompanyId);
                }

                // Load the logo if there's one
                if (BranchModel.MainLogoId.HasValue)
                {
                    using var context = await DbContextFactory.CreateDbContextAsync();
                    BranchModel.MainLogo = await context.CdnFileMetadata
                        .FirstOrDefaultAsync(f => f.Id == BranchModel.MainLogoId.Value);
                }

                // Load status if there's one
                if (BranchModel.StatusId.HasValue)
                {
                    using var context = await DbContextFactory.CreateDbContextAsync();
                    BranchModel.Status = await context.BranchStatusTypes
                        .FirstOrDefaultAsync(s => s.Id == BranchModel.StatusId.Value);
                }
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading branch: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCompanyDetails(int companyId)
    {
        try
        {
            var response = await UserService.GetCompanyById(companyId);
            if (response.ResponseInfo.Success)
            {
                Company = (Company)response.Response;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading company details: {ex.Message}", "Error");
        }
    }

    private string GetDialogTitle()
    {
        if (IsViewMode)
        {
            return "Branch Details";
        }
        else if (BranchModel.Id == 0)
        {
            return "Create Branch";
        }
        else
        {
            return "Edit Branch";
        }
    }

    private string GetDialogIcon()
    {
        if (IsViewMode)
        {
            return "fa-light fa-code-branch";
        }
        else if (BranchModel.Id == 0)
        {
            return "fa-light fa-plus-circle";
        }
        else
        {
            return "fa-light fa-edit";
        }
    }

    private void SwitchToEditMode()
    {
        isInEditMode = true;
        IsView = false;
        StateHasChanged();
    }

    private void HandleTabChange(string tabId)
    {
        activeTab = tabId;
    }

    private void SetActiveViewTab(string tabId)
    {
        activeViewTab = tabId;
    }

    private async Task HandleCompanyChange(string value)
    {
        if (int.TryParse(value, out var id))
        {
            BranchModel.CompanyId = id;
            await LoadCompanyDetails(id);
        }
    }

    private async Task HandleConfirmAction()
    {
        if (IsView)
        {
            await OnCancel.InvokeAsync();
        }
        else if (IsEditMode)
        {
            await Save();
        }
        else
        {
            SwitchToEditMode();
        }
    }

    private async Task Save()
    {
        try
        {
            isLoading = true;

            if (BranchModel.Id == 0)
            {
                // Create new branch
                BranchModel.CreatedBy = "CurrentUser"; // Replace with actual current user ID
                BranchModel.CreatedOn = DateTime.Now;
            }
            else
            {
                // Update existing branch
                BranchModel.UpdatedBy = "CurrentUser"; // Replace with actual current user ID
                BranchModel.UpdatedDate = DateTime.Now;
            }

            // Ensure all emails & phone numbers have RelatedEntityType and BranchId set
            if (BranchModel.EmailAddresses != null)
            {
                foreach (var email in BranchModel.EmailAddresses)
                {
                    email.RelatedEntityType = "Branch";
                    if (BranchModel.Id > 0)
                    {
                        email.SetRelatedEntity("Branch", BranchModel.Id);
                    }
                }
            }

            if (BranchModel.ContactNumbers != null)
            {
                foreach (var phone in BranchModel.ContactNumbers)
                {
                    phone.RelatedEntityType = "Branch";
                    if (BranchModel.Id > 0)
                    {
                        phone.SetRelatedEntity("Branch", BranchModel.Id);
                    }
                }
            }

            await OnSave.InvokeAsync(BranchModel);

            if (isInEditMode)
            {
                // If we're in "switch to edit mode" state, go back to view mode after save
                isInEditMode = false;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error saving branch: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Helper method for banking details
    private void UpdateBankNameId(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            BranchModel.BankAccount.BankNameId = null;
            return;
        }

        if (int.TryParse(value, out var bankNameId))
        {
            BranchModel.BankAccount.BankNameId = bankNameId;

            // Set default branch code if available
            if (bankNameTypes != null)
            {
                var bankName = bankNameTypes.FirstOrDefault(b => b.Id == bankNameId);
                if (bankName != null && !string.IsNullOrEmpty(bankName.DefaultBranchCode))
                {
                    BranchModel.BankAccount.BranchCode = bankName.DefaultBranchCode;
                }
            }
        }
    }

    // Helper methods for email and phone management
    private string GetPrimaryEmail()
    {
        var primaryEmail = BranchModel.EmailAddresses?.FirstOrDefault(e => e.IsPrimary);
        return primaryEmail?.EmailAddress ?? string.Empty;
    }

    private string GetPrimaryPhone()
    {
        var primaryPhone = BranchModel.ContactNumbers?.FirstOrDefault(c => c.IsPrimary);
        return primaryPhone?.Number ?? string.Empty;
    }

    private void UpdatePrimaryEmail(string value)
    {
        if (BranchModel.EmailAddresses == null)
        {
            BranchModel.EmailAddresses = new List<Email>();
        }

        var primaryEmail = BranchModel.EmailAddresses.FirstOrDefault(e => e.IsPrimary);

        if (primaryEmail != null)
        {
            primaryEmail.EmailAddress = value;
            primaryEmail.UpdatedDate = DateTime.Now;
        }
        else if (!string.IsNullOrEmpty(value))
        {
            var newEmail = new Email
                {
                    EmailAddress = value,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Branch",
                    CreatedOn = DateTime.Now
                };

            if (BranchModel.Id > 0)
            {
                newEmail.SetRelatedEntity("Branch", BranchModel.Id);
            }

            BranchModel.EmailAddresses.Add(newEmail);
        }
    }

    private void UpdatePrimaryPhone(string value)
    {
        if (BranchModel.ContactNumbers == null)
        {
            BranchModel.ContactNumbers = new List<ContactNumber>();
        }

        var primaryPhone = BranchModel.ContactNumbers.FirstOrDefault(c => c.IsPrimary);

        if (primaryPhone != null)
        {
            primaryPhone.Number = value;
            primaryPhone.UpdatedDate = DateTime.Now;
        }
        else if (!string.IsNullOrEmpty(value))
        {
            var newPhone = new ContactNumber
                {
                    Number = value,
                    ContactNumberTypeId = contactNumberTypes?.FirstOrDefault()?.Id ?? 1,
                    IsPrimary = true,
                    IsActive = true,
                    RelatedEntityType = "Branch",
                    CreatedOn = DateTime.Now
                };

            if (BranchModel.Id > 0)
            {
                newPhone.SetRelatedEntity("Branch", BranchModel.Id);
            }

            BranchModel.ContactNumbers.Add(newPhone);
        }
    }

    private void AddEmail()
    {
        if (BranchModel.EmailAddresses == null)
        {
            BranchModel.EmailAddresses = new List<Email>();
        }

        BranchModel.EmailAddresses.Add(new Email
            {
                IsPrimary = false,
                IsActive = true,
                RelatedEntityType = "Branch",
                CreatedOn = DateTime.Now
            });
    }

    private void RemoveEmail(Email email)
    {
        if (BranchModel.EmailAddresses != null)
        {
            BranchModel.EmailAddresses.Remove(email);
        }
    }

    private void UpdateEmailAddress(Email email, string value)
    {
        email.EmailAddress = value;
    }

    private void UpdateEmailDescription(Email email, string value)
    {
        email.Description = value;
    }

    private void AddPhone()
    {
        if (BranchModel.ContactNumbers == null)
        {
            BranchModel.ContactNumbers = new List<ContactNumber>();
        }

        BranchModel.ContactNumbers.Add(new ContactNumber
            {
                ContactNumberTypeId = contactNumberTypes?.FirstOrDefault()?.Id ?? 1,
                IsPrimary = false,
                IsActive = true,
                RelatedEntityType = "Branch",
                CreatedOn = DateTime.Now
            });
    }

    private void RemovePhone(ContactNumber phone)
    {
        if (BranchModel.ContactNumbers != null)
        {
            BranchModel.ContactNumbers.Remove(phone);
        }
    }

    private void UpdatePhoneNumber(ContactNumber phone, string value)
    {
        phone.Number = value;
    }

    private void UpdatePhoneTypeId(ContactNumber phone, string value)
    {
        if (int.TryParse(value, out var typeId))
        {
            phone.ContactNumberTypeId = typeId;
        }
    }

    private void UpdatePhoneDescription(ContactNumber phone, string value)
    {
        phone.Description = value;
    }

    // Logo handling methods with SfUploader implementation
    private void ShowUploadDialog()
    {
        uploadError = string.Empty;
        logoFile = null;
        previewImageData = null;
        resizedImageData = null;
        showLogoUploadDialog = true;
    }

    private void CloseUploadDialog()
    {
        showLogoUploadDialog = false;
        logoFile = null;
        previewImageData = null;
        resizedImageData = null;
        uploadError = string.Empty;
    }

    // New method for SfUploader
    private async Task OnLogoFileSelected(UploadChangeEventArgs args)
    {
        uploadError = string.Empty;
        
        if (args.Files == null || args.Files.Count == 0)
        {
            logoFile = null;
            previewImageData = null;
            resizedImageData = null;
            return;
        }
        
        var file = args.Files[0];
        logoFile = file.File;
        logoContentType = file.FileInfo.MimeContentType;

        if (logoFile.Size > maxFileSize)
        {
            uploadError = "File size exceeds 5MB limit";
            logoFile = null;
            previewImageData = null;
            resizedImageData = null;
            return;
        }

        // Validate file type
        if (!logoContentType.StartsWith("image/"))
        {
            uploadError = "Please select an image file";
            logoFile = null;
            previewImageData = null;
            resizedImageData = null;
            return;
        }

        try
        {
            // Resize the image before upload
            var resizedFile = await logoFile.RequestImageFileAsync(logoContentType, logoTargetWidth, logoTargetHeight);
            
            // Create a buffer for the resized image
            resizedImageData = new byte[resizedFile.Size];
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(resizedImageData);
            }
            
            // Generate a preview image as base64
            previewImageData = $"data:{logoContentType};base64,{Convert.ToBase64String(resizedImageData)}";
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            uploadError = $"Error processing image: {ex.Message}";
            logoFile = null;
            previewImageData = null;
            resizedImageData = null;
        }
    }

    // Updated method to use the resized image
    private async Task UploadLogo()
    {
        if (logoFile == null || resizedImageData == null)
        {
            uploadError = "Please select a logo file to upload";
            return;
        }

        try
        {
            isUploading = true;
            uploadProgress = 0;
            StateHasChanged();

            // Create a unique filename
            var fileName = $"branch-logo-{BranchModel.Id}-{DateTime.Now:yyyyMMddHHmmss}{Path.GetExtension(logoFile.Name)}";

            // Update progress as we prepare the upload
            uploadProgress = 30;
            StateHasChanged();

            // Use the CDN service to upload the resized file
            using var stream = new MemoryStream(resizedImageData);
            var url = await CdnService.UploadFileAsync(
                stream,
                fileName,
                logoContentType,
                "logos",
                BranchModel.Id > 0 ? BranchModel.Id.ToString() : ""
            );

            uploadProgress = 80;
            StateHasChanged();

            if (!string.IsNullOrEmpty(url))
            {
                // Get the file metadata
                var metadata = await CdnService.GetFileMetadataAsync(url);

                if (metadata != null)
                {
                    // Update the branch model with the new logo
                    BranchModel.MainLogoId = metadata.Id;
                    BranchModel.MainLogo = metadata;

                    uploadProgress = 100;
                    ToastService.ShowSuccess("Logo uploaded successfully", "Success");
                    showLogoUploadDialog = false;
                }
                else
                {
                    uploadError = "Failed to retrieve uploaded file metadata";
                }
            }
            else
            {
                uploadError = "Failed to upload logo";
            }
        }
        catch (Exception ex)
        {
            uploadError = $"Error uploading logo: {ex.Message}";
            ToastService.ShowError(uploadError, "Error");
        }
        finally
        {
            isUploading = false;
            uploadProgress = 0;
            StateHasChanged();
        }
    }

    private async Task RemoveLogo()
    {
        try
        {
            if (BranchModel.MainLogoId.HasValue && BranchModel.MainLogo != null)
            {
                // Remove from CDN using the URL
                await CdnService.DeleteFileAsync(BranchModel.MainLogo.Url);

                // Update the model
                BranchModel.MainLogoId = null;
                BranchModel.MainLogo = null;

                ToastService.ShowSuccess("Logo removed successfully", "Success");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error removing logo: {ex.Message}", "Error");
        }
    }
}