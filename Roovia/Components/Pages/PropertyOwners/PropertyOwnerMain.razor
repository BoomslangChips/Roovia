@page "/beneficiaries"

@using Roovia.Models.PropertyOwner
@using Roovia.Interfaces
@using Roovia.Models.Users
@using Roovia.Services

@inject IPropertyOwner PropertyOwnerService

@rendermode InteractiveServer


<CardView CssClass="management-card">
    <HeaderActions>
        <div class="d-flex align-items-center justify-content-between">
            <h3>Owners Overview</h3>
            <RVButton ButtonType="primary" IconLeft="fa-light fa-plus" Text="Add Owner" OnClick="AddPropertyOwner" />
        </div>
        <div class="search-bar mt-2">
            <input type="text" placeholder="Search property owners..." class="form-control" style="max-width: 300px;" @bind="searchTerm" />
        </div>
    </HeaderActions>
    <ChildContent>
        @if (FilteredPropertyOwners.Any())
        {
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>First Name</th>
                            <th>Last Name</th>
                            <th>ID Number</th>
                            <th>VAT Number</th>
                            <th>Mobile Number</th>
                            <th>Email</th>
                            <th>Date Added</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var owner in FilteredPropertyOwners)
                        {
                            <tr>
                                <td>@owner.FirstName</td>
                                <td>@owner.LastName</td>
                                <td>@owner.IdNumber</td>
                                <td>@owner.VatNumber</td>
                                <td>@owner.MobileNumber</td>
                                <td>@owner.EmailAddress</td>
                                <td>@owner.CreatedOn.ToShortDateString()</td>
                                <td>
@*                                     <RVButton ButtonType="outline" Size="sm" IconLeft="fa-light fa-eye" Text="View" OnClick="() => ViewPropertyOwner(owner)" />
 *@                                    <RVButton ButtonType="outline" Size="sm" IconLeft="fa-light fa-edit" Text="Edit" OnClick="() => EditPropertyOwner(owner)" CssClass="ms-2" />
                                    <RVButton ButtonType="outline" Size="sm" IconLeft="fa-light fa-trash" Text="Delete" OnClick="() => DeletePropertyOwner(owner)" CssClass="ms-2" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <EmptyState Title="No property owners available" 
                        Description="There are no property owners to display at this time." 
                        Icon="fa-light fa-user-slash" 
                        ActionText="Refresh" 
                        OnAction="LoadPropertyOwnersAsync" />
        }
    </ChildContent>
</CardView>

@if (showPropertyOwnerModal)
{
    <CascadingValue TValue="ApplicationUser" Value="CurrentUser">
        <PropertyOwnerModal OnModalClosed="ModalClosed"></PropertyOwnerModal>
    </CascadingValue>
}

@if (showEditModal)
{
    <CascadingValue TValue="ApplicationUser" Value="CurrentUser">
        <CascadingValue TValue="PropertyOwner" Value="selectedOwner">
            <PropertyOwnerEditModal OnModalClosed="EditModalClosed"></PropertyOwnerEditModal>
        </CascadingValue>
    </CascadingValue>
}


@code {
    private string searchTerm = string.Empty;
    bool showPropertyOwnerModal = false;
    bool showEditModal = false;
    PropertyOwner selectedOwner = new();
    private List<Roovia.Models.PropertyOwner.PropertyOwner> propertyOwners = new List<PropertyOwner>();

    [Inject]
    public ToastService ToastService { get; set; }

    [CascadingParameter]
    private ApplicationUser? CurrentUser { get; set; }


    [Inject]
    public IUser UserService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser == null)
        {
            await GetLoggedInUser();
        }
        await LoadPropertyOwnersAsync();
    }

    private async Task LoadPropertyOwnersAsync()
    {
        if (CurrentUser != null)
        {
            var response = await PropertyOwnerService.GetAllPropertyOwners(CurrentUser.CompanyId.Value);
            if (response.ResponseInfo.Success)
            {
                propertyOwners = response.Response as List<PropertyOwner>;
            }
            else
            {
                Console.WriteLine($"Error loading property owners: {response.ResponseInfo.Message}");
            }
        }

    }

    private IEnumerable<PropertyOwner> FilteredPropertyOwners =>
        propertyOwners.Where(o => string.IsNullOrEmpty(searchTerm) ||
                                  o.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                  o.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private void ViewPropertyOwner(PropertyOwner owner)
    {
        Console.WriteLine($"Viewing property owner: {owner.FirstName} {owner.LastName}");
    }

    private async Task EditPropertyOwner(PropertyOwner owner)
    {
        selectedOwner = owner;
        showEditModal = true;
        await InvokeAsync(() => StateHasChanged());
    }

    private void DeletePropertyOwner(PropertyOwner owner)
    {
        propertyOwners.Remove(owner);
        Console.WriteLine($"Deleted property owner: {owner.FirstName} {owner.LastName}");
    }

    private async Task AddPropertyOwner()
    {
        showPropertyOwnerModal = true;
        await InvokeAsync(StateHasChanged);
    }


    public async Task GetLoggedInUser()
    {
        var userResponse = await UserService.GetAuthenticatedUserInfo();
        if (userResponse.ResponseInfo.Success)
        {
            CurrentUser = userResponse.Response as ApplicationUser;
        }
        else
        {
            Console.WriteLine($"Error loading user: {userResponse.ResponseInfo.Message}");
        }
    }

    public async Task ModalClosed()
    {
        showPropertyOwnerModal = false;
        await LoadPropertyOwnersAsync();
    }

    public async Task EditModalClosed()
    {
        showEditModal = false;
        await LoadPropertyOwnersAsync();
    }
}
