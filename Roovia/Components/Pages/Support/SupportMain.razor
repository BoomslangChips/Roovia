@page "/support"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using Roovia.Data
@using Roovia.Interfaces
@using Roovia.Models.BusinessModels
@using Roovia.Services
@using Roovia.Services.General
@using System.Security.Claims
@using static Roovia.Models.SupportModels
@inject IUser UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ToastService ToastService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ISupportService SupportService
@rendermode InteractiveServer

<div class="pm-page">
    <div class="admin-header-section">
        <div class="admin-header-content">
            <div class="header-text-content">
                <div class="header-icon">
                    <i class="fa-light fa-headset"></i>
                </div>
                <div class="header-title-group">
                    <h1 class="header-title">Support Center</h1>
                    <p class="header-subtitle">Get help, submit tickets, and find answers to common questions</p>
                </div>
            </div>
            <div class="header-action-panel">
                <!-- Optionally add header actions here -->
            </div>
        </div>
    </div>

    <div class="pm-main-container">
        <!-- Search Bar -->
        <div class="pm-support-search">
            <div class="pm-search-container">
                <i class="fa-light fa-magnifying-glass pm-search-icon"></i>
                <input type="text"
                       class="pm-search-input"
                       placeholder="Search FAQs, documentation and knowledge base..."
                       @bind-value="searchText"
                       @bind-value:event="oninput"
                       @onkeyup="SearchFaqs" style="border-radius: 16px; width: 26em; padding: 7px; border: 1px solid #e5eeee;" />
                @if (!string.IsNullOrEmpty(searchText))
                {
                    <button class="pm-search-clear" @onclick="ClearSearch">
                        <i class="fa-light fa-times"></i>
                    </button>
                }
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="pm-support-section">
            <div class="pm-section-header">
                <h2><i class="fa-light fa-bolt"></i> Quick Actions</h2>
            </div>
            <div class="pm-quick-actions">
                <div class="pm-action-card" @onclick="CreateNewTicket">
                    <div class="pm-action-icon">
                        <i class="fa-light fa-ticket-simple"></i>
                    </div>
                    <div class="pm-action-text">Submit a Ticket</div>
                </div>
                <div class="pm-action-card" @onclick="ViewAllTickets">
                    <div class="pm-action-icon">
                        <i class="fa-light fa-clipboard-list"></i>
                    </div>
                    <div class="pm-action-text">My Tickets</div>
                </div>
                @if (currentUser != null && currentUser.Role != null && currentUser.Role.Value >= SystemRole.SystemAdministrator)
                {
                    <div class="pm-action-card" @onclick="OpenAdminTicketsModal">
                        <div class="pm-action-icon">
                            <i class="fa-light fa-list-check"></i>
                        </div>
                        <div class="pm-action-text">View All Tickets</div>
                    </div>
                }
                <div class="pm-action-card" @onclick="ViewKnowledgeBase">
                    <div class="pm-action-icon">
                        <i class="fa-light fa-book"></i>
                    </div>
                    <div class="pm-action-text">Knowledge Base</div>
                </div>
                <div class="pm-action-card" @onclick="() => NavigateToDocumentation()">
                    <div class="pm-action-icon">
                        <i class="fa-light fa-file-lines"></i>
                    </div>
                    <div class="pm-action-text">Documentation</div>
                </div>

            </div>
        </div>

        <!-- FAQs Accordion -->
        <div class="pm-support-section">
            <div class="pm-section-header">
                <h2><i class="fa-light fa-circle-question"></i> Frequently Asked Questions</h2>
                @if (!string.IsNullOrEmpty(selectedCategory) && selectedCategory != "all")
                {
                    <div class="pm-selected-category">
                        <span>Category: @GetCategoryName(selectedCategory)</span>
                        <button class="pm-category-clear">
                            <i class="fa-light fa-times"></i>
                        </button>
                    </div>
                }
                <div class="pm-category-tabs">
                    <button class="@(selectedCategory == "all" ? "active" : "")" @onclick="@(() => SelectCategory("all"))">All</button>
                    <button class="@(selectedCategory == "account" ? "active" : "")" @onclick="@(() => SelectCategory("account"))">Account</button>
                    <button class="@(selectedCategory == "properties" ? "active" : "")" @onclick="@(() => SelectCategory("properties"))">Properties</button>
                    <button class="@(selectedCategory == "tenants" ? "active" : "")" @onclick="@(() => SelectCategory("tenants"))">Tenants</button>
                    <button class="@(selectedCategory == "financials" ? "active" : "")" @onclick="@(() => SelectCategory("financials"))">Financials</button>
                    <button class="@(selectedCategory == "technical" ? "active" : "")" @onclick="@(() => SelectCategory("technical"))">Technical</button>
                </div>
            </div>

            @if (!filteredFaqs.Any())
            {
                <div class="pm-empty-state">
                    <div class="pm-empty-icon">
                        <i class="fa-light fa-circle-question"></i>
                    </div>
                    <h3 class="pm-empty-title">No FAQs Found</h3>
                    <p class="pm-empty-description">No FAQs match your current search criteria.</p>
                    <button class="pm-custom-btn pm-custom-btn-primary" @onclick="ClearSearch">
                        <i class="fa-light fa-filter-circle-xmark pm-me-2"></i> Clear Search
                    </button>
                </div>
            }
            else
            {
                <div class="pm-faq-container">
                    @foreach (var faq in filteredFaqs)
                    {
                        <div class="pm-faq-item @(expandedFaqId == faq.Id ? "expanded" : "")">
                            <div class="pm-faq-question" @onclick="() => ToggleFaq(faq.Id)">
                                <span>@faq.Question</span>
                                <i class="fa-light @(expandedFaqId == faq.Id ? "fa-chevron-up" : "fa-chevron-down")"></i>
                            </div>
                            <div class="pm-faq-answer">
                                <p>@((MarkupString)faq.Answer)</p>
                                @if (!string.IsNullOrEmpty(faq.RelatedLink))
                                {
                                    <a href="@faq.RelatedLink" class="pm-faq-link" target="_blank">
                                        Learn more <i class="fa-light fa-external-link"></i>
                                    </a>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>

    </div>
</div>

@if (showUserTicketsModal)
{
    <div class="pm-modal-backdrop pm-blur-backdrop" @onclick="() => showUserTicketsModal = false"></div>
    <div class="pm-ticket-modal pm-ticket-modal-lg">
        <div class="pm-modal-header">
            <h3><i class="fa-light fa-clipboard-list"></i> My Tickets</h3>
            <button class="pm-modal-close-btn" @onclick="() => showUserTicketsModal = false">
                <i class="fa-light fa-times"></i>
            </button>
        </div>
        <div class="pm-modal-body pm-tickets-modal-body">
            @if (userTickets != null && userTickets.Any())
            {
                <div class="pm-ticket-list">
                    @foreach (var ticket in userTickets)
                    {
                        <div class="pm-ticket-card">
                            <div class="pm-ticket-card-header">
                                <div class="pm-ticket-number">
                                    <span class="pm-ticket-label">Ticket #</span> <span class="pm-ticket-value">@ticket.TicketNumber</span>
                                </div>
                                <span class="pm-ticket-status pm-status-@ticket.TicketStatus.ToString().ToLower()">@ticket.TicketStatus.ToString()</span>
                            </div>
                            <div class="pm-ticket-card-body">
                                <div class="pm-ticket-info">
                                    <div>
                                        <span class="pm-ticket-label">Subject:</span>
                                        <span class="pm-ticket-value">@ticket.Subject</span>
                                    </div>
                                    <div>
                                        <span class="pm-ticket-label">Category:</span>
                                        <span class="pm-ticket-value">@GetCategoryName(ticket.Category)</span>
                                    </div>
                                    <div>
                                        <span class="pm-ticket-label">Created:</span>
                                        <span class="pm-ticket-value">@ticket.CreatedDate.ToString("g")</span>
                                    </div>
                                </div>
                                <div class="pm-ticket-actions">
                                    <button class="pm-custom-btn pm-custom-btn-outline pm-ticket-comment-btn" @onclick="() => ToggleCommentBox(ticket.TicketNumber)">
                                        <i class="fa-light fa-comment-lines"></i> Add Comment
                                    </button>
                                    <button class="pm-custom-btn pm-custom-btn-outline" @onclick="() => OpenTicketCommentsView(ticket)">
                                        <i class="fa-light fa-comment-alt"></i> View Comments
                                    </button>
                                </div>
                            </div>
                            @if (commentBoxOpenFor == ticket.TicketNumber)
                            {
                                <div class="pm-ticket-comment-box">
                                    <textarea class="pm-form-textarea" rows="3" placeholder="Write your comment..." @bind="newCommentText"></textarea>
                                    <div class="pm-ticket-comment-actions">
                                        <button class="pm-custom-btn pm-custom-btn-primary" @onclick="() => SubmitTicketComment(ticket.TicketNumber)">
                                            <i class="fa-light fa-paper-plane pm-me-2"></i> Submit
                                        </button>
                                        <button class="pm-custom-btn pm-custom-btn-outline" @onclick="CloseCommentBox">
                                            Cancel
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="pm-empty-state">
                    <div class="pm-empty-icon">
                        <i class="fa-light fa-clipboard-list"></i>
                    </div>
                    <h3 class="pm-empty-title">No Tickets Found</h3>
                    <p class="pm-empty-description">You have not submitted any tickets.</p>
                </div>
            }
        </div>
        <div class="pm-modal-footer">
            <button class="pm-custom-btn pm-custom-btn-outline" @onclick="() => showUserTicketsModal = false">Close</button>
        </div>
    </div>
}

@if (showNewTicketModal)
{
    <div class="pm-modal-backdrop pm-blur-backdrop" @onclick="() => showNewTicketModal = false"></div>
    <div class="pm-ticket-modal">
        <div class="pm-modal-header">
            <h3><i class="fa-light fa-ticket"></i> Create New Support Ticket</h3>
            <button class="pm-modal-close-btn" @onclick="() => showNewTicketModal = false">
                <i class="fa-light fa-times"></i>
            </button>
        </div>
        <div class="pm-modal-body">
            <div class="pm-form-group">
                <label for="ticket-subject">Subject</label>
                <input type="text" id="ticket-subject" class="pm-form-input" @bind="newTicket.Subject" placeholder="Briefly describe your issue" />
            </div>
            <div class="pm-form-group">
                <label for="ticket-category">Category</label>
                <select id="ticket-category" class="pm-form-select" @bind="newTicket.Category">
                    <option value="">Select a category</option>
                    <option value="account">Account & Billing</option>
                    <option value="properties">Property Management</option>
                    <option value="tenants">Tenant Management</option>
                    <option value="financials">Financials & Payments</option>
                    <option value="technical">Technical Issues</option>
                    <option value="other">Other</option>
                </select>
            </div>
            <div class="pm-form-group">
                <label for="ticket-priority">Priority</label>
                <select id="ticket-priority" class="pm-form-select" @bind="newTicket.Priority">
                    <option value="Low">Low</option>
                    <option value="Medium">Medium</option>
                    <option value="High">High</option>
                    <option value="Urgent">Urgent</option>
                </select>
            </div>
            <div class="pm-form-group">
                <label for="ticket-description">Description</label>
                <textarea id="ticket-description" class="pm-form-textarea" rows="5" @bind="newTicket.Description" placeholder="Please provide details about your issue..."></textarea>
            </div>
            <div class="pm-form-group">
                <label>Attachments</label>
                <div class="pm-file-upload">
                    <label for="ticket-file" class="pm-file-upload-label">
                        <i class="fa-light fa-cloud-arrow-up"></i>
                        <span>Click to upload files</span>
                        <input type="file" id="ticket-file" hidden multiple />
                    </label>
                </div>
                @if (uploadedFiles.Any())
                {
                    <div class="pm-file-list">
                        @foreach (var file in uploadedFiles)
                        {
                            <div class="pm-file-item">
                                <i class="fa-light fa-file-lines"></i>
                                <span>@file.Name</span>
                                <button class="pm-file-remove" @onclick="() => RemoveFile(file)">
                                    <i class="fa-light fa-times"></i>
                                </button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="pm-modal-footer">
            <button class="pm-custom-btn pm-custom-btn-outline" @onclick="() => showNewTicketModal = false">Cancel</button>
            <button class="pm-custom-btn pm-custom-btn-primary" @onclick="SubmitTicket">
                <i class="fa-light fa-paper-plane pm-me-2"></i> Submit Ticket
            </button>
        </div>
    </div>
}

@if (showTicketCommentsModal)
{
    <div class="pm-modal-backdrop pm-blur-backdrop" @onclick="CloseTicketCommentsView"></div>
    <div class="pm-ticket-modal pm-ticket-modal-lg">
        <div class="pm-modal-header">
            <h3><i class="fa-light fa-comment-lines"></i> Ticket Comments - @selectedTicketCommentNumber</h3>
            <button class="pm-modal-close-btn" @onclick="CloseTicketCommentsView">
                <i class="fa-light fa-times"></i>
            </button>
        </div>
        <div class="pm-modal-body">
            @if (ticketComments.Any())
            {
                <div class="pm-comment-list">
                    @foreach (var comment in ticketComments)
                    {
                        <div class="pm-ticket-card">
                            <div class="pm-ticket-card-header">
                                <span class="pm-ticket-label">Commented:</span>
                                <span class="pm-ticket-value">@comment.CreatedDate.ToString("g")</span>
                            </div>
                            <div class="pm-ticket-card-body">
                                <p>@comment.Comment</p>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="pm-empty-state">
                    <div class="pm-empty-icon">
                        <i class="fa-light fa-comment-alt"></i>
                    </div>
                    <h3 class="pm-empty-title">No Comments Found</h3>
                    <p class="pm-empty-description">There are no comments for this ticket.</p>
                </div>
            }
            <div class="pm-ticket-comment-box" style="margin-top: 1rem;">
                <textarea class="pm-form-textarea" rows="3" placeholder="Write a comment..." @bind="newCommentTextForModal"></textarea>
                <div class="pm-ticket-comment-actions" style="margin-top: 0.5rem;">
                    <button class="pm-custom-btn pm-custom-btn-primary" @onclick="SubmitModalComment">
                        <i class="fa-light fa-paper-plane pm-me-2"></i> Submit
                    </button>
                    <button class="pm-custom-btn pm-custom-btn-outline" @onclick="CloseTicketCommentsView">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
        <div class="pm-modal-footer">
            <button class="pm-custom-btn pm-custom-btn-outline" @onclick="CloseTicketCommentsView">Close</button>
        </div>
    </div>
}



@if (showAdminTicketsModal)
{
    @if (showAdminTicketsModal)
    {
        <div class="pm-modal-backdrop pm-blur-backdrop" @onclick="() => showAdminTicketsModal = false"></div>
        <div class="pm-ticket-modal pm-ticket-modal-lg enhanced-modal">
            <div class="pm-modal-header">
                <h3><i class="fa-light fa-list-check"></i> All Tickets - Admin View</h3>
                <button class="pm-modal-close-btn" @onclick="() => showAdminTicketsModal = false">
                    <i class="fa-light fa-times"></i>
                </button>
            </div>
            <div class="pm-modal-body">
                @if (allTickets != null && allTickets.Any())
                {
                    <div class="pm-ticket-list">
                        @foreach (var ticket in allTickets)
                        {
                            <div class="pm-ticket-card enhanced-card">
                                <div class="pm-ticket-card-header">
                                    <div class="pm-ticket-number">
                                        <span class="pm-ticket-label">Ticket #</span>
                                        <span class="pm-ticket-value">@ticket.TicketNumber</span>
                                    </div>
                                    <div>
                                        <select class="pm-form-select pm-dropdown" @onchange="(e) => ChangeTicketStatus(ticket, e.Value.ToString())" value="@ticket.TicketStatus.ToString()">
                                            <option value="New">New</option>
                                            <option value="Pending">Pending</option>
                                            <option value="Closed">Closed</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="pm-ticket-card-body">
                                    <div>
                                        <span class="pm-ticket-label">Subject: </span>
                                        <span class="pm-ticket-value">@ticket.Subject</span>
                                    </div>
                                    <div>
                                        <span class="pm-ticket-label">Category: </span>
                                        <span class="pm-ticket-value">@GetCategoryName(ticket.Category)</span>
                                    </div>
                                    <div>
                                        <span class="pm-ticket-label">Created: </span>
                                        <span class="pm-ticket-value">@ticket.CreatedDate.ToString("g")</span>
                                    </div>
                                </div>
                                <div>
                                    <button class="pm-custom-btn pm-custom-btn-outline" @onclick="() => ToggleAdminCommentBox(ticket.TicketNumber)">
                                        <i class="fa-light fa-comment-lines"></i> Add Comment
                                    </button>
                                </div>
                                @if (adminCommentBoxOpenFor == ticket.TicketNumber)
                                {
                                    <div class="pm-ticket-comment-box">
                                        <textarea class="pm-form-textarea" rows="3" placeholder="Write your comment..." @bind="newAdminCommentText"></textarea>
                                        <div class="pm-ticket-comment-actions">
                                            <button class="pm-custom-btn pm-custom-btn-primary" @onclick="() => SubmitAdminTicketComment(ticket)">
                                                <i class="fa-light fa-paper-plane pm-me-2"></i> Submit
                                            </button>
                                            <button class="pm-custom-btn pm-custom-btn-outline" @onclick="CloseAdminCommentBox">
                                                Cancel
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="pm-empty-state">
                        <div class="pm-empty-icon">
                            <i class="fa-light fa-clipboard-list"></i>
                        </div>
                        <h3 class="pm-empty-title">No Tickets Found</h3>
                    </div>
                }
            </div>
            <div class="pm-modal-footer">
                <button class="pm-custom-btn pm-custom-btn-outline" @onclick="() => showAdminTicketsModal = false">Close</button>
            </div>
        </div>
    }

    
}


@code {
    // User and Authentication
    private ApplicationUser currentUser;
    private int currentUserCompanyId;

    // UI State
    private bool isLoading = true;
    private bool showOptionsMenu = false;
    private string searchText = "";
    private string selectedCategory = "all";
    private int? expandedFaqId = null;
    private bool showNewTicketModal = false;
    private bool showUserTicketsModal = false;
    private bool showTicketCommentsModal = false;

    // Tickets
    private List<SupportTicket> allTickets = new();
    private List<SupportTicket> userTickets = new();
    private int activeTickets = 3;
    private int supportHistory = 12;
    private int knowledgeBaseArticles = 42;

    // New Ticket
    private SupportTicket newTicket = new();
    private List<UploadedFile> uploadedFiles = new();

    // FAQs
    private List<FaqItem> faqItems = new();
    private List<FaqItem> filteredFaqs = new();

    // Comments (for inline comment box)
    private string newCommentText;

    // Ticket Comments Modal State
    private string selectedTicketCommentNumber;
    private List<TicketComment> ticketComments = new();
    private string newCommentTextForModal = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadSupportData();
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.Claims.Where(x => x.Type == ClaimTypes.NameIdentifier)?.FirstOrDefault()?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                var userResult = await UserService.GetUserById(userId);
                if (userResult.ResponseInfo.Success)
                {
                    currentUser = userResult.Response as ApplicationUser;
                    currentUserCompanyId = currentUser?.CompanyId ?? 0;
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load user data: {ex.Message}", "Error");
        }
    }

    private async Task LoadSupportData()
    {
        isLoading = true;

        try
        {
            // In a real implementation, you would load this data from services

            // Load FAQs
            faqItems = new List<FaqItem>
            {
                new FaqItem {
                    Id = 1,
                    Question = "How do I add a new property to the system?",
                    Answer = "To add a new property, navigate to the <strong>Properties</strong> page and click on the <strong>Add Property</strong> button in the top right corner. Fill in the required details and click Save.",
                    Category = "properties",
                },
                new FaqItem {
                    Id = 2,
                    Question = "How do I create a new tenant account?",
                    Answer = "To create a new tenant, go to the <strong>Tenants</strong> page and click on <strong>Add Tenant</strong>. Fill in the tenant's personal details, contact information, and assign them to a property.",
                    Category = "tenants",
                },
                new FaqItem {
                    Id = 3,
                    Question = "How can I generate financial reports?",
                    Answer = "Navigate to the <strong>Reports</strong> section and select <strong>Financial Reports</strong>. From there, you can choose the type of report, date range, and properties to include.",
                    Category = "financials",
                },
                new FaqItem {
                    Id = 4,
                    Question = "How do I reset my password?",
                    Answer = "Click on the <strong>Forgot Password</strong> link on the login page. Enter your email address and follow the instructions sent to your email to reset your password.",
                    Category = "account",
                },
                new FaqItem {
                    Id = 5,
                    Question = "Can I customize the dashboard?",
                    Answer = "Yes, you can customize your dashboard by clicking on the <strong>Customize</strong> button in the top-right corner of the dashboard. You can add, remove, or rearrange widgets based on your preferences.",
                    Category = "account",
                },
                new FaqItem {
                    Id = 6,
                    Question = "How do I process rent payments?",
                    Answer = "Go to the <strong>Payments</strong> section, select the property and tenant, then click on <strong>Record Payment</strong>. Enter the payment details, method, and date, then save the transaction.",
                    Category = "financials",
                },
                new FaqItem {
                    Id = 7,
                    Question = "What browser is best for using this system?",
                    Answer = "Our system works best with modern browsers such as Chrome, Firefox, Edge, and Safari. For optimal performance, we recommend keeping your browser updated to the latest version.",
                    Category = "technical",
                },
                new FaqItem {
                    Id = 8,
                    Question = "How do I archive a property?",
                    Answer = "To archive a property, go to the property details page and click the menu (three dots) in the top-right corner. Select <strong>Archive Property</strong> from the dropdown menu and confirm your action.",
                    Category = "properties",
                }
            };

            FilterFaqs();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load support data: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterFaqs()
    {
        var result = faqItems;

        // Filter by category
        if (!string.IsNullOrEmpty(selectedCategory) && selectedCategory != "all")
        {
            result = result.Where(f => f.Category == selectedCategory).ToList();
        }

        // Filter by search text
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            string search = searchText.ToLower();
            result = result.Where(f =>
                f.Question.ToLower().Contains(search) ||
                f.Answer.ToLower().Contains(search)
            ).ToList();
        }

        filteredFaqs = result;
    }

    private void ToggleOptionsMenu()
    {
        showOptionsMenu = !showOptionsMenu;
    }

    private void SelectCategory(string category)
    {
        selectedCategory = category;
        FilterFaqs();
    }

    private void ToggleFaq(int id)
    {
        if (expandedFaqId == id)
        {
            expandedFaqId = null;
        }
        else
        {
            expandedFaqId = id;
        }
    }

    private void SearchFaqs()
    {
        FilterFaqs();
    }

    private void ClearSearch()
    {
        searchText = "";
        FilterFaqs();
    }

    private void CreateNewTicket()
    {
        newTicket = new SupportTicket
            {
                TicketStatus = TicketStatuses.New,
                CreatedDate = DateTime.Now,
                Priority = "Medium"
            };
        uploadedFiles.Clear();
        showNewTicketModal = true;
    }

    private void HandleFileUpload(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(10))
        {
            uploadedFiles.Add(new UploadedFile
                {
                    Name = file.Name,
                    ContentType = file.ContentType,
                });
        }
    }

    private void RemoveFile(UploadedFile file)
    {
        uploadedFiles.Remove(file);
    }

    private async Task SubmitTicket()
    {
        if (string.IsNullOrWhiteSpace(newTicket.Subject))
        {
            ToastService.ShowError("Please enter a subject for your ticket", "Validation Error");
            return;
        }

        if (string.IsNullOrWhiteSpace(newTicket.Category))
        {
            ToastService.ShowError("Please select a category for your ticket", "Validation Error");
            return;
        }

        if (string.IsNullOrWhiteSpace(newTicket.Description))
        {
            ToastService.ShowError("Please provide a description of your issue", "Validation Error");
            return;
        }

        newTicket.CompanyId = currentUser.CompanyId.Value;
        newTicket.UserId = Guid.Parse(currentUser.Id);
        newTicket.TicketNumber = Guid.NewGuid().ToString().Substring(0, 6);
        newTicket.TicketStatus = TicketStatuses.New;
        var ticketCreateResponse = await SupportService.CreateSupportTicketAsync(newTicket);
        if (ticketCreateResponse.ResponseInfo.Success)
        {
            ToastService.ShowSuccess("Ticket created successfully!", "Success");
        }

        showNewTicketModal = false;
    }

    private async Task ViewAllTickets()
    {
        var allTicketsResponse = await SupportService.GetSupportTicketsByCompanyIdAsync(currentUser.CompanyId.Value);
        if (allTicketsResponse.ResponseInfo.Success)
        {
            allTickets = allTicketsResponse.Response as List<SupportTicket>;
            userTickets = allTickets.Where(x => x.UserId == Guid.Parse(currentUser.Id)).ToList();
            showUserTicketsModal = true;
        }
        else
        {
            ToastService.ShowError("Failed to load tickets", "Error");
            return;
        }
    }

    private void ViewActiveTickets()
    {
        NavigationManager.NavigateTo("/support/tickets?status=active");
    }

    private void ViewSupportHistory()
    {
        NavigationManager.NavigateTo("/support/history");
    }

    private void NavigateToDocumentation()
    {
        NavigationManager.NavigateTo("/documentation");
    }

    private void ViewKnowledgeBase()
    {
        NavigationManager.NavigateTo("/knowledge-base");
    }

    private void NavigateToKbArticle(string slug)
    {
        NavigationManager.NavigateTo($"/knowledge-base/{slug}");
    }

    private string GetCategoryName(string category)
    {
        return category switch
        {
            "account" => "Account & Billing",
            "properties" => "Property Management",
            "tenants" => "Tenant Management",
            "financials" => "Financials & Payments",
            "technical" => "Technical Issues",
            _ => "All Categories"
        };
    }

    private string GetTicketStatusString(TicketStatuses status)
    {
        return status switch
        {
            TicketStatuses.New => "New",
            TicketStatuses.Pending => "Pending",
            TicketStatuses.Closed => "Closed",
            _ => "Unknown"
        };
    }

    private string GetTicketStatusCss(TicketStatuses status)
    {
        return status switch
        {
            TicketStatuses.New => "new",
            TicketStatuses.Pending => "pending",
            TicketStatuses.Closed => "closed",
            _ => "unknown"
        };
    }

    private async Task OpenTicketCommentsView(SupportTicket ticket)
    {
        var ticketCommentResponse = await SupportService.GetAllTicketCommentsAsync(ticket.Id);
        if (!ticketCommentResponse.ResponseInfo.Success)
        {
            ToastService.ShowError("Error fetching comments.", "Error!");
            return;
        }
        ticketComments = ((IEnumerable<TicketComment>?)ticketCommentResponse.Response)?.ToList()
            ?? new List<TicketComment>();
        selectedTicketCommentNumber = ticket.TicketNumber;
        showTicketCommentsModal = true;
    }

    private void CloseTicketCommentsView()
    {
        showTicketCommentsModal = false;
        newCommentTextForModal = "";
    }

    private async Task SubmitModalComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentTextForModal))
        {
            return;
        }
        ticketComments.Add(new TicketComment { Comment = newCommentTextForModal, CreatedDate = DateTime.Now });
        newCommentTextForModal = "";
        await Task.CompletedTask;
    }

    // Dummy implementations for inline comment functionality
    private void ToggleCommentBox(string ticketNumber)
    {
        commentBoxOpenFor = commentBoxOpenFor == ticketNumber ? null : ticketNumber;
    }

    private async Task SubmitTicketComment(string ticketNumber)
    {
        if (string.IsNullOrWhiteSpace(newCommentText))
        {
            ToastService.ShowError("Please enter a comment", "Validation Error");
            return;
        }
        ToastService.ShowSuccess("Comment submitted successfully", "Success");
        newCommentText = "";
        commentBoxOpenFor = null;
        await Task.CompletedTask;
    }

    private void CloseCommentBox()
    {
        commentBoxOpenFor = null;
        newCommentText = "";
    }

    // This variable determines which ticket's inline comment box is open.
    private string commentBoxOpenFor;

    private bool showAdminTicketsModal = false;
    private string adminCommentBoxOpenFor;
    private string newAdminCommentText = "";

    private async Task OpenAdminTicketsModal()
    {
        var allTicketsResponse = await SupportService.GetAllSupportTicketsAsync();
        if (allTicketsResponse.ResponseInfo.Success)
        {
            allTickets = allTicketsResponse.Response as List<SupportTicket>;
            showAdminTicketsModal = true;
        }
        else
        {
            ToastService.ShowError("Failed to load tickets", "Error");
        }
    }

    private void ToggleAdminCommentBox(string ticketNumber)
    {
        adminCommentBoxOpenFor = adminCommentBoxOpenFor == ticketNumber ? null : ticketNumber;
    }

    private void CloseAdminCommentBox()
    {
        adminCommentBoxOpenFor = null;
        newAdminCommentText = "";
    }

    private async Task SubmitAdminTicketComment(SupportTicket ticket)
    {
        if (string.IsNullOrWhiteSpace(newAdminCommentText))
        {
            ToastService.ShowError("Please enter a comment", "Validation Error");
            return;
        }
        // Add comment submission logic here.
        ToastService.ShowSuccess($"Comment added to Ticket #{ticket.TicketNumber}", "Success");
        newAdminCommentText = "";
        adminCommentBoxOpenFor = null;
        await Task.CompletedTask;
    }

    private async Task ChangeTicketStatus(SupportTicket ticket, string newStatus)
    {
        if (Enum.TryParse(newStatus, out TicketStatuses parsedStatus))
        {
            ticket.TicketStatus = parsedStatus;

            var ticketUpdateResponse = await SupportService.UpdateSupportTicketAsync(ticket);
            if (!ticketUpdateResponse.ResponseInfo.Success)
            {
                ToastService.ShowError("Error updating the ticket.", "Error!");
                return;
            }
            ToastService.ShowSuccess($"Ticket #{ticket.TicketNumber} status updated to {newStatus}", "Success");
            await Task.CompletedTask;
        }
        else
        {
            ToastService.ShowError("Invalid status", "Error");
        }
    }
}


<style>
    /* ====== Support Page Styles ====== */

    /* Support Layout */
    .pm-support-layout {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        margin-bottom: 2rem;
    }



    /* Category Tabs */
    .pm-category-tabs {
        display: flex;
        gap: 0.5rem;
        overflow-x: auto;
        padding-bottom: 0.25rem;
    }

        .pm-category-tabs button {
            background: none;
            border: none;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            border-radius: 20px;
            color: var(--text-secondary);
            cursor: pointer;
            white-space: nowrap;
            transition: all 0.2s ease;
        }

            .pm-category-tabs button:hover {
                background-color: var(--primary-lighter);
                color: var(--primary);
            }

            .pm-category-tabs button.active {
                background-color: var(--primary);
                color: white;
                font-weight: 500;
            }

    /* Support Section */
    .pm-support-section {
        background-color: var(--content-bg);
        border-radius: 12px;
        border: 1px solid var(--border-light);
        overflow: hidden;
        box-shadow: var(--shadow-sm);
        transition: box-shadow 0.3s ease;
        margin-bottom: 1.5rem;
    }

        .pm-support-section:hover {
            box-shadow: var(--shadow-md);
        }

    .pm-section-header {
        padding: 1.25rem;
        border-bottom: 1px solid var(--border-light);
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
        background-color: var(--subtle-bg);
    }

        .pm-section-header h2 {
            margin: 0;
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 0.75rem;
            flex: 1;
            min-width: 200px;
        }

            .pm-section-header h2 i {
                color: var(--primary);
            }

    .pm-selected-category {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.375rem 0.75rem;
        background-color: var(--primary-lighter);
        color: var(--primary);
        border-radius: 20px;
        font-size: 0.813rem;
        font-weight: 500;
        margin-right: auto;
    }

    .pm-category-clear {
        background: none;
        border: none;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--primary);
        cursor: pointer;
        transition: all 0.2s ease;
        padding: 0;
        font-size: 0.75rem;
    }

        .pm-category-clear:hover {
            background-color: var(--primary-light);
            border-radius: 50%;
        }

    /* Support Search */
    .pm-support-search {
        background-color: var(--content-bg);
        padding: 1.25rem;
        border-radius: 12px;
        border: 1px solid var(--border-light);
        box-shadow: var(--shadow-sm);
        margin-bottom: 1.5rem;
    }

    /* Quick Actions */
    .pm-quick-actions {
        display: flex;
        gap: 1rem;
        padding: 1.25rem;
        justify-content: space-around;
    }

    .pm-action-card {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 1.5rem 1rem;
        background-color: var(--subtle-bg);
        border-radius: 12px;
        border: 1px solid var(--border-light);
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: center;
        width: 20rem;
    }

        .pm-action-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-md);
            background-color: var(--primary-lighter);
        }

    .pm-action-icon {
        width: 56px;
        height: 56px;
        border-radius: 50%;
        background-color: var(--primary-light);
        color: var(--primary);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
    }

    .pm-action-card:hover .pm-action-icon {
        transform: scale(1.1);
        background-color: var(--primary);
        color: white;
    }

    .pm-action-text {
        font-weight: 500;
        color: var(--text-primary);
        font-size: 0.938rem;
        transition: color 0.2s ease;
    }

    .pm-action-card:hover .pm-action-text {
        color: var(--primary);
    }

    /* FAQ Accordion */
    .pm-faq-container {
        padding: 1.25rem;
    }

    .pm-faq-item {
        border: 1px solid var(--border-light);
        border-radius: 10px;
        margin-bottom: 1rem;
        overflow: hidden;
        transition: box-shadow 0.3s ease;
    }

        .pm-faq-item:last-child {
            margin-bottom: 0;
        }

        .pm-faq-item.expanded {
            box-shadow: var(--shadow-md);
        }

    .pm-faq-question {
        padding: 1.25rem;
        font-weight: 600;
        color: var(--text-primary);
        background-color: var(--subtle-bg);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: space-between;
        transition: background-color 0.2s ease;
    }

        .pm-faq-question:hover {
            background-color: var(--primary-lighter);
            color: var(--primary);
        }

        .pm-faq-question i {
            color: var(--text-muted);
            transition: transform 0.3s ease;
        }

    .pm-faq-item.expanded .pm-faq-question i {
        transform: rotate(180deg);
        color: var(--primary);
    }

    .pm-faq-answer {
        padding: 0;
        max-height: 0;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .pm-faq-item.expanded .pm-faq-answer {
        padding: 1.25rem;
        max-height: 1000px;
    }

    .pm-faq-answer p {
        margin: 0 0 1rem;
        color: var(--text-secondary);
        font-size: 0.938rem;
        line-height: 1.6;
    }

        .pm-faq-answer p:last-child {
            margin-bottom: 0;
        }

    .pm-faq-link {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--primary);
        text-decoration: none;
        font-weight: 500;
        transition: all 0.2s ease;
        font-size: 0.875rem;
        margin-top: 0.75rem;
    }

        .pm-faq-link:hover {
            color: var(--primary-hover);
            text-decoration: underline;
        }

    /* Knowledge Base Grid */
    .pm-kb-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 1.25rem;
        padding: 1.25rem;
    }

    .pm-kb-card {
        padding: 1.5rem;
        border-radius: 10px;
        background-color: var(--subtle-bg);
        border: 1px solid var(--border-light);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        cursor: pointer;
        text-align: center;
    }

        .pm-kb-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-md);
            background-color: var(--primary-lighter);
        }

    .pm-kb-icon {
        width: 64px;
        height: 64px;
        border-radius: 50%;
        background-color: var(--primary-lighter);
        color: var(--primary);
        font-size: 1.75rem;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 1rem;
        transition: all 0.3s ease;
    }

    .pm-kb-card:hover .pm-kb-icon {
        background-color: var(--primary-light);
        transform: scale(1.1);
    }

    .pm-kb-card h4 {
        margin: 0 0 0.75rem;
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--text-primary);
        transition: color 0.2s ease;
    }

    .pm-kb-card:hover h4 {
        color: var(--primary);
    }

    .pm-kb-card p {
        margin: 0;
        font-size: 0.875rem;
        color: var(--text-secondary);
        line-height: 1.5;
    }

    /* Contact Options */
    .pm-contact-options {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1.25rem;
        padding: 1.25rem;
    }

    .pm-contact-card {
        padding: 1.5rem;
        border-radius: 10px;
        background-color: var(--subtle-bg);
        border: 1px solid var(--border-light);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        text-align: center;
    }

        .pm-contact-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-md);
            background-color: var(--primary-lighter);
        }

    .pm-contact-icon {
        width: 64px;
        height: 64px;
        border-radius: 50%;
        background-color: var(--primary-lighter);
        color: var(--primary);
        font-size: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 1rem;
        transition: all 0.3s ease;
    }

    .pm-contact-card:hover .pm-contact-icon {
        background-color: var(--primary-light);
        transform: scale(1.1);
    }

    .pm-contact-card h4 {
        margin: 0 0 0.75rem;
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--text-primary);
        transition: color 0.2s ease;
    }

    .pm-contact-card:hover h4 {
        color: var(--primary);
    }

    .pm-contact-card p {
        margin: 0 0 0.5rem;
        font-size: 0.875rem;
        color: var(--text-secondary);
        line-height: 1.5;
    }

    .pm-contact-card .pm-text-muted {
        color: var(--text-muted);
        font-size: 0.75rem;
        margin-bottom: 1rem;
    }

    .pm-contact-card .pm-custom-btn {
        margin-top: 0.75rem;
    }

    /* New Ticket Modal */
    .pm-ticket-modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 90%;
        max-width: 600px;
        background-color: var(--content-bg);
        border-radius: 12px;
        box-shadow: var(--shadow-xl);
        z-index: 200;
        overflow: hidden;
        animation: pm-scale-in 0.3s ease;
    }

    .pm-modal-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1.25rem 1.5rem;
        background-color: var(--subtle-bg);
        border-bottom: 1px solid var(--border-divider);
    }

        .pm-modal-header h3 {
            margin: 0;
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

            .pm-modal-header h3 i {
                color: var(--primary);
            }

    .pm-modal-body {
        padding: 1.5rem;
        max-height: calc(100vh - 200px);
        overflow-y: auto;
    }

    .pm-modal-footer {
        padding: 1.25rem 1.5rem;
        background-color: var(--subtle-bg);
        border-top: 1px solid var(--border-divider);
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
    }

    /* Form Styles */
    .pm-form-group {
        margin-bottom: 1.25rem;
    }

        .pm-form-group:last-child {
            margin-bottom: 0;
        }

        .pm-form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--text-primary);
        }

    .pm-form-input,
    .pm-form-select,
    .pm-form-textarea {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        font-size: 0.938rem;
        background-color: var(--input-bg);
        color: var(--text-primary);
        transition: all 0.2s ease;
        font-family: var(--font-sans);
    }

        .pm-form-input:focus,
        .pm-form-select:focus,
        .pm-form-textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.15);
        }

    .pm-form-select {
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='18' height='18' stroke='currentColor' stroke-width='2' fill='none' stroke-linecap='round' stroke-linejoin='round' class='css-i6dzq1'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        padding-right: 2.5rem;
    }

    .pm-form-textarea {
        resize: vertical;
        min-height: 100px;
    }

    /* File Upload */
    .pm-file-upload {
        margin-bottom: 1rem;
    }

    .pm-file-upload-label {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem 1rem;
        border: 2px dashed var(--border-color);
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        background-color: var(--input-bg);
    }

        .pm-file-upload-label:hover {
            border-color: var(--primary);
            background-color: var(--primary-lighter);
        }

        .pm-file-upload-label i {
            font-size: 2rem;
            color: var(--primary);
            margin-bottom: 0.75rem;
        }

        .pm-file-upload-label span {
            font-size: 0.938rem;
            color: var(--text-secondary);
        }

    .pm-file-list {
        margin-top: 1rem;
    }

    .pm-file-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem 1rem;
        background-color: var(--subtle-bg);
        border-radius: 8px;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
        color: var(--text-primary);
    }

        .pm-file-item i {
            color: var(--primary);
        }

    .pm-file-remove {
        margin-left: auto;
        background: none;
        border: none;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        color: var(--danger);
        cursor: pointer;
        transition: all 0.2s ease;
        padding: 0;
    }

        .pm-file-remove:hover {
            background-color: var(--danger-light);
        }

    /* Responsive Styles */
    @@media (max-width: 991px) {
        .pm-kb-grid {
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        }

        .pm-contact-options {
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        }
    }

    @@media (max-width: 768px) {
        .pm-quick-actions {
            grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
        }

        .pm-header-content {
            flex-direction: column;
            gap: 1.25rem;
            text-align: center;
            padding: 1.5rem 1rem;
        }

        .pm-header-text-content {
            flex-direction: column;
        }

        .pm-header-action-panel {
            width: 100%;
            justify-content: center;
        }
    }

    @@media (max-width: 576px) {
        .pm-quick-actions {
            grid-template-columns: repeat(2, 1fr);
        }

        .pm-kb-grid {
            grid-template-columns: 1fr;
        }

        .pm-contact-options {
            grid-template-columns: 1fr;
        }

        .pm-header-action-panel {
            flex-direction: column;
            width: 100%;
            gap: 0.75rem;
        }

            .pm-header-action-panel .pm-custom-btn {
                width: 100%;
            }
    }

    /* ====== Enhanced Header Section ====== */
    .admin-header-section {
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-hover) 100%);
        color: white;
        padding: 1.25rem 0;
        position: relative;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        margin-bottom: 1.5rem;
        border-bottom-left-radius: 15px;
        border-bottom-right-radius: 15px;
    }

        /* Header top accent bar */
        .admin-header-section::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(to right, var(#3fd5b3), var(#57e795));
            z-index: 1;
        }

        /* Header pattern background */
        .admin-header-section::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-image: repeating-linear-gradient(45deg, transparent, transparent 35px, rgba(255, 255, 255, 0.08)35px, rgba(255, 255, 255, 0.08) 70px), repeating-linear-gradient(-45deg, transparent, transparent 35px, rgba(255, 255, 255, 0.08) 35px, rgba(255, 255, 255, 0.08) 70px);
            opacity: 0.5;
            animation: header-pattern-slide 60s linear infinite;
            z-index: 0;
        }

    @@keyframes header-pattern-slide {
        0% {
            background-position: 0 0;
        }

        100% {
            background-position: 70px 70px;
        }
    }

    .admin-header-content {
        position: relative;
        z-index: 1;
        max-width: var(--content-max-width);
        margin: 0 auto;
        padding: 0 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .header-text-content {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .header-icon {
        width: 48px;
        height: 48px;
        background: var(--users-header-icon-bg);
        backdrop-filter: blur(8px);
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        border: 1px solid var(--users-header-icon-border);
        transition: transform 0.3s ease;
        animation: icon-float 3.5s ease-in-out infinite;
        position: relative;
        z-index: 2;
    }

    @@keyframes icon-float {
        0%, 100% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-8px);
        }
    }

    .header-icon:hover {
        transform: scale(1.08);
    }

    .header-title-group {
        display: flex;
        flex-direction: column;
    }

    .header-title {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
        line-height: 1.2;
        letter-spacing: -0.01em;
        color: white;
    }

    .header-subtitle {
        margin: 0.25rem 0 0;
        opacity: 0.85;
        font-size: 0.875rem;
        font-weight: 400;
        color: whitesmoke;
    }

    .header-action-panel {
        display: flex;
        gap: 0.5rem;
    }

    .pm-custom-btn-primary {
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-hover) 100%);
        color: white;
        border: none;
        position: relative;
        overflow: hidden;
    }

    .pm-custom-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 0.625rem 1.125rem;
        border-radius: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        white-space: nowrap;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        position: relative;
        overflow: visible;
        z-index: 1;
    }

    .pm-modal-close-btn {
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: none;
        border: none;
        color: var(--text-secondary);
        border-radius: 50%;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .pm-modal-close-btn:hover {
            background-color: var(--subtle-bg);
            color: var(--text-primary);
        }

    .pm-blur-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(30, 41, 59, 0.25);
        backdrop-filter: blur(6px);
        z-index: 150;
        transition: backdrop-filter 0.2s;
    }

    .pm-ticket-modal-lg {
        max-width: 800px;
    }

    .pm-tickets-modal-body {
        background: var(--input-bg);
        padding: 2rem 1.5rem;
    }

    .pm-ticket-list {
        display: flex;
        flex-direction: column;
        gap: 1.25rem;
    }

    .pm-ticket-card {
        background: var(--content-bg);
        border: 1px solid var(--border-light);
        border-radius: 10px;
        box-shadow: var(--shadow-xs);
        padding: 1.25rem 1.5rem;
        transition: box-shadow 0.2s;
        position: relative;
    }

        .pm-ticket-card:hover {
            box-shadow: var(--shadow-md);
        }

    .pm-ticket-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
    }

    .pm-ticket-number {
        font-size: 1.05rem;
        font-weight: 600;
        color: var(--primary);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .pm-ticket-label {
        color: var(--text-muted);
        font-size: 0.92rem;
        font-weight: 500;
        margin-right: 0.25rem;
    }

    .pm-ticket-value {
        color: var(--text-primary);
        font-weight: 500;
    }

    .pm-ticket-status {
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.85rem;
        font-weight: 500;
        background: var(--primary-lighter);
        color: var(--primary);
        text-transform: capitalize;
    }

    .pm-status-new {
        background: var(--primary-lighter);
        color: var(--primary);
    }

    .pm-status-open {
        background: var(--info-light);
        color: var(--info);
    }

    .pm-status-closed {
        background: var(--success-light);
        color: var(--success);
    }

    .pm-status-pending {
        background: var(--warning-light);
        color: var(--warning);
    }

    .pm-ticket-card-body {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: flex-start;
        gap: 1.5rem;
    }

    .pm-ticket-info {
        display: flex;
        flex-direction: column;
        gap: 0.4rem;
        min-width: 220px;
    }

    .pm-ticket-actions {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-left: auto;
    }

    .pm-ticket-comment-btn {
        font-size: 0.92rem;
        padding: 0.5rem 1rem;
    }

    .pm-ticket-comment-box {
        margin-top: 1rem;
        background: var(--subtle-bg);
        border-radius: 8px;
        padding: 1rem;
        border: 1px solid var(--border-light);
        animation: pm-fade-in 0.2s;
    }

    .pm-ticket-comment-actions {
        display: flex;
        gap: 0.75rem;
        margin-top: 0.5rem;
    }

    @@keyframes pm-fade-in {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@media (max-width: 600px) {
        .pm-ticket-card-body {
            flex-direction: column;
            gap: 1rem;
        }

        .pm-ticket-info {
            min-width: 0;
        }
    }

    <style >
    /* Enhanced Modal Styles for Admin Tickets */
    .enhanced-modal {
        border: 2px solid var(--primary);
        border-radius: 12px;
        animation: modalZoomIn 0.3s ease;
    }

    @@keyframes modalZoomIn {
        from

    {
        transform: scale(0.95);
        opacity: 0.5;
    }

    to {
        transform: scale(1);
        opacity: 1;
    }

    }

    .enhanced-card {
        transition: box-shadow 0.3s ease;
    }

        .enhanced-card:hover {
            box-shadow: 0 8px 20px rgba(0,0,0,0.15);
        }

    /* Custom Dropdown Styling */
    .pm-dropdown {
        padding: 0.5rem 0.75rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        background-color: var(--input-bg);
        color: var(--text-primary);
        font-family: var(--font-sans);
        font-size: 0.938rem;
        transition: all 0.2s ease;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3E%3Cpath fill='var(--text-secondary)' d='M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.21 8.29a.75.75 0 01.02-1.06z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 1rem;
    }

        .pm-dropdown:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.15);
        }
</style>
</style>

