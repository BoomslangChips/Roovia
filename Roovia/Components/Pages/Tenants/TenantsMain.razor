@page "/tenants"
@using Roovia.Models.Tenant
@using Roovia.Models.Users
@using Roovia.Services
@using Roovia.Interfaces
@inject ITenant TenantService
@inject IUser UserService
@inject ToastService ToastService

@rendermode InteractiveServer

<CardView CssClass="management-card">
    <HeaderActions>
        <div class="d-flex align-items-center justify-content-between">
            <h3 class="mb-0">Tenants</h3>
            <div class="search-bar">
                <input type="text" placeholder="Search tenants..."
                       class="form-control" style="max-width: 300px;" @bind="searchTerm" />
            </div>
        </div>
    </HeaderActions>
    <ChildContent>
        @if (isLoading)
        {
            <div class="d-flex justify-content-center py-5">
                <div class="loading-spinner"></div>
            </div>
        }
        else if (FilteredTenants.Any())
        {
            <div class="tenant-grid d-flex flex-wrap gap-3">
                @foreach (var tenant in FilteredTenants)
                {
                    <div class="tenant-card card shadow-sm" style="width: 18rem;">
                        <div class="card-body">
                            <h5 class="card-title">
                                @tenant.FirstName @tenant.LastName
                            </h5>
                            <p class="card-text">
                                Status:
                                @if (tenant.PropertyId > 0)
                                {
                                    <span class="badge bg-success">Renting</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Not Renting</span>
                                }
                            </p>
                            <div class="d-flex justify-content-between">
                                <RVButton ButtonType="outline" Size="sm" IconLeft="fa-light fa-eye"
                                          Text="Open" OnClick="() => OpenTenant(tenant)" />
                                <RVButton ButtonType="outline" Size="sm" IconLeft="fa-light fa-edit"
                                          Text="Edit" OnClick="() => EditTenant(tenant)" />
                                <RVButton ButtonType="outline" Size="sm" IconLeft="fa-light fa-trash"
                                          Text="Delete" OnClick="() => DeleteTenant(tenant)" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <EmptyState Title="No tenants available"
                        Description="There are no tenants to display at this time."
                        Icon="fa-light fa-user-slash"
                        ActionText="Refresh"
                        OnAction="LoadTenants" />
        }
    </ChildContent>
</CardView>

@if (viewTenantsClicked)
{
    <CascadingValue TValue="ApplicationUser" Value="CurrentUser">
        <CascadingValue TValue="PropertyTenant" Value="selectedTenant">
            <ViewTenantComponent OnModalClosed="ViewTenantsClosed"></ViewTenantComponent>
        </CascadingValue>
    </CascadingValue>
}

@if (editTenantsClicked)
{
    <CascadingValue TValue="ApplicationUser" Value="CurrentUser">
        <CascadingValue TValue="PropertyTenant" Value="selectedTenant">
            <EditTenantModal OnModalClosed="ViewTenantsClosed"></EditTenantModal>
        </CascadingValue>
    </CascadingValue>
}

@code {
    [CascadingParameter]
    private ApplicationUser? CurrentUser { get; set; }

    private List<PropertyTenant> tenants = new List<PropertyTenant>();
    private string searchTerm = string.Empty;
    private bool isLoading = true;
    bool viewTenantsClicked = false;
    bool editTenantsClicked = false;

    PropertyTenant selectedTenant = new();

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser == null)
        {
            await GetLoggedInUser();
        }
        await LoadTenants();
    }

    private async Task GetLoggedInUser()
    {
        var userResponse = await UserService.GetAuthenticatedUserInfo();
        if (userResponse.ResponseInfo.Success)
        {
            CurrentUser = userResponse.Response as ApplicationUser;
        }
        else
        {
            ToastService.ShowError($"Error loading user: {userResponse.ResponseInfo.Message}", "User Error");
        }
    }

    private async Task LoadTenants()
    {
        isLoading = true;
        if (CurrentUser != null && CurrentUser.CompanyId.HasValue)
        {
            var response = await TenantService.GetAllTenants(CurrentUser.CompanyId.Value);
            if (response.ResponseInfo.Success && response.Response != null)
            {
                tenants = response.Response as List<PropertyTenant>;
            }
            else
            {
                ToastService.ShowError($"Error loading tenants: {response.ResponseInfo.Message}", "Tenants Error");
                tenants = new List<PropertyTenant>();
            }
        }
        else
        {
            ToastService.ShowError("Company information is missing for the current user.", "User Error");
        }
        isLoading = false;
    }

    private IEnumerable<PropertyTenant> FilteredTenants =>
        tenants.Where(t => string.IsNullOrEmpty(searchTerm)
                             || t.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                             || t.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private void OpenTenant(PropertyTenant tenant)
    {
        selectedTenant = tenant;
        viewTenantsClicked = true;
    }

    private async Task ViewTenantsClosed()
    {
        selectedTenant = new();
        viewTenantsClicked = false;
        await InvokeAsync(() => this.StateHasChanged());
    }

    private void EditTenant(PropertyTenant tenant)
    {
        selectedTenant = tenant;
        editTenantsClicked = true; ;
    }

    private async Task EditTenantsClosed()
    {
        selectedTenant = new();
        editTenantsClicked = false;
        await LoadTenants();
        await InvokeAsync(() => this.StateHasChanged());
    }


    private async Task DeleteTenant(PropertyTenant tenant)
    {
        if (CurrentUser == null || !CurrentUser.CompanyId.HasValue)
        {
            ToastService.ShowError("Company information is missing for the current user.", "User Error");
            return;
        }

        var response = await TenantService.DeleteTenant(tenant.Id, CurrentUser.CompanyId.Value, CurrentUser);
        if (response.ResponseInfo.Success)
        {
            tenants.Remove(tenant);
            ToastService.ShowInfo($"Tenant {tenant.FirstName} deleted.", "Delete Tenant");
        }
        else
        {
            ToastService.ShowError($"Error deleting tenant: {response.ResponseInfo.Message}", "Delete Tenant");
        }
    }

}
