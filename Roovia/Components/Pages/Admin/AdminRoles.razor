@page "/admin/roles"
@using Roovia.Interfaces
@using Roovia.Models.Users
@using Roovia.Security
@using Roovia.Services
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "GlobalAdminOnly")]
@rendermode InteractiveServer
@inject IPermissionService PermissionService
@inject NavigationManager NavigationManager
@inject ToastService ToastService

<div class="admin-roles-page">
    <div class="admin-header-section">
        <div class="admin-header-content">
            <div class="header-text-content">
                <div class="header-icon">
                    <i class="fal fa-shield-check"></i>
                </div>
                <div class="header-title-group">
                    <h1 class="header-title">Role Management</h1>
                    <p class="header-subtitle">Control user permissions and access levels</p>
                </div>
            </div>

            <div class="header-action-panel">
                <RVButton ButtonType="primary" IconLeft="fa-light fa-plus" Text="Create Role"
                          OnClick="() => ShowRoleEditModal(0)" CssClass="create-role-btn" />
            </div>
        </div>
    </div>

    <div class="admin-main-container">
        <CardView CssClass="management-card">
            <HeaderActions>
                <AdminRolesFilterPanel SearchTerm="@searchTerm"
                                       OnSearchChanged="HandleSearch"
                                       SelectedRoleTypeFilter="@filterType"
                                       OnRoleTypeFilterChanged="HandleRoleTypeFilterChange"
                                       SelectedStatusFilter="@statusFilter"
                                       OnStatusFilterChanged="HandleStatusFilterChange"
                                       OnClearFilters="ClearFilters"
                                       OnRefresh="LoadRoles" />
            </HeaderActions>
            <ChildContent>
                @if (isLoading)
                {
                    <div class="loading-state">
                        <div class="loading-spinner"></div>
                        <h3 class="loading-text">Loading roles...</h3>
                    </div>
                }
                else if (filteredRoles.Any())
                {
                    <div class="role-grid">
                        @foreach (var role in filteredRoles)
                        {
                            <div class="role-card @(role.IsPreset ? "preset" : "custom") @(!role.IsActive ? "inactive" : "")">
                                <div class="role-header">
                                    <div class="role-icon">
                                        @if (role.IsPreset)
                                        {
                                            <i class="fa-light fa-shield"></i>
                                        }
                                        else
                                        {
                                            <i class="fa-light fa-tools"></i>
                                        }
                                    </div>
                                    <div class="role-title">
                                        <h3>@role.Name</h3>
                                        <div class="role-badges">
                                            @if (role.IsPreset)
                                            {
                                                <span class="badge-preset">System</span>
                                            }
                                            else
                                            {
                                                <span class="badge-custom">Custom</span>
                                            }
                                            <span class="badge-status @(role.IsActive ? "active" : "inactive")">
                                                @(role.IsActive ? "Active" : "Inactive")
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <div class="role-description">
                                    <p>@role.Description</p>
                                </div>

                                <div class="role-actions">
                                    <RVButton ButtonType="primary" Size="sm" IconLeft="fa-light fa-edit" Text="Edit"
                                              OnClick="() => ShowRoleEditModal(role.Id)" CssClass="action-btn" />
                                    <RVButton ButtonType="secondary" Size="sm" IconLeft="fa-light fa-shield-check" Text="Permissions"
                                              OnClick="() => ShowPermissionsModal(role.Id)" CssClass="action-btn" />
                                    @if (!role.IsPreset)
                                    {
                                        <RVButton ButtonType="danger" Size="sm" IconLeft="fa-light fa-trash" Text="Delete"
                                                  OnClick="() => ConfirmDeleteRole(role)" CssClass="action-btn" />
                                    }
                                    <RVButton ButtonType="outline" Size="sm" IconLeft="fa-light fa-copy" Text="Clone"
                                              OnClick="() => CloneRole(role)" CssClass="action-btn" />
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <div class="empty-icon">
                            <i class="fa-light fa-user-shield"></i>
                        </div>
                        <h3>No Roles Found</h3>
                        <p>No roles match your current search or filter criteria.</p>
                        <div class="empty-actions">
                            <RVButton ButtonType="primary" Text="Clear Filters"
                                      OnClick='ClearFilters' />
                            <RVButton ButtonType="outline" Text="Create New Role"
                                      OnClick="() => ShowRoleEditModal(0)" />
                        </div>
                    </div>
                }
            </ChildContent>
        </CardView>
    </div>

    @if (showDeleteDialog)
    {
        <RVModal IsVisible="true"
                 Title="Confirm Delete"
                 Icon="fa-light fa-trash"
                 OnClose="() => showDeleteDialog = false"
                 OnCancel="() => showDeleteDialog = false"
                 OnConfirm="DeleteRole"
                 ConfirmText="Delete"
                 CancelText="Cancel"
                 Size="sm"
                 CssClass="delete-modal">
            <ChildContent>
                <div class="delete-modal-content">
                    <div class="alert alert-danger">
                        <i class="fa-light fa-exclamation-triangle"></i>
                        <div class="alert-content">
                            <p>Are you sure you want to delete the role <strong>@roleToDelete?.Name</strong>?</p>
                            <p>This action cannot be undone and may affect users who have this role assigned.</p>
                        </div>
                    </div>
                </div>
            </ChildContent>
        </RVModal>
    }

    @if (showCloneDialog)
    {
        <RVModal IsVisible="true"
                 Title="Clone Role"
                 Icon="fa-light fa-copy"
                 OnClose="() => showCloneDialog = false"
                 OnCancel="() => showCloneDialog = false"
                 OnConfirm="ConfirmCloneRole"
                 ConfirmText="Clone"
                 CancelText="Cancel"
                 Size="sm"
                 CssClass="clone-modal">
            <ChildContent>
                <div class="clone-modal-content">
                    <div class="form-group">
                        <label>New Role Name</label>
                        <RVTextbox Value="@newRoleName"
                                   ValueChanged="value => newRoleName = value"
                                   Placeholder="Enter name for the cloned role"
                                   IsValid="string.IsNullOrEmpty(cloneErrorMessage)"
                                   ValidationMessage="@cloneErrorMessage" />
                    </div>
                    <p>This will create a new custom role with the same permissions as <strong>@roleToClone?.Name</strong>.</p>
                </div>
            </ChildContent>
        </RVModal>
    }

    @if (showRoleEditModal)
    {
        <RoleEditModal RoleId="@currentRoleId"
                       OnClose="CloseRoleEditModal"
                       OnSaved="RoleEditedHandler" />
    }

    @if (showPermissionsModal)
    {
        <RolePermissionsModal RoleId="@currentRoleId"
                              OnClose="ClosePermissionsModal" />
    }
</div>

@code {
    private List<Role> roles = new List<Role>();
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private string filterType = "all";
    private string statusFilter = "all";

    // Delete confirmation
    private bool showDeleteDialog = false;
    private Role roleToDelete;

    // Clone dialog
    private bool showCloneDialog = false;
    private Role roleToClone;
    private string newRoleName = string.Empty;
    private string cloneErrorMessage = string.Empty;

    // Modals
    private bool showRoleEditModal = false;
    private bool showPermissionsModal = false;
    private int currentRoleId = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task LoadRoles()
    {
        try
        {
            isLoading = true;
            var response = await PermissionService.GetAllRoles();

            if (response.ResponseInfo.Success)
            {
                roles = (List<Role>)response.Response;
            }
            else
            {
                ToastService.ShowError(response.ResponseInfo.Message, "Error");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load roles: {ex.Message}", "Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<Role> filteredRoles
    {
        get
        {
            return roles
                .Where(r => (string.IsNullOrEmpty(searchTerm) ||
                            r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            r.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
                .Where(r => filterType == "all" ||
                           (filterType == "preset" && r.IsPreset) ||
                           (filterType == "custom" && !r.IsPreset))
                .Where(r => statusFilter == "all" ||
                           (statusFilter == "active" && r.IsActive) ||
                           (statusFilter == "inactive" && !r.IsActive))
                .OrderBy(r => r.Name)
                .ToList();
        }
    }

    private void HandleSearch(string value)
    {
        searchTerm = value;
    }

    private void HandleRoleTypeFilterChange(string value)
    {
        filterType = value;
    }

    private void HandleStatusFilterChange(string value)
    {
        statusFilter = value;
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        filterType = "all";
        statusFilter = "all";
    }

    // Modal methods
    private void ShowRoleEditModal(int roleId)
    {
        currentRoleId = roleId;
        showRoleEditModal = true;
    }

    private void CloseRoleEditModal()
    {
        showRoleEditModal = false;
    }

    private async Task RoleEditedHandler()
    {
        await LoadRoles();
        showRoleEditModal = false;
    }

    private void ShowPermissionsModal(int roleId)
    {
        currentRoleId = roleId;
        showPermissionsModal = true;
    }

    private void ClosePermissionsModal()
    {
        showPermissionsModal = false;
    }

    private void ConfirmDeleteRole(Role role)
    {
        roleToDelete = role;
        showDeleteDialog = true;
    }

    private async Task DeleteRole()
    {
        if (roleToDelete != null)
        {
            try
            {
                var response = await PermissionService.DeleteRole(roleToDelete.Id);

                if (response.ResponseInfo.Success)
                {
                    ToastService.ShowSuccess(response.ResponseInfo.Message, "Success");
                    await LoadRoles();
                }
                else
                {
                    ToastService.ShowError(response.ResponseInfo.Message, "Error");
                }
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Failed to delete role: {ex.Message}", "Error");
            }

            showDeleteDialog = false;
        }
    }

    private void CloneRole(Role role)
    {
        roleToClone = role;
        newRoleName = $"Copy of {role.Name}";
        cloneErrorMessage = string.Empty;
        showCloneDialog = true;
    }

    private async Task ConfirmCloneRole()
    {
        if (string.IsNullOrWhiteSpace(newRoleName))
        {
            cloneErrorMessage = "Role name is required.";
            return;
        }

        if (roles.Any(r => r.Name == newRoleName))
        {
            cloneErrorMessage = "A role with this name already exists.";
            return;
        }

        try
        {
            var response = await PermissionService.CloneRole(roleToClone.Id, newRoleName);

            if (response.ResponseInfo.Success)
            {
                ToastService.ShowSuccess(response.ResponseInfo.Message, "Success");
                await LoadRoles();
                showCloneDialog = false;
            }
            else
            {
                cloneErrorMessage = response.ResponseInfo.Message;
            }
        }
        catch (Exception ex)
        {
            cloneErrorMessage = $"Failed to clone role: {ex.Message}";
        }
    }
}