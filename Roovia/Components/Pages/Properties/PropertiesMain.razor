@page "/properties"
@attribute [Authorize(Policy = "PropertiesAccess")]
@using Microsoft.AspNetCore.Authorization
@using Roovia.Interfaces
@using Roovia.Models.BusinessModels
@using Roovia.Models.UserCompanyModels
@using Roovia.Services
@using Roovia.Services.General
@inject IProperty PropertyService
@inject IPropertyOwner PropertyOwnerService
@inject IUser UserService
@inject IPermissionService PermissionService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ToastService ToastService

@rendermode InteractiveServer

<div class="properties-container">
    <div class="properties-header">
        <h2 class="properties-title">Properties Management</h2>
        @if (_canCreateProperties)
        {
            <button class="property-btn property-btn-primary" @onclick="() => ShowCreateModal()">
                <i class="fas fa-plus me-2"></i> Add Property
            </button>
        }
    </div>

    <div class="properties-filters">
        <div class="property-search-container">
            <input type="text" class="property-search-input"
                   placeholder="Search properties..."
                   @bind-value="searchTerm"
                   @bind-value:event="oninput"
                   @onkeyup="@(() => FilterProperties())">
            <i class="fas fa-search property-search-icon"></i>
        </div>

        <div class="property-filter-row">
            <select class="property-filter-select" @bind="statusFilter" @bind:event="onchange">
                <option value="">All Statuses</option>
                @foreach (var status in propertyStatuses)
                {
                    <option value="@status.Id">@status.Name</option>
                }
            </select>

            <select class="property-filter-select" @bind="tenantFilter" @bind:event="onchange">
                <option value="">All Properties</option>
                <option value="with-tenant">With Tenant</option>
                <option value="vacant">Vacant</option>
            </select>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="property-loading">
            <div class="property-spinner"></div>
            <p>Loading properties...</p>
        </div>
    }
    else if (!filteredProperties.Any())
    {
        <div class="property-empty-state">
            <i class="fas fa-home property-empty-icon"></i>
            <h3>No Properties Found</h3>
            <p>No properties match your search criteria.</p>
        </div>
    }
    else
    {
        <div class="properties-grid">
            @foreach (var property in filteredProperties)
            {
                <div class="property-card">
                    <div class="property-card-header">
                        @if (property.MainImage != null)
                        {
                            <img src="@property.MainImage.Url" alt="@property.PropertyName" class="property-image" />
                        }
                        else
                        {
                            <div class="property-placeholder-image">
                                <i class="fas fa-building"></i>
                            </div>
                        }
                        <div class="property-status-badge @GetStatusClass(property.StatusId)">
                            @property.Status?.Name
                        </div>
                        @if (property.HasTenant)
                        {
                            <div class="property-tenant-badge">
                                <i class="fas fa-user me-1"></i> Occupied
                            </div>
                        }
                    </div>

                    <div class="property-card-body">
                        <h4 class="property-name">@property.PropertyName</h4>
                        <p class="property-code">Code: @property.PropertyCode</p>

                        <div class="property-address">
                            <i class="fas fa-map-marker-alt me-2"></i>
                            @GetPropertyAddress(property)
                        </div>

                        <div class="property-info-row">
                            <div class="property-info-item">
                                <span class="property-info-label">Rental Amount</span>
                                <span class="property-info-value">R @property.RentalAmount.ToString("N2")</span>
                            </div>
                            @if (property.Owner != null)
                            {
                                <div class="property-info-item">
                                    <span class="property-info-label">Owner</span>
                                    <span class="property-info-value">@property.Owner.FullName</span>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="property-card-footer">
                        @if (_canViewAllProperties)
                        {
                            <button class="property-btn property-btn-sm property-btn-outline" @onclick="() => ViewProperty(property)">
                                <i class="fas fa-eye"></i> View
                            </button>
                        }
                        @if (_canCreateProperties)
                        {
                            <button class="property-btn property-btn-sm property-btn-primary" @onclick="() => EditProperty(property)">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                        }
                        @if (_canArchiveProperties)
                        {
                            <button class="property-btn property-btn-sm property-btn-danger" @onclick="() => ArchiveProperty(property)">
                                <i class="fas fa-archive"></i> Archive
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (showCreateModal)
{
    <CreatePropertyModal Property="@newProperty"
                         OnSave="@SaveNewProperty"
                         OnCancel="@(() => showCreateModal = false)"
                         PropertyStatuses="@propertyStatuses"
                         PropertyOwners="@propertyOwners"
                         CommissionTypes="@commissionTypes" />
}

@if (showEditModal && selectedProperty != null)
{
    <EditPropertyModal Property="@selectedProperty"
                       OnSave="@UpdateProperty"
                       OnCancel="@(() => showEditModal = false)"
                       PropertyStatuses="@propertyStatuses"
                       PropertyOwners="@propertyOwners"
                       CommissionTypes="@commissionTypes" />
}

@if (showViewModal && selectedProperty != null)
{
    <ViewPropertyModal Property="@selectedProperty"
                       OnClose="@(() => showViewModal = false)" />
}

@code {
    private ApplicationUser? currentUser;
    private List<Property> properties = new();
    private List<Property> filteredProperties = new();
    private Property? selectedProperty;
    private Property newProperty = new();

    private List<PropertyStatusType> propertyStatuses = new();
    private List<PropertyOwner> propertyOwners = new();
    private List<CommissionType> commissionTypes = new();

    private string searchTerm = "";
    private string statusFilter = "";
    private string tenantFilter = "";

    private bool isLoading = true;
    private bool showCreateModal = false;
    private bool showEditModal = false;
    private bool showViewModal = false;

    // Permissions
    private bool _canCreateProperties = false;
    private bool _canArchiveProperties = false;
    private bool _canViewAllProperties = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.Identity?.Name;

        if (!string.IsNullOrEmpty(userId))
        {
            var userResult = await UserService.GetUserById(userId);
            if (userResult.ResponseInfo.Success)
            {
                currentUser = userResult.Response as ApplicationUser;
                await CheckUserPermissions();
                await LoadInitialData();
            }
        }
    }

    private async Task CheckUserPermissions()
    {
        if (currentUser == null) return;

        _canCreateProperties = await PermissionService.UserHasPermission(currentUser.Id, "properties.create");
        _canArchiveProperties = await PermissionService.UserHasPermission(currentUser.Id, "properties.archive");
        _canViewAllProperties = await PermissionService.UserHasPermission(currentUser.Id, "properties.view.all");
    }

    private async Task LoadInitialData()
    {
        isLoading = true;

        try
        {
            // Load properties
            if (currentUser?.CompanyId != null)
            {
                var result = await PropertyService.GetAllProperties(currentUser.CompanyId.Value);
                if (result.ResponseInfo.Success)
                {
                    properties = result.Response as List<Property> ?? new();
                    FilterProperties();
                }
            }

            // Load lookup data
            await LoadLookupData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading properties: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadLookupData()
    {
        // In a real implementation, these would come from lookup services
        // For now, creating mock data
        propertyStatuses = new List<PropertyStatusType>
        {
            new() { Id = 1, Name = "Active" },
            new() { Id = 2, Name = "Inactive" },
            new() { Id = 3, Name = "Under Maintenance" }
        };

        if (currentUser?.CompanyId != null)
        {
            var ownerResult = await PropertyOwnerService.GetAllPropertyOwners(currentUser.CompanyId.Value);
            if (ownerResult.ResponseInfo.Success)
            {
                propertyOwners = ownerResult.Response as List<PropertyOwner> ?? new();
            }
        }

        commissionTypes = new List<CommissionType>
        {
            new() { Id = 1, Name = "Percentage" },
            new() { Id = 2, Name = "Fixed Amount" }
        };
    }

    private void FilterProperties()
    {
        filteredProperties = properties.Where(p =>
            (string.IsNullOrEmpty(searchTerm) ||
             p.PropertyName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
             p.PropertyCode?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
             p.Address?.Street?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) &&
            (string.IsNullOrEmpty(statusFilter) || p.StatusId.ToString() == statusFilter) &&
            (string.IsNullOrEmpty(tenantFilter) ||
             (tenantFilter == "with-tenant" && p.HasTenant) ||
             (tenantFilter == "vacant" && !p.HasTenant))
        ).ToList();

        StateHasChanged();
    }

    private void ShowCreateModal()
    {
        newProperty = new Property
            {
                Address = new Address(),
                CompanyId = currentUser?.CompanyId ?? 0,
                BranchId = currentUser?.BranchId,
                CreatedBy = currentUser?.Id ?? "",
                CreatedOn = DateTime.Now,
                StatusId = 1,
                CommissionTypeId = 1,
                PaymentsEnabled = true,
                PaymentsVerify = true
            };
        showCreateModal = true;
    }

    private async Task SaveNewProperty(Property property)
    {
        if (currentUser == null || currentUser.CompanyId == null) return;

        property.CompanyId = currentUser.CompanyId.Value;
        property.CreatedBy = currentUser.Id;
        property.CreatedOn = DateTime.Now;

        var result = await PropertyService.CreateProperty(property);

        if (result.ResponseInfo.Success)
        {
            ToastService.ShowSuccess("Property created successfully");
            await LoadInitialData();
            showCreateModal = false;
        }
        else
        {
            ToastService.ShowError($"Error creating property: {result.ResponseInfo.Message}");
        }
    }

    private void EditProperty(Property property)
    {
        selectedProperty = property;
        showEditModal = true;
    }

    private async Task UpdateProperty(Property property)
    {
        if (currentUser?.CompanyId == null) return;

        property.UpdatedBy = currentUser.Id;
        property.UpdatedDate = DateTime.Now;

        var result = await PropertyService.UpdateProperty(property.Id, property, currentUser.CompanyId.Value);

        if (result.ResponseInfo.Success)
        {
            ToastService.ShowSuccess("Property updated successfully");
            await LoadInitialData();
            showEditModal = false;
        }
        else
        {
            ToastService.ShowError($"Error updating property: {result.ResponseInfo.Message}");
        }
    }

    private void ViewProperty(Property property)
    {
        selectedProperty = property;
        showViewModal = true;
    }

    private async Task ArchiveProperty(Property property)
    {
        if (currentUser?.CompanyId == null) return;

        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to archive {property.PropertyName}?"))
        {
            var result = await PropertyService.DeleteProperty(property.Id, currentUser.CompanyId.Value, currentUser);

            if (result.ResponseInfo.Success)
            {
                ToastService.ShowSuccess("Property archived successfully");
                await LoadInitialData();
            }
            else
            {
                ToastService.ShowError($"Error archiving property: {result.ResponseInfo.Message}");
            }
        }
    }

    private string GetPropertyAddress(Property property)
    {
        if (property.Address == null) return "No address";

        var parts = new List<string>();
        if (!string.IsNullOrEmpty(property.Address.Street)) parts.Add(property.Address.Street);
        if (!string.IsNullOrEmpty(property.Address.City)) parts.Add(property.Address.City);
        if (!string.IsNullOrEmpty(property.Address.Province)) parts.Add(property.Address.Province);

        return string.Join(", ", parts);
    }

    private string GetStatusClass(int statusId)
    {
        return statusId switch
        {
            1 => "property-status-active",
            2 => "property-status-inactive",
            3 => "property-status-maintenance",
            _ => "property-status-default"
        };
    }
}

<style>
    .properties-container {
        padding: 1.5rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .properties-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .properties-title {
        font-size: 2rem;
        font-weight: 600;
        color: var(--text-primary);
    }

    .property-btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        display: inline-flex;
        align-items: center;
    }

    .property-btn-primary {
        background-color: var(--primary);
        color: white;
    }

        .property-btn-primary:hover {
            background-color: var(--primary-hover);
        }

    .property-btn-outline {
        background-color: transparent;
        color: var(--primary);
        border: 1px solid var(--primary);
    }

        .property-btn-outline:hover {
            background-color: var(--primary);
            color: white;
        }

    .property-btn-danger {
        background-color: var(--danger);
        color: white;
    }

        .property-btn-danger:hover {
            background-color: var(--danger-hover);
        }

    .property-btn-sm {
        padding: 0.25rem 0.75rem;
        font-size: 0.8125rem;
    }

    .properties-filters {
        margin-bottom: 2rem;
    }

    .property-search-container {
        position: relative;
        margin-bottom: 1rem;
    }

    .property-search-input {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 2.5rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        font-size: 1rem;
        background-color: var(--content-bg);
        color: var(--text-primary);
    }

    .property-search-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-muted);
    }

    .property-filter-row {
        display: flex;
        gap: 1rem;
    }

    .property-filter-select {
        padding: 0.5rem 1rem;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        background-color: var(--content-bg);
        color: var(--text-primary);
        font-size: 0.875rem;
    }

    .property-loading {
        text-align: center;
        padding: 4rem 2rem;
    }

    .property-spinner {
        width: 3rem;
        height: 3rem;
        border: 3px solid var(--border-color);
        border-top-color: var(--primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
    }

    @@keyframes spin {
        to

    {
        transform: rotate(360deg);
    }

    }

    .property-empty-state {
        text-align: center;
        padding: 4rem 2rem;
    }

    .property-empty-icon {
        font-size: 4rem;
        color: var(--text-muted);
        margin-bottom: 1rem;
    }

    .properties-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 1.5rem;
    }

    .property-card {
        background-color: var(--content-bg);
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .property-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

    .property-card-header {
        position: relative;
        height: 200px;
        overflow: hidden;
    }

    .property-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .property-placeholder-image {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--subtle-bg);
        color: var(--text-muted);
        font-size: 3rem;
    }

    .property-status-badge {
        position: absolute;
        top: 0.75rem;
        right: 0.75rem;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
    }

    .property-status-active {
        background-color: var(--success);
        color: white;
    }

    .property-status-inactive {
        background-color: var(--gray);
        color: white;
    }

    .property-status-maintenance {
        background-color: var(--warning);
        color: white;
    }

    .property-tenant-badge {
        position: absolute;
        top: 0.75rem;
        left: 0.75rem;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        background-color: var(--info);
        color: white;
    }

    .property-card-body {
        padding: 1.5rem;
    }

    .property-name {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 0.25rem;
        color: var(--text-primary);
    }

    .property-code {
        font-size: 0.875rem;
        color: var(--text-muted);
        margin-bottom: 1rem;
    }

    .property-address {
        font-size: 0.875rem;
        color: var(--text-secondary);
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
    }

    .property-info-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1rem;
    }

    .property-info-item {
        display: flex;
        flex-direction: column;
    }

    .property-info-label {
        font-size: 0.75rem;
        color: var(--text-muted);
        margin-bottom: 0.25rem;
    }

    .property-info-value {
        font-size: 0.875rem;
        font-weight: 600;
        color: var(--text-primary);
    }

    .property-card-footer {
        padding: 1rem 1.5rem;
        border-top: 1px solid var(--border-light);
        display: flex;
        gap: 0.5rem;
    }
</style>