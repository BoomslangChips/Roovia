@page "/properties"
@using Roovia.Models.Properties
@using Roovia.Models.Users
@using Roovia.Services
@using Roovia.Interfaces
@inject IProperty PropertyService
@inject IUser UserService

@rendermode InteractiveServer

<div class="roovia-section">
    <div class="roovia-section-header">
        <h2 class="roovia-section-title">Properties</h2>
        <div class="d-flex gap-3">
            <button class="auth-button" @onclick="AddNewProperty">
                <i class="bi bi-plus-circle"></i> Add Property
            </button>
        </div>
    </div>

    <div class="roovia-panel mb-4">
        <div class="roovia-panel-body" style="overflow-y: auto !important;    max-height: 86vh; min-height:86vh;">
            <div class="d-flex flex-column justify-content-between align-items-center flex-wrap gap-3 mb-4">
                <div class="position-relative">
                    <input type="text"
                    class="form-control ps-4"
                    placeholder="Search properties..."
                    @bind-value="searchTerm"
                    @bind-value:event="oninput"
                    style="min-width: 280px; border-radius: var(--border-radius-md);">
                    <i class="bi bi-search position-absolute" style="left: 12px; top: 50%; transform: translateY(-50%); color: var(--text-muted);"></i>
                </div>
                @if (isLoading)
                {
                    <div class="d-flex justify-content-center py-5">
                        <div class="loading-spinner"></div>
                    </div>
                }
                else if (filteredProperties.Count == 0)
                {
                    <div class="empty-state">
                        <div class="empty-illustration">
                            <i class="bi bi-house-x"></i>
                        </div>
                        <h3>No Properties Found</h3>
                        <p>We couldn't find any properties matching your search criteria.</p>
                        <div class="empty-actions">
                            <button class="btn btn-primary" @onclick="ClearFilters">Clear Filters</button>
                            <button class="btn btn-outline-primary" @onclick="AddNewProperty">Add Property</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="roovia-card-deck flex-wrap d-flex justify-content-around flex-row gap-4">
                        @foreach (var property in filteredProperties)
                        {
                            <div class="card hover-lift">
                                <div class="card-body p-0">
                                    <div class="property-image-container">
                                        <div class="property-placeholder bg-subtle-bg d-flex align-items-center justify-content-center" style="height: 180px;">
                                            <i class="fas fa-house-user text-light" style="font-size: 4rem;"></i>
                                        </div>
                                        @if (property.HasTenant)
                                        {
                                            <div class="status-badge status-online position-absolute" style="top: 12px; right: 12px;">
                                                <i class="bi bi-person-check me-1"></i> Tenant
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="status-badge status-offline position-absolute" style="top: 12px; right: 12px;">
                                                <i class="bi bi-person-dash me-1"></i> Vacant
                                            </div>
                                        }
                                    </div>
                                    <div class="p-4">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <h5 class="card-title mb-0">
                                                @(property.Address?.ComplexName ?? "Property")
                                                @if (!string.IsNullOrEmpty(property.Address?.UnitNumber))
                                                {
                                                    <span>Unit @property.Address.UnitNumber</span>
                                                }
                                            </h5>
                                            <span class="badge badge-primary">
                                                @($"R{property.RentalAmount:N0}/mo")
                                            </span>
                                        </div>
                                        <p class="text-secondary mb-3">
                                            @GetFormattedAddress(property)
                                        </p>

                                        @if (property.HasTenant && property.CurrentLeaseStartDate != DateTime.MinValue)
                                        {
                                            <div class="lease-info mb-3">
                                                <div class="d-flex align-items-center mb-1">
                                                    <i class="bi bi-calendar-check text-primary me-2"></i>
                                                    <small class="text-muted">Lease Started: <strong>@(property.CurrentLeaseStartDate.Value.ToString("MMM d, yyyy"))</strong></small>
                                                </div>
                                                @if (property.LeaseEndDate != DateTime.MinValue)
                                                {
                                                    <div class="d-flex align-items-center">
                                                        <i class="bi bi-calendar-event text-primary me-2"></i>
                                                        <small class="text-muted">Lease Ends: <strong>@property.LeaseEndDate.Value.ToString("MMM d, yyyy")</strong></small>
                                                    </div>
                                                }
                                            </div>
                                        }

                                        <div class="d-flex justify-content-between mt-3">
                                            <button class="btn btn-outline-primary btn-sm" @onclick="() => ViewProperty(property)">
                                                <i class="bi bi-eye me-1"></i> View
                                            </button>
                                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => EditProperty(property)">
                                                <i class="bi bi-pencil me-1"></i> Edit
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (showAddPropertyModal)
{
    <CascadingValue TValue="ApplicationUser" Value="CurrentUser">
        <Roovia.Components.Pages.Properties.CreatePropertyModal OnModalClosed="AddPropertyModalClosed"></Roovia.Components.Pages.Properties.CreatePropertyModal>
    </CascadingValue>
}

@if (viewPropertyModal)
{
    <CascadingValue TValue="ApplicationUser" Value="CurrentUser">
        <CascadingValue TValue="Property" Value="selectedProperty">
            <Roovia.Components.Pages.Properties.ViewPropertyModal OnModalClosed="ViewPropertyClosed"></Roovia.Components.Pages.Properties.ViewPropertyModal>
        </CascadingValue>
    </CascadingValue>
}

@if (editPropertyModal)
{
    <CascadingValue TValue="ApplicationUser" Value="CurrentUser">
        <CascadingValue TValue="Property" Value="selectedProperty">
            <Roovia.Components.Pages.Properties.EditPropertyModal OnModalClosed="EditPropertyClosed"></Roovia.Components.Pages.Properties.EditPropertyModal>
        </CascadingValue>
    </CascadingValue>
}

@code {
    [CascadingParameter]
    private ApplicationUser? CurrentUser { get; set; }

    private List<Property> properties = new List<Property>();
    private List<Property> filteredProperties = new List<Property>();
    private string searchTerm = "";
    private bool isLoading = true;
    private string filterOption = "All";
    private string sortOption = "AddressAsc";
    bool showAddPropertyModal = false;
    bool viewPropertyModal = false;
    public Property selectedProperty = new();
    bool editPropertyModal = false;

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser == null)
        {
            await GetLoggedInUser();
        }
        await LoadProperties();
    }

    public async Task GetLoggedInUser()
    {
        var userResponse = await UserService.GetAuthenticatedUserInfo();
        if (userResponse.ResponseInfo.Success)
        {
            CurrentUser = userResponse.Response as ApplicationUser;
        }
        else
        {
            Console.WriteLine($"Error loading user: {userResponse.ResponseInfo.Message}");
        }
    }

    private async Task LoadProperties()
    {
        isLoading = true;
        if (CurrentUser != null && CurrentUser.CompanyId != null)
        {
            var response = await PropertyService.GetAllProperties(CurrentUser.CompanyId.Value);

            if (response.ResponseInfo.Success && response.Response != null)
            {
                properties = (List<Property>)response.Response;
                ApplyFiltersAndSort();
            }
        }


        isLoading = false;
    }

    private void ApplyFiltersAndSort()
    {
        // First apply search term filter
        var result = properties.Where(p =>
        string.IsNullOrWhiteSpace(searchTerm) ||
        (
        (!string.IsNullOrEmpty(p.Address?.Street) && p.Address.Street.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
        (!string.IsNullOrEmpty(p.Address?.ComplexName) && p.Address.ComplexName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
        (!string.IsNullOrEmpty(p.Address?.City) && p.Address.City.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
        (!string.IsNullOrEmpty(p.Address?.Suburb) && p.Address.Suburb.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        )
        ).ToList();

        // Then apply tenant filter
        switch (filterOption)
        {
            case "HasTenant":
                result = result.Where(p => p.HasTenant).ToList();
                break;
            case "NoTenant":
                result = result.Where(p => !p.HasTenant).ToList();
                break;
            default:
                // "All" option - no filtering needed
                break;
        }

        // Finally apply sorting
        switch (sortOption)
        {
            case "AddressAsc":
                result = result.OrderBy(p => GetFormattedAddress(p)).ToList();
                break;
            case "AddressDesc":
                result = result.OrderByDescending(p => GetFormattedAddress(p)).ToList();
                break;
            case "RentalAsc":
                result = result.OrderBy(p => p.RentalAmount).ToList();
                break;
            case "RentalDesc":
                result = result.OrderByDescending(p => p.RentalAmount).ToList();
                break;
        }

        filteredProperties = result;
    }

    // Event handlers for the search, filter, and sort controls
    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFiltersAndSort();
    }

    private void FilterBy(string option)
    {
        filterOption = option;
        ApplyFiltersAndSort();
    }

    private void SortBy(string option)
    {
        sortOption = option;
        ApplyFiltersAndSort();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        filterOption = "All";
        sortOption = "AddressAsc";
        ApplyFiltersAndSort();
    }

    // Navigation methods
    private async Task ViewProperty(Property property)
    {
        selectedProperty = property;
        viewPropertyModal = true;
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task ViewPropertyClosed()
    {
        viewPropertyModal = false;
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task EditProperty(Property property)
    {
        selectedProperty = property;
        editPropertyModal = true;
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task EditPropertyClosed()
    {
        editPropertyModal = true;
        await LoadProperties();
        await InvokeAsync(() => this.StateHasChanged());
    }

    private void AddNewProperty()
    {
        showAddPropertyModal = true;
    }

    // Helper method to format the address
    private string GetFormattedAddress(Property property)
    {
        if (property.Address == null)
            return "Address not available";

        var parts = new List<string>();

        if (!string.IsNullOrEmpty(property.Address.Street))
            parts.Add(property.Address.Street);

        if (!string.IsNullOrEmpty(property.Address.Suburb))
            parts.Add(property.Address.Suburb);

        if (!string.IsNullOrEmpty(property.Address.City))
            parts.Add(property.Address.City);

        if (!string.IsNullOrEmpty(property.Address.Province))
            parts.Add(property.Address.Province);

        if (!string.IsNullOrEmpty(property.Address.PostalCode))
            parts.Add(property.Address.PostalCode);

        return string.Join(", ", parts);
    }

    public async Task AddPropertyModalClosed()
    {
        showAddPropertyModal = false;
        await LoadProperties();
    }
}

<style>
    /* Property Card Styles */
    .property-image-container {
        position: relative;
        overflow: hidden;
    }

    .property-placeholder {
        transition: all 0.3s ease;
    }

    .card:hover .property-placeholder {
        transform: scale(1.05);
    }

    /* Set max width on cards so they are all the same size */
    .card {
        max-width: 320px;
    }

    /* Date Fix for the Current Lease Start Date */
    .custom-datetime-input {
        background-color: var(--input-bg);
        border: 1.5px solid var(--border-divider);
        border-radius: var(--border-radius-md);
        color: var(--text-primary);
        font-size: var(--font-size-base);
        padding: var(--spacing-3);
        width: 100%;
        transition: all 0.2s ease;
    }

        .custom-datetime-input:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.2);
            outline: none;
        }

    /* Status Badge Animations */
    .status-badge {
        transition: transform 0.3s ease;
    }

    .card:hover .status-badge {
        transform: translateY(-2px);
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .roovia-card-deck {
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        }
    }

    @@media (max-width: 576px) {
        .roovia-card-deck {
            grid-template-columns: 1fr;
        }
    }

    .roovia-content {
        overflow: hidden;
    }

</style>