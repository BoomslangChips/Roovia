@using Microsoft.AspNetCore.Components.Forms
@using Roovia.Models.BusinessModels
@using Roovia.Models.BusinessMappingModels

<div class="modal-backdrop"></div>
<div class="property-editor-modal">
    <div class="modal-header">
        <h3>
            <i class="fa-light fa-building-circle-arrow-right"></i>
            @(IsEdit ? "Edit Property" : "Add New Property")
        </h3>
        <button class="modal-close-btn" @onclick="OnCancel">
            <i class="fa-light fa-times"></i>
        </button>
    </div>

    <div class="modal-body">
        <EditForm Model="@Property" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="form-tabs">
                <button class="form-tab @(activeTab == "basic" ? "active" : "")" @onclick='() => activeTab = "basic"'>
                    <i class="fa-light fa-circle-info"></i> Basic Information
                </button>
                <button class="form-tab @(activeTab == "address" ? "active" : "")" @onclick='() => activeTab = "address"'>
                    <i class="fa-light fa-location-dot"></i> Location
                </button>
                <button class="form-tab @(activeTab == "financial" ? "active" : "")" @onclick='() => activeTab = "financial"'>
                    <i class="fa-light fa-money-bill-wave"></i> Financial Details
                </button>
                <button class="form-tab @(activeTab == "media" ? "active" : "")" @onclick='() => activeTab = "media"'>
                    <i class="fa-light fa-images"></i> Media
                </button>
            </div>

            <div class="form-tab-content">
                @if (activeTab == "basic")
                {
                    <div class="form-section">
                        <div class="form-row">
                            <div class="form-group required">
                                <label for="propertyName">Property Name</label>
                                <InputText id="propertyName" class="form-control" @bind-Value="Property.PropertyName" />
                                <ValidationMessage For="@(() => Property.PropertyName)" />
                            </div>

                            <div class="form-group required">
                                <label for="propertyCode">Property Code</label>
                                <InputText id="propertyCode" class="form-control" @bind-Value="Property.PropertyCode" />
                                <ValidationMessage For="@(() => Property.PropertyCode)" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="customerRef">Customer Reference</label>
                                <InputText id="customerRef" class="form-control" @bind-Value="Property.CustomerRef" />
                            </div>

                            <div class="form-group required">
                                <label for="propertyType">Property Type</label>
                                <InputSelect id="propertyType" class="form-control" @bind-Value="Property.PropertyTypeId">
                                    @foreach (var type in PropertyTypes)
                                    {
                                        <option value="@type.Id">@type.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => Property.PropertyTypeId)" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group required">
                                <label for="owner">Property Owner</label>
                                <InputSelect id="owner" class="form-control" @bind-Value="Property.OwnerId">
                                    <option value="">-- Select Owner --</option>
                                    @foreach (var owner in PropertyOwners)
                                    {
                                        <option value="@owner.Id">@(owner.DisplayName ?? $"{owner.FirstName} {owner.LastName}")</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => Property.OwnerId)" />
                            </div>

                            <div class="form-group required">
                                <label for="status">Status</label>
                                <InputSelect id="status" class="form-control" @bind-Value="Property.StatusId">
                                    @foreach (var status in PropertyStatusTypes)
                                    {
                                        <option value="@status.Id">@status.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => Property.StatusId)" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="tags">Tags</label>
                            <InputText id="tags" class="form-control" placeholder="Comma separated tags" @bind-Value="Property.Tags" />
                        </div>
                    </div>
                }
                else if (activeTab == "address")
                {
                    <div class="form-section">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="unitNumber">Unit Number</label>
                                <InputText id="unitNumber" class="form-control" @bind-Value="Property.Address.UnitNumber" />
                            </div>

                            <div class="form-group">
                                <label for="complexName">Complex/Estate Name</label>
                                <InputText id="complexName" class="form-control" @bind-Value="Property.Address.ComplexName" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="buildingName">Building Name</label>
                                <InputText id="buildingName" class="form-control" @bind-Value="Property.Address.BuildingName" />
                            </div>

                            <div class="form-group">
                                <label for="floor">Floor</label>
                                <InputText id="floor" class="form-control" @bind-Value="Property.Address.Floor" />
                            </div>
                        </div>

                        <div class="form-group required">
                            <label for="street">Street Address</label>
                            <InputText id="street" class="form-control" @bind-Value="Property.Address.Street" />
                            <ValidationMessage For="@(() => Property.Address.Street)" />
                        </div>

                        <div class="form-row">
                            <div class="form-group required">
                                <label for="suburb">Suburb</label>
                                <InputText id="suburb" class="form-control" @bind-Value="Property.Address.Suburb" />
                                <ValidationMessage For="@(() => Property.Address.Suburb)" />
                            </div>

                            <div class="form-group required">
                                <label for="city">City</label>
                                <InputText id="city" class="form-control" @bind-Value="Property.Address.City" />
                                <ValidationMessage For="@(() => Property.Address.City)" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group required">
                                <label for="province">Province</label>
                                <InputText id="province" class="form-control" @bind-Value="Property.Address.Province" />
                                <ValidationMessage For="@(() => Property.Address.Province)" />
                            </div>

                            <div class="form-group required">
                                <label for="postalCode">Postal Code</label>
                                <InputText id="postalCode" class="form-control" @bind-Value="Property.Address.PostalCode" />
                                <ValidationMessage For="@(() => Property.Address.PostalCode)" />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group required">
                                <label for="country">Country</label>
                                <InputText id="country" class="form-control" @bind-Value="Property.Address.Country" />
                                <ValidationMessage For="@(() => Property.Address.Country)" />
                            </div>

                            <div class="form-group">
                                <label for="gateCode">Gate/Access Code</label>
                                <InputText id="gateCode" class="form-control" @bind-Value="Property.Address.GateCode" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="deliveryInstructions">Delivery Instructions</label>
                            <InputTextArea id="deliveryInstructions" class="form-control" @bind-Value="Property.Address.DeliveryInstructions" />
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="isResidential" class="form-check-input" @bind-Value="Property.Address.IsResidential" />
                            <label class="form-check-label" for="isResidential">This is a residential property</label>
                        </div>
                    </div>
                }
                else if (activeTab == "financial")
                {
                    <div class="form-section">
                        <div class="form-row">
                            <div class="form-group required">
                                <label for="rentalAmount">Monthly Rental Amount</label>
                                <div class="input-group">
                                    <span class="input-group-text">R</span>
                                    <InputNumber id="rentalAmount" class="form-control" @bind-Value="Property.RentalAmount" />
                                </div>
                                <ValidationMessage For="@(() => Property.RentalAmount)" />
                            </div>

                            <div class="form-group">
                                <label for="propertyBalance">Property Account Balance</label>
                                <div class="input-group">
                                    <span class="input-group-text">R</span>
                                    <InputNumber id="propertyBalance" class="form-control" @bind-Value="Property.PropertyAccountBalance" />
                                </div>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group required">
                                <label for="commissionType">Commission Type</label>
                                <InputSelect id="commissionType" class="form-control" @bind-Value="Property.CommissionTypeId">
                                    @foreach (var type in CommissionTypes)
                                    {
                                        <option value="@type.Id">@type.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => Property.CommissionTypeId)" />
                            </div>

                            <div class="form-group required">
                                <label for="commissionValue">Commission Value</label>
                                <div class="input-group">
                                    @if (Property.CommissionTypeId == 1) // Assuming 1 is Percentage
                                    {
                                        <InputNumber id="commissionValue" class="form-control" @bind-Value="Property.CommissionValue" />
                                        <span class="input-group-text">%</span>
                                    }
                                    else
                                    {
                                        <span class="input-group-text">R</span>
                                        <InputNumber id="commissionValue" class="form-control" @bind-Value="Property.CommissionValue" />
                                    }
                                </div>
                                <ValidationMessage For="@(() => Property.CommissionValue)" />
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="serviceLevel">Service Level</label>
                            <InputSelect id="serviceLevel" class="form-control" @bind-Value="Property.ServiceLevel">
                                <option value="Standard">Standard</option>
                                <option value="Premium">Premium</option>
                                <option value="VIP">VIP</option>
                            </InputSelect>
                        </div>

                        <div class="form-check-group">
                            <div class="form-check">
                                <InputCheckbox id="paymentsEnabled" class="form-check-input" @bind-Value="Property.PaymentsEnabled" />
                                <label class="form-check-label" for="paymentsEnabled">Enable Payments</label>
                            </div>

                            <div class="form-check">
                                <InputCheckbox id="paymentsVerify" class="form-check-input" @bind-Value="Property.PaymentsVerify" />
                                <label class="form-check-label" for="paymentsVerify">Verify Payments</label>
                            </div>
                        </div>
                    </div>
                }
                else if (activeTab == "media")
                {
                    <div class="form-section">
                        <div class="form-group">
                            <label>Property Main Image</label>

                            <div class="image-upload-area">
                                @if (Property.MainImageId.HasValue && Property.MainImage != null)
                                {
                                    <div class="current-image">
                                        <img src="@Property.MainImage.Url" alt="Property Image" />
                                        <button type="button" class="remove-image-btn" @onclick="RemoveMainImage">
                                            <i class="fa-light fa-trash"></i>
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div class="upload-placeholder">
                                        <i class="fa-light fa-cloud-arrow-up"></i>
                                        <p>Drag & drop an image or click to browse</p>
                                        <InputFile OnChange="OnFileSelected" class="file-input" accept="image/*" />
                                    </div>
                                }
                            </div>

                            @if (isUploading)
                            {
                                <div class="upload-progress">
                                    <div class="upload-progress-bar" style="width: @uploadProgress%"></div>
                                </div>
                                <p class="upload-status">Uploading... @uploadProgress%</p>
                            }
                        </div>
                    </div>
                }
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-outline" @onclick="OnCancel">Cancel</button>
                <button type="submit" class="btn btn-primary" disabled="@IsLoading">
                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Saving...</span>
                    }
                    else
                    {
                        <span>@(IsEdit ? "Update Property" : "Create Property")</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

<style>
    /* Modal Styles */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(4px);
        z-index: 999;
    }

    .property-editor-modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 90%;
        max-width: 900px;
        max-height: 90vh;
        background-color: var(--content-bg);
        border-radius: 12px;
        box-shadow: var(--shadow-xl);
        z-index: 1000;
        display: flex;
        flex-direction: column;
        animation: modal-in 0.3s ease;
    }

    @@keyframes modal-in {
        from

    {
        opacity: 0;
        transform: translate(-50%, -48%);
    }

    to {
        opacity: 1;
        transform: translate(-50%, -50%);
    }

    }

    .modal-header {
        padding: 1.25rem;
        border-bottom: 1px solid var(--border-divider);
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: var(--subtle-bg);
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
    }

        .modal-header h3 {
            margin: 0;
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

    .modal-close-btn {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: none;
        border: none;
        color: var(--text-secondary);
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .modal-close-btn:hover {
            background-color: var(--primary-light);
            color: var(--primary);
        }

    .modal-body {
        padding: 0;
        overflow-y: auto;
        flex: 1;
    }

    .modal-footer {
        padding: 1.25rem;
        border-top: 1px solid var(--border-divider);
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        background-color: var(--subtle-bg);
        border-bottom-left-radius: 12px;
        border-bottom-right-radius: 12px;
    }

    /* Form Tabs */
    .form-tabs {
        display: flex;
        overflow-x: auto;
        border-bottom: 1px solid var(--border-divider);
        background-color: var(--subtle-bg);
    }

    .form-tab {
        padding: 1rem 1.25rem;
        background: none;
        border: none;
        color: var(--text-secondary);
        font-size: 0.9375rem;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        white-space: nowrap;
        border-bottom: 2px solid transparent;
    }

        .form-tab:hover {
            color: var(--primary);
            background-color: rgba(var(--primary-rgb), 0.05);
        }

        .form-tab.active {
            color: var(--primary);
            border-bottom-color: var(--primary);
            background-color: rgba(var(--primary-rgb), 0.08);
        }

    /* Form Content */
    .form-tab-content {
        padding: 1.5rem;
    }

    .form-section {
        margin-bottom: 1.5rem;
    }

    .form-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

        .form-group.required label::after {
            content: " *";
            color: var(--danger);
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--text-primary);
        }

    .form-control {
        width: 100%;
        padding: 0.625rem 0.875rem;
        border: 1px solid var(--border-color);
        border-radius: 6px;
        font-size: 0.9375rem;
        color: var(--text-primary);
        background-color: var(--input-bg);
        transition: all 0.2s ease;
    }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.15);
        }

        .form-control.invalid {
            border-color: var(--danger);
        }

    .validation-message {
        color: var(--danger);
        font-size: 0.8125rem;
        margin-top: 0.25rem;
    }

    .input-group {
        display: flex;
        align-items: center;
    }

    .input-group-text {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0.625rem 0.875rem;
        background-color: var(--subtle-bg);
        border: 1px solid var(--border-color);
        border-right: none;
        border-top-left-radius: 6px;
        border-bottom-left-radius: 6px;
        color: var(--text-secondary);
        font-size: 0.9375rem;
    }

    .input-group .form-control {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
        flex: 1;
    }

    .input-group .input-group-text:last-child {
        border-right: 1px solid var(--border-color);
        border-left: none;
        border-radius: 0 6px 6px 0;
    }

    .form-check-group {
        display: flex;
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .form-check-input {
        width: 18px;
        height: 18px;
        margin: 0;
    }

    .form-check-label {
        font-size: 0.9375rem;
        color: var(--text-secondary);
    }

    /* Image Upload */
    .image-upload-area {
        border: 2px dashed var(--border-color);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        position: relative;
        transition: all 0.2s ease;
    }

        .image-upload-area:hover {
            border-color: var(--primary);
            background-color: rgba(var(--primary-rgb), 0.03);
        }

    .upload-placeholder {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 2rem;
        color: var(--text-muted);
        text-align: center;
        position: relative;
    }

        .upload-placeholder i {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .upload-placeholder p {
            margin: 0 0 1rem;
            font-size: 0.9375rem;
        }

    .file-input {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }

    .current-image {
        position: relative;
        width: 100%;
        height: 200px;
        border-radius: 6px;
        overflow: hidden;
    }

        .current-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .remove-image-btn {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .remove-image-btn:hover {
            background-color: var(--danger);
        }

    .upload-progress {
        height: 6px;
        background-color: var(--border-light);
        border-radius: 3px;
        overflow: hidden;
        margin-bottom: 0.5rem;
    }

    .upload-progress-bar {
        height: 100%;
        background-color: var(--primary);
        transition: width 0.3s ease;
    }

    .upload-status {
        font-size: 0.8125rem;
        color: var(--text-secondary);
        margin: 0;
    }

    /* Buttons */
    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 0.625rem 1.25rem;
        border-radius: 6px;
        font-size: 0.9375rem;
        font-weight: 500;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-primary {
        background-color: var(--primary);
        color: white;
    }

        .btn-primary:hover {
            background-color: var(--primary-hover);
        }

        .btn-primary:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

    .btn-outline {
        background-color: transparent;
        border: 1px solid var(--border-color);
        color: var(--text-secondary);
    }

        .btn-outline:hover {
            background-color: var(--subtle-bg);
            color: var(--text-primary);
        }

    .spinner-border {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        border: 2px solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    @@keyframes spinner-border {
        to

    {
        transform: rotate(360deg);
    }

    }

    .me-2 {
        margin-right: 0.5rem;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .property-editor-modal

    {
        width: 95%;
        max-height: 95vh;
    }

    .form-row {
        grid-template-columns: 1fr;
    }

    .form-tabs {
        overflow-x: auto;
    }

    .form-tab {
        padding: 0.75rem 1rem;
        font-size: 0.875rem;
    }

    }
</style>

@code {
    [Parameter] public Property Property { get; set; }
    [Parameter] public List<PropertyStatusType> PropertyStatusTypes { get; set; } = new();
    [Parameter] public List<PropertyType> PropertyTypes { get; set; } = new();
    [Parameter] public List<PropertyOwner> PropertyOwners { get; set; } = new();
    [Parameter] public List<CommissionType> CommissionTypes { get; set; } = new();
    [Parameter] public EventCallback<Property> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public bool IsLoading { get; set; }

    private string activeTab = "basic";
    private bool isUploading = false;
    private int uploadProgress = 0;

    private async Task HandleValidSubmit()
    {
        await OnSave.InvokeAsync(Property);
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        // In a real implementation, this would handle file uploads
        // For now, we'll just simulate progress
        isUploading = true;
        uploadProgress = 0;

        // Simulate upload progress
        var timer = new System.Threading.Timer(async _ =>
        {
            uploadProgress += 10;

            if (uploadProgress >= 100)
            {
                isUploading = false;

                // Simulate setting the image
                Property.MainImageId = 1; // This would be the actual image ID

                await InvokeAsync(StateHasChanged);
            }

            await InvokeAsync(StateHasChanged);
        }, null, 0, 300);
    }

    private void RemoveMainImage()
    {
        Property.MainImageId = null;
        Property.MainImage = null;
    }
}