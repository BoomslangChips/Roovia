@using Roovia.Interfaces
@using Roovia.Models.Helper
@using Roovia.Models.Properties
@using Roovia.Models.PropertyOwner
@using Roovia.Models.Tenant
@using Roovia.Models.Users
@using Roovia.Models
@using Roovia.Services
@using System.Globalization
@using static Roovia.Components.Elements.RVDropdown

@rendermode InteractiveServer
@page "/editproperty"

<RVModal CloseOnBackdrop="true" CloseOnEsc="true" Icon="fas fa-edit" IsVisible="@IsVisible" Size="ModalSize.Large">
    <ChildContent>
        <div class="rv-modal-custom">
            <div class="container-fluid">
                <!-- Property Details Section -->
                <div class="roovia-panel mb-4">
                    <div class="roovia-panel-header">
                        <h5 class="roovia-panel-title"><i class="fas fa-building me-2"></i>Edit Property Details</h5>
                    </div>
                    <div class="roovia-panel-body">
                        <!-- Owner Information (read-only) -->
                        <div class="roovia-col-md-12 p-5">
                            <h6 class="text-primary mb-3">Owner Information</h6>
                            <RVTextbox Label="Owner"
                            Value="@OwnerName"
                            Disabled="true">
                            </RVTextbox>
                        </div>

                        <div class="roovia-grid-cols-1 roovia-grid-cols-md-2 roovia-grid gap-4">
                            <!-- Location Information -->
                            <div class="roovia-col-md-6">
                                <h6 class="text-primary mb-3">Location Information</h6>
                                <div class="mb-3">
                                    <RVTextbox Label="Street"
                                    Value="@Property.Address.Street"
                                    @onchange="(e => Property.Address.Street = e.Value.ToString())"
                                    Placeholder="Street address">
                                    </RVTextbox>
                                </div>
                                <div class="roovia-grid-cols-2 roovia-grid gap-3">
                                    <div>
                                        <RVTextbox Label="Unit Number"
                                        Value="@Property.Address.UnitNumber"
                                        @onchange="(e => Property.Address.UnitNumber = e.Value.ToString())"
                                        Placeholder="Unit #">
                                        </RVTextbox>
                                    </div>
                                    <div>
                                        <RVTextbox Label="Floor"
                                        Value="@Property.Address.Floor"
                                        @onchange="(e => Property.Address.Floor = e.Value.ToString())"
                                        Placeholder="Floor level">
                                        </RVTextbox>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <RVTextbox Label="Complex Name"
                                    Value="@Property.Address.ComplexName"
                                    @onchange="(e => Property.Address.ComplexName = e.Value.ToString())"
                                    Placeholder="Complex name">
                                    </RVTextbox>
                                </div>
                                <div class="mb-3">
                                    <RVTextbox Label="Building Name"
                                    Value="@Property.Address.BuildingName"
                                    @onchange="(e => Property.Address.BuildingName = e.Value.ToString())"
                                    Placeholder="Building name">
                                    </RVTextbox>
                                </div>
                            </div>

                            <!-- City/Region Information -->
                            <div class="roovia-col-md-6">
                                <h6 class="text-primary mb-3">City/Region Information</h6>
                                <div class="roovia-grid-cols-2 roovia-grid gap-3">
                                    <div>
                                        <RVTextbox Label="City"
                                        Value="@Property.Address.City"
                                        @onchange="(e => Property.Address.City = e.Value.ToString())"
                                        Placeholder="City">
                                        </RVTextbox>
                                    </div>
                                    <div>
                                        <RVTextbox Label="Suburb"
                                        Value="@Property.Address.Suburb"
                                        @onchange="(e => Property.Address.Suburb = e.Value.ToString())"
                                        Placeholder="Suburb">
                                        </RVTextbox>
                                    </div>
                                </div>
                                <div class="roovia-grid-cols-2 roovia-grid gap-3 mt-3">
                                    <div>
                                        <RVTextbox Label="Province"
                                        Value="@Property.Address.Province"
                                        @onchange="(e => Property.Address.Province = e.Value.ToString())"
                                        Placeholder="Province/State">
                                        </RVTextbox>
                                    </div>
                                    <div>
                                        <RVTextbox Label="Postal Code"
                                        Value="@Property.Address.PostalCode"
                                        @onchange="(e => Property.Address.PostalCode = e.Value.ToString())"
                                        Placeholder="Postal/ZIP Code">
                                        </RVTextbox>
                                    </div>
                                </div>
                                <div class="mb-3 mt-3">
                                    <RVTextbox Label="Country"
                                    Value="@Property.Address.Country"
                                    @onchange="(e => Property.Address.Country = e.Value.ToString())"
                                    Placeholder="Country">
                                    </RVTextbox>
                                </div>
                                <div class="mb-3">
                                    <RVCheckbox Label="Is Residential"
                                    Value="@Property.Address.IsResidential"
                                    @onchange="(e => Property.Address.IsResidential = e.Value is bool value && value)">
                                    </RVCheckbox>
                                </div>
                            </div>
                        </div>

                        <!-- Access Information Section -->
                        <div class="roovia-panel-subsection mt-4">
                            <h6 class="text-primary mb-3">Access Information</h6>
                            <div class="roovia-grid-cols-1 roovia-grid-cols-md-2 roovia-grid gap-3">
                                <div>
                                    <RVTextbox Label="Gate Code"
                                    Value="@Property.Address.GateCode"
                                    @onchange="(e => Property.Address.GateCode = e.Value.ToString())"
                                    Placeholder="Gate code">
                                    </RVTextbox>
                                </div>
                                <div>
                                    <RVTextbox Label="Delivery Instructions"
                                    Value="@Property.Address.DeliveryInstructions"
                                    @onchange="(e => Property.Address.DeliveryInstructions = e.Value.ToString())"
                                    Placeholder="Delivery instructions">
                                    </RVTextbox>
                                </div>
                            </div>
                        </div>

                        <!-- Lease Information Section -->
                        <div class="roovia-panel-subsection mt-4">
                            <h6 class="text-primary mb-3">Lease Information</h6>
                            <div class="roovia-grid-cols-1 roovia-grid-cols-md-3 roovia-grid gap-3">
                                <div>
                                    <RVTextbox Label="Rental Amount"
                                    Type="decimal"
                                    Value="@Property.RentalAmount.ToString()"
                                    @onchange="(e => Property.RentalAmount = decimal.TryParse(e.Value?.ToString(), out var val) ? val : Property.RentalAmount)"
                                    Placeholder="Monthly rent">
                                    </RVTextbox>
                                </div>
                                <div>
                                    <div class="form-floating mb-3">
                                        <div class="rv-form-group">
                                            <label class="form-label">Lease Original Start Date</label>
                                            <input type="datetime-local"
                                            class="custom-datetime-input"
                                            value="@(Property.LeaseOriginalStartDate.HasValue && Property.LeaseOriginalStartDate.Value != DateTime.MinValue ? Property.LeaseOriginalStartDate.Value.ToString("yyyy-MM-ddTHH:mm") : string.Empty)"
                                            @onchange="(e => Property.LeaseOriginalStartDate = DateTime.TryParse(e.Value?.ToString(), out var d) ? d : Property.LeaseOriginalStartDate)" />
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <RVCheckbox Label="Has Tenant"
                                    Value="@Property.HasTenant"
                                    @onchange="(e => Property.HasTenant = (bool)e.Value)">
                                    </RVCheckbox>
                                </div>
                            </div>
                            <div class="roovia-grid-cols-1 roovia-grid-cols-md-2 roovia-grid gap-3 mt-3">
                                <div>
                                    <div class="form-floating mb-3">
                                        <div class="rv-form-group">
                                            <label class="roovia-textbox-label">Current Lease Start Date</label>
                                            <input type="datetime-local"
                                            class="custom-datetime-input"
                                            value="@(Property.CurrentLeaseStartDate.HasValue && Property.CurrentLeaseStartDate.Value != DateTime.MinValue ? Property.CurrentLeaseStartDate.Value.ToString("yyyy-MM-ddTHH:mm") : string.Empty)"
                                            @onchange="(e => Property.CurrentLeaseStartDate = DateTime.TryParse(e.Value?.ToString(), out var d) ? d : Property.CurrentLeaseStartDate)" />
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <div class="form-floating mb-3">
                                        <div class="rv-form-group">
                                            <label class="roovia-textbox-label">Lease End Date</label>
                                            <input type="datetime-local"
                                            class="custom-datetime-input"
                                            value="@(Property.LeaseEndDate.HasValue && Property.LeaseEndDate.Value != DateTime.MinValue ? Property.LeaseEndDate.Value.ToString("yyyy-MM-ddTHH:mm") : string.Empty)"
                                            @onchange="(e => Property.LeaseEndDate = DateTime.TryParse(e.Value?.ToString(), out var d) ? d : Property.LeaseEndDate)" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    
        @if (Tenant != null && Tenant.Id > 0)
        {
            <div class="roovia-panel mb-4">
                <div class="roovia-panel-header">
                    <h5 class="roovia-panel-title"><i class="fas fa-user"></i> Tenant Summary</h5>
                </div>
                <div class="roovia-panel-body">
                    <p><strong>Name:</strong> @Tenant.FirstName @Tenant.LastName</p>
                    <p><strong>Email:</strong> @Tenant.EmailAddress</p>
                    <p><strong>Mobile:</strong> @Tenant.MobileNumber</p>
                    <p><strong>ID Number:</strong> @Tenant.IdNumber</p>
                </div>
            </div>
        }
    </ChildContent>
    <FooterContent>
        <div class="d-flex justify-content-between w-100">
            <div>
                <RVButton CssClass="roovia-btn me-2" Disabled="Tenant.Id > 0" OnClick="LinkExistingTenant">
                    <i class="fas fa-link"></i>
                </RVButton>
                <RVButton CssClass="roovia-btn me-2" Disabled="Tenant.Id > 0" OnClick="CreateNewTenant">
                    <i class="fas fa-user-plus"></i>
                </RVButton>
                <RVButton CssClass="btn roovia-btn me-2" OnClick="SaveProperty" >
                    <i class="fas fa-save"></i>
                </RVButton>
                <RVButton CssClass="btn roovia-btn" OnClick="CloseModal" >
                    <i class="fas fa-times"></i>
                </RVButton>
            </div>
        </div>
    </FooterContent>
</RVModal>

@if (createTenantVisible)
{
    <CascadingValue TValue="ApplicationUser" Value="CurrentUser">
        <CascadingValue TValue="Property" Value="Property">
            <Roovia.Components.Pages.Tenants.CreateTenantComponent></Roovia.Components.Pages.Tenants.CreateTenantComponent>
        </CascadingValue>
    </CascadingValue>
}

@code {
    [CascadingParameter]
    public ApplicationUser CurrentUser { get; set; } = new ApplicationUser();

    [CascadingParameter]
    public Property Property { get; set; } = new Property();

    [Parameter]
    public EventCallback<bool> OnModalClosed { get; set; }

    [Inject]
    public IProperty PropertyService { get; set; }

    [Inject]
    public IPropertyOwner PropertyOwnerService { get; set; }

    [Inject]
    public ToastService ToastService { get; set; }

    [Inject]
    public ITenant TenantService { get; set; }

    bool IsVisible = true;
    string OwnerName = "";

    PropertyTenant Tenant = new();

    bool createTenantVisible = false;

    protected override async Task OnInitializedAsync()
    {
        // Assuming Property.OwnerId is set, load owner details to display name.
        if (Property.OwnerId != 0)
        {
            var ownerResponse = await PropertyOwnerService.GetPropertyOwnerById(CurrentUser.CompanyId.Value, Property.OwnerId);
            if (ownerResponse.ResponseInfo.Success)
            {
                var owner = ownerResponse.Response as PropertyOwner;
                OwnerName = owner != null ? $"{owner.FirstName} {owner.LastName}" : "Unknown Owner";
            }
        }

        await GetTenant();
    }

    private async Task GetTenant()
    {
        var tenantResponse = await TenantService.GetTenantWithPropertyId(Property.Id);
        if (tenantResponse.ResponseInfo.Success)
        {
            Tenant = tenantResponse.Response as PropertyTenant;
            if (Tenant != null)
            {
                Property.HasTenant = true;
            }
        }
        else
        {
            ToastService.ShowError($"{tenantResponse.ResponseInfo.Message}", "Error!");
        }
    }

    private async Task SaveProperty()
    {
        try
        {
            Property.UpdatedBy = Guid.Parse(CurrentUser.Id);
            Property.UpdatedDate = DateTime.UtcNow;
            var response = await PropertyService.UpdateProperty(Property.Id, Property, CurrentUser.CompanyId.Value);

            if (!response.ResponseInfo.Success)
            {
                ToastService.ShowError($"{response.ResponseInfo.Message}", "Error!");
            }
            else
            {
                ToastService.ShowSuccess($"{response.ResponseInfo.Message}", "Success!");
                await CloseModal();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"An error occurred: {ex.Message}", "Error!");
        }
    }

    private async Task LinkExistingTenant()
    {
        // Implement logic to link an existing tenant
        ToastService.ShowInfo("Link Existing Tenant clicked", "Info");
        await Task.CompletedTask;
    }

    private async Task CreateNewTenant()
    {
        createTenantVisible = true;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task CloseModal()
    {
        IsVisible = false;
        await OnModalClosed.InvokeAsync(true);
    }
}

<style>
    .rv-modal-custom {
        max-width: 100%;
        margin: 0 auto;
    }

    .roovia-panel {
        background-color: var(--content-bg);
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--border-divider);
        overflow: hidden;
        transition: var(--card-transition);
    }

    .roovia-panel-header {
        padding: 1rem;
        border-bottom: 1px solid var(--border-divider);
        background-color: var(--subtle-bg);
    }

    .roovia-panel-body {
        padding: 1.5rem;
    }

    .roovia-panel-subsection {
        padding-top: 1rem;
        border-top: 1px solid var(--border-light);
    }

    .rv-form-group {
        margin-bottom: 1rem;
    }

    .rv-form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: var(--text-primary);
    }

    .custom-datetime-input {
        padding: 0.5rem;
        border: 1px solid var(--border-color);
        border-radius: 0.25rem;
        font-size: 1rem;
        background-color: var(--content-bg);
        color: var(--text-primary);
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .custom-datetime-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 5px var(--primary);
        }
</style>
