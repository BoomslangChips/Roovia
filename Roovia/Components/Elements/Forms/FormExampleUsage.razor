@page "/example-form"
@using System.ComponentModel.DataAnnotations
@using Roovia.Forms
@rendermode InteractiveServer

<div class="container">
    <div class="roovia-section-header">
        <h2 class="roovia-section-title">Form Validation Example</h2>
        <div class="roovia-section-subtitle">
            Demonstration of the Roovia Form Validation System
        </div>
    </div>

    <RVForm Model="@registrationModel"
            Title="User Registration"
            Icon="far fa-user-plus"
            Name="Example"
            ValidationMode="ValidationModeType.DataAnnotations"
            ValidationTrigger="ValidationTriggerType.OnChange"
            ShowValidationSummary="true"
            
           OnSubmit="@(CreateSubmitCallback<RegistrationModel>(HandleFormSubmit))">

        <RVFormGroup Title="Personal Information" Icon="far fa-user" Collapsible="true" InitiallyExpanded="true">
            <RVFormRow Columns="2">
                <RVFormField Label="First Name" Required="true" For="@(() => registrationModel.FirstName)">
                    <RVTextbox @bind-Value="registrationModel.FirstName" />
                </RVFormField>

                <RVFormField Label="Last Name" Required="true" For="@(() => registrationModel.LastName)">
                    <RVTextbox @bind-Value="registrationModel.LastName" />
                </RVFormField>
            </RVFormRow>

            <RVFormRow Columns="1">
                <RVFormField Label="Email Address" Required="true" For="@(() => registrationModel.Email)">
                    <RVTextbox @bind-Value="registrationModel.Email" Type="email" IconLeft="far fa-envelope" />
                </RVFormField>
            </RVFormRow>

            <RVFormRow Columns="2">
                <RVFormField Label="Date of Birth" For="@(() => registrationModel.DateOfBirth)">
                    <RVDateTimePicker @bind-Value="registrationModel.DateOfBirth" IncludeTime="false" />
                </RVFormField>

                <RVFormField Label="Phone Number" For="@(() => registrationModel.PhoneNumber)">
                    <RVTextbox @bind-Value="registrationModel.PhoneNumber" IconLeft="far fa-phone" />
                </RVFormField>
            </RVFormRow>
        </RVFormGroup>

        <RVFormGroup Title="Account Information" Icon="far fa-lock" Collapsible="true" InitiallyExpanded="true">
            <RVFormRow Columns="1">
                <RVFormField Label="Username" Required="true" For="@(() => registrationModel.Username)">
                    <RVTextbox @bind-Value="registrationModel.Username" IconLeft="far fa-user" />
                </RVFormField>
            </RVFormRow>

            <RVFormRow Columns="2">
                <RVFormField Label="Password" Required="true" For="@(() => registrationModel.Password)"
                             HelperText="Password must be at least 8 characters long and include numbers and special characters.">
                    <RVTextbox @bind-Value="registrationModel.Password" Type="password" IconLeft="far fa-lock" />
                </RVFormField>

                <RVFormField Label="Confirm Password" Required="true" For="@(() => registrationModel.ConfirmPassword)">
                    <RVTextbox @bind-Value="registrationModel.ConfirmPassword" Type="password" IconLeft="far fa-lock" />
                </RVFormField>
            </RVFormRow>
        </RVFormGroup>

        <RVFormGroup Title="Preferences" Icon="far fa-cog">
            <RVFormRow Columns="1">
                <RVFormField Label="Preferred Contact Method" For="@(() => registrationModel.PreferredContactMethod)">
                    <RVDropdown @bind-SelectedValue="registrationModel.PreferredContactMethod" Items="contactMethodOptions" />
                </RVFormField>
            </RVFormRow>

            <RVFormRow Columns="1">
                <RVFormField For="@(() => registrationModel.ReceiveNewsletters)">
                    <RVCheckbox @bind-Value="registrationModel.ReceiveNewsletters" Label="I would like to receive newsletters and updates" />
                </RVFormField>
            </RVFormRow>

            <RVFormRow Columns="1">
                <RVFormField For="@(() => registrationModel.AgreeToTerms)" Required="true">
                    <RVCheckbox @bind-Value="registrationModel.AgreeToTerms" Label="I agree to the <a href='#'>Terms and Conditions</a>" />
                </RVFormField>
            </RVFormRow>
        </RVFormGroup>

    </RVForm>

    @if (formSubmitted)
    {
        <RVCard Type="border-success">
            <div class="p-4">
                <h4><i class="far fa-check-circle text-success"></i> Form Submitted Successfully</h4>
                <p>Thank you for registering, @registrationModel.FirstName!</p>
            </div>
        </RVCard>
    }
</div>

@code {
    private RegistrationModel registrationModel = new RegistrationModel();
    private bool formSubmitted = false;

    private List<RVDropdown.DropdownItem> contactMethodOptions = new List<RVDropdown.DropdownItem>
    {
        new RVDropdown.DropdownItem { Text = "Email", Value = "email", Icon = "far fa-envelope" },
        new RVDropdown.DropdownItem { Text = "Phone", Value = "phone", Icon = "far fa-phone" },
        new RVDropdown.DropdownItem { Text = "Text Message", Value = "sms", Icon = "far fa-comment" }
    };

    private async Task HandleFormSubmit(FormSubmitEventArgs<RegistrationModel> args)
    {
        if (args.IsValid)
        {
            // In a real application, you would call your API service here
            await Task.Delay(1000); // Simulate API call
            formSubmitted = true;
            StateHasChanged();
        }
    }
    private EventCallback<FormSubmitEventArgs<T>> CreateSubmitCallback<T>(
    Func<FormSubmitEventArgs<T>, Task> handler) where T : class
    {
        return EventCallback.Factory.Create<FormSubmitEventArgs<T>>(this, handler);
    }
    public class RegistrationModel
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, ErrorMessage = "First name cannot exceed 50 characters")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, ErrorMessage = "Last name cannot exceed 50 characters")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; }

        public DateTime? DateOfBirth { get; set; }

        [Phone(ErrorMessage = "Please enter a valid phone number")]
        public string PhoneNumber { get; set; }

        [Required(ErrorMessage = "Username is required")]
        [MinLength(5, ErrorMessage = "Username must be at least 5 characters")]
        [RegularExpression(@"^[a-zA-Z0-9_-]+$", ErrorMessage = "Username can only contain letters, numbers, underscores and hyphens")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters")]
        [RegularExpression(@"^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$",
                          ErrorMessage = "Password must contain at least one letter, one number, and one special character")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }

        public string PreferredContactMethod { get; set; } = "email";

        public bool ReceiveNewsletters { get; set; } = true;

        [Required(ErrorMessage = "You must agree to the terms and conditions")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the terms and conditions")]
        public bool AgreeToTerms { get; set; }
    }
}