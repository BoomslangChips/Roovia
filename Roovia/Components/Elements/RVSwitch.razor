@* RVSwitch.razor - Modern Toggle Switch *@
<div class="roovia-switch-container @CssClass">
    <label class="roovia-switch @(Disabled ? "disabled" : "")">
        <input type="checkbox"
               checked="@Value"
               @onchange="OnChangeHandler"
               disabled="@Disabled" />
        <span class="roovia-switch-slider"></span>
        @if (!string.IsNullOrEmpty(Label))
        {
            <span class="roovia-switch-label">@Label</span>
        }
    </label>
    @if (!string.IsNullOrEmpty(HelperText))
    {
        <div class="roovia-switch-helper-text">@HelperText</div>
    }
</div>

<style>
    /* Switch Component Styles */
    .roovia-switch-container {
        margin-bottom: var(--spacing-3);
    }

    .roovia-switch {
        position: relative;
        display: inline-flex;
        align-items: center;
        cursor: pointer;
        -webkit-tap-highlight-color: transparent;
    }

        .roovia-switch input {
            opacity: 0;
            width: 0;
            height: 0;
            position: absolute;
        }

    .roovia-switch-slider {
        position: relative;
        display: inline-block;
        width: 36px;
        height: 20px;
        background-color: var(--border-divider);
        border-radius: 34px;
        transition: all 0.3s ease;
        flex-shrink: 0;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

        .roovia-switch-slider::before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 2px;
            bottom: 2px;
            background-color: white;
            border-radius: 50%;
            transition: all 0.3s ease;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);
        }

    .roovia-switch input:checked + .roovia-switch-slider {
        background-color: var(--primary);
    }

        .roovia-switch input:checked + .roovia-switch-slider::before {
            transform: translateX(16px);
            background-color: white;
        }

    .roovia-switch input:focus + .roovia-switch-slider {
        box-shadow: 0 0 0 2px rgba(var(--primary-rgb), 0.2);
    }

    .roovia-switch-label {
        margin-left: var(--spacing-2);
        font-size: var(--font-size-sm);
        font-weight: 500;
        color: var(--text-primary);
        user-select: none;
    }

    .roovia-switch.disabled {
        cursor: not-allowed;
        opacity: 0.6;
    }

    .roovia-switch-helper-text {
        font-size: var(--font-size-xs);
        color: var(--text-secondary);
        margin-top: var(--spacing-1);
        margin-left: calc(36px + var(--spacing-2));
    }

    /* Hover Effects */
    .roovia-switch:hover .roovia-switch-slider {
        background-color: var(--border-color);
    }

    .roovia-switch:hover input:checked + .roovia-switch-slider {
        background-color: var(--primary-hover);
    }

    /* Small Size */
    .roovia-switch.size-sm .roovia-switch-slider {
        width: 30px;
        height: 16px;
    }

        .roovia-switch.size-sm .roovia-switch-slider::before {
            height: 12px;
            width: 12px;
        }

    .roovia-switch.size-sm input:checked + .roovia-switch-slider::before {
        transform: translateX(14px);
    }

    .roovia-switch.size-sm .roovia-switch-label {
        font-size: var(--font-size-xs);
    }

    /* Large Size */
    .roovia-switch.size-lg .roovia-switch-slider {
        width: 44px;
        height: 24px;
    }

        .roovia-switch.size-lg .roovia-switch-slider::before {
            height: 20px;
            width: 20px;
        }

    .roovia-switch.size-lg input:checked + .roovia-switch-slider::before {
        transform: translateX(20px);
    }

    .roovia-switch.size-lg .roovia-switch-label {
        font-size: var(--font-size-base);
    }

    /* Dark Mode Adjustments */
    .theme-dark .roovia-switch-slider {
        background-color: var(--border-divider);
    }

    .theme-dark .roovia-switch:hover .roovia-switch-slider {
        background-color: var(--border-color);
    }

    .theme-dark .roovia-switch-slider::before {
        background-color: var(--content-bg);
    }

    /* Responsive Adjustments */
    @@media (max-width: 400px) {
        .roovia-switch-label

    {
        font-size: 12px;
    }

    .roovia-switch-helper-text {
        font-size: 10px;
    }

    }
</style>

@code {
    [Parameter] public bool Value { get; set; }
    [Parameter] public EventCallback<bool> ValueChanged { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public string HelperText { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string Size { get; set; } = "md"; // sm, md, lg
    [Parameter] public string CssClass { get; set; }
    [Parameter] public EventCallback<bool> OnChange { get; set; }

    private string SizeClass => Size.ToLowerInvariant() == "md" ? "" : $"size-{Size.ToLowerInvariant()}";

    private async Task OnChangeHandler(ChangeEventArgs e)
    {
        if (e.Value is bool newValue)
        {
            Value = newValue;

            if (ValueChanged.HasDelegate)
                await ValueChanged.InvokeAsync(Value);

            if (OnChange.HasDelegate)
                await OnChange.InvokeAsync(Value);
        }
    }
}