@* RVSwitch.razor *@
<div class="roovia-switch-container @(Disabled ? "disabled" : "") @CssClass">
    <label class="roovia-switch-wrapper">
        <div class="roovia-switch @(Value ? "active" : "")">
            <input type="checkbox"
                   id="@Id"
                   checked="@Value"
                   @onchange="OnChangeHandler"
                   disabled="@Disabled" />
            <span class="roovia-switch-track"></span>
            <span class="roovia-switch-thumb"></span>
        </div>
        @if (!string.IsNullOrEmpty(Label))
        {
            <span class="roovia-switch-label">@Label</span>
        }
        else if (ChildContent != null)
        {
            <span class="roovia-switch-label">@ChildContent</span>
        }
    </label>
    @if (!string.IsNullOrEmpty(HelperText))
    {
        <div class="roovia-switch-helper-text">@HelperText</div>
    }
</div>

<style>
    /* Switch component styles */
    .roovia-switch-container {
        display: flex;
        flex-direction: column;
        margin-bottom: var(--spacing-3);
    }

    .roovia-switch-wrapper {
        display: flex;
        align-items: center;
        gap: var(--spacing-3);
        cursor: pointer;
        padding: var(--spacing-1) 0;
    }

    .roovia-switch {
        position: relative;
        width: 36px;
        height: 20px;
        flex-shrink: 0;
    }

        .roovia-switch input {
            position: absolute;
            opacity: 0;
            width: 0;
            height: 0;
        }

    .roovia-switch-track {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: var(--border-divider);
        border-radius: var(--border-radius-pill);
        transition: background-color 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .roovia-switch.active .roovia-switch-track {
        background-color: rgba(var(--primary-rgb), 0.5);
    }

    .roovia-switch-thumb {
        position: absolute;
        top: 2px;
        left: 2px;
        width: 16px;
        height: 16px;
        background-color: white;
        border-radius: 50%;
        transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1), background-color 0.2s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    }

    .roovia-switch.active .roovia-switch-thumb {
        transform: translateX(16px);
        background-color: var(--primary);
        box-shadow: 0 1px 4px rgba(var(--primary-rgb), 0.5);
    }

    .roovia-switch-label {
        font-size: var(--font-size-sm);
        color: var(--text-secondary);
        user-select: none;
    }

    .roovia-switch-helper-text {
        font-size: var(--font-size-xs);
        color: var(--text-muted);
        margin-top: var(--spacing-1);
        margin-left: calc(36px + var(--spacing-3));
    }

    /* Hover states */
    .roovia-switch:hover .roovia-switch-thumb:not(:disabled) {
        box-shadow: 0 1px 5px rgba(0, 0, 0, 0.3);
    }

    .roovia-switch.active:hover .roovia-switch-thumb:not(:disabled) {
        box-shadow: 0 1px 5px rgba(var(--primary-rgb), 0.6);
    }

    /* Focus state */
    .roovia-switch input:focus ~ .roovia-switch-track {
        box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.2);
    }

    /* Disabled state */
    .roovia-switch-container.disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

        .roovia-switch-container.disabled .roovia-switch-wrapper {
            cursor: not-allowed;
        }

    .roovia-switch input:disabled ~ .roovia-switch-track {
        background-color: var(--subtle-bg);
        opacity: 0.5;
    }

    .roovia-switch input:disabled ~ .roovia-switch-thumb {
        background-color: var(--border-divider);
        box-shadow: none;
    }

    .roovia-switch-container.disabled .roovia-switch-label {
        color: var(--text-muted);
    }

    /* Animation enhancements */
    .roovia-switch.active .roovia-switch-thumb {
        animation: switch-bounce 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
    }

    @@keyframes switch-bounce {
        0%

    {
        transform: translateX(0);
    }

    60% {
        transform: translateX(18px);
    }

    100% {
        transform: translateX(16px);
    }

    }
</style>

@code {
    [Parameter] public string Id { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public string Label { get; set; }
    [Parameter] public bool Value { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string HelperText { get; set; }
    [Parameter] public string CssClass { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public EventCallback<bool> ValueChanged { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnChange { get; set; }

    private async Task OnChangeHandler(ChangeEventArgs e)
    {
        Value = (bool)e.Value;

        if (ValueChanged.HasDelegate)
            await ValueChanged.InvokeAsync(Value);

        if (OnChange.HasDelegate)
            await OnChange.InvokeAsync(e);
    }
}