@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Roovia.Data
@using Roovia.Models.Users
@using Roovia.Components.Layout

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@layout BlankLayout

<PageTitle>Reset password</PageTitle>

<div class="auth-page">
    <div class="auth-container">
        <div class="auth-header">
            <img src="/images/roovia-logo.png" alt="Roovia Logo" class="auth-logo">
            <h1>Reset Your Password</h1>
            <h2>Create a new secure password for your account</h2>
        </div>

        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="auth-alert auth-alert-danger">
                <i class="fal fa-exclamation-circle"></i>
                <div class="auth-alert-content">
                    <h3>Error</h3>
                    <p>@Message</p>
                </div>
            </div>
        }

        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post" class="auth-form">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <input type="hidden" name="Input.Code" value="@Input.Code" />
            <div class="form-group">
                <label for="Input.Email" class="form-label">Email Address</label>
                <div class="input-with-icon">
                    <i class="fal fa-envelope"></i>
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                </div>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="Input.Password" class="form-label">New Password</label>
                <div class="input-with-icon">
                    <i class="fal fa-lock-alt"></i>
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter your new password" />
                </div>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="Input.ConfirmPassword" class="form-label">Confirm Password</label>
                <div class="input-with-icon">
                    <i class="fal fa-lock-keyhole"></i>
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Confirm your new password" />
                </div>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <div class="password-requirements">
                <h4><i class="fal fa-shield-check"></i> Password Requirements</h4>
                <ul class="requirements-list">
                    <li class="@(Input.Password?.Length >= 8 ? "requirement-met" : "")">
                        <i class="@(Input.Password?.Length >= 8 ? "fal fa-check-circle" : "fal fa-circle")"></i>
                        At least 8 characters
                    </li>
                    <li class="@(Input.Password?.Any(char.IsUpper) == true ? "requirement-met" : "")">
                        <i class="@(Input.Password?.Any(char.IsUpper) == true ? "fal fa-check-circle" : "fal fa-circle")"></i>
                        One uppercase letter
                    </li>
                    <li class="@(Input.Password?.Any(char.IsLower) == true ? "requirement-met" : "")">
                        <i class="@(Input.Password?.Any(char.IsLower) == true ? "fal fa-check-circle" : "fal fa-circle")"></i>
                        One lowercase letter
                    </li>
                    <li class="@(Input.Password?.Any(char.IsDigit) == true ? "requirement-met" : "")">
                        <i class="@(Input.Password?.Any(char.IsDigit) == true ? "fal fa-check-circle" : "fal fa-circle")"></i>
                        One number
                    </li>
                    <li class="@(Input.Password?.Any(c => "@$!%*?&".Contains(c)) == true ? "requirement-met" : "")">
                        <i class="@(Input.Password?.Any(c => "@$!%*?&".Contains(c)) == true ? "fal fa-check-circle" : "fal fa-circle")"></i>
                        One special character
                    </li>
                </ul>
            </div>

            <button type="submit" class="auth-button">
                <span>Reset Password</span>
                <i class="fal fa-key"></i>
            </button>
        </EditForm>

        <div class="auth-footer">
            <p>Remember your password?</p>
            <a href="Account/Login" class="auth-link">Back to login</a>
        </div>
    </div>
</div>

<style>
    .password-requirements {
        background-color: var(--subtle-bg);
        border-radius: var(--border-radius-lg);
        padding: var(--spacing-4);
        margin-bottom: var(--spacing-4);
        border: 1px solid var(--border-light);
    }

        .password-requirements h4 {
            font-size: var(--font-size-base);
            font-weight: 600;
            margin-bottom: var(--spacing-3);
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: var(--spacing-2);
        }

            .password-requirements h4 i {
                color: var(--primary);
            }

    .requirements-list {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: var(--spacing-3);
        list-style: none;
        padding: 0;
        margin: 0;
    }

        .requirements-list li {
            display: flex;
            align-items: center;
            gap: var(--spacing-2);
            color: var(--text-secondary);
            font-size: var(--font-size-sm);
            transition: all 0.2s ease;
        }

            .requirements-list li i {
                font-size: var(--font-size-base);
                color: var(--text-muted);
                transition: all 0.2s ease;
            }

    .requirement-met {
        color: var(--success) !important;
    }

        .requirement-met i {
            color: var(--success) !important;
        }
</style>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}