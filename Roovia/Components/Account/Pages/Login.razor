@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Roovia.Data
@using Roovia.Models.Users
@using Roovia.Components.Layout

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@layout BlankLayout

<PageTitle>Log in to Roovia</PageTitle>

<div class="login-page">
    <div class="login-container">
        <div class="login-sidebar">
            <div class="login-content-wrapper">
                <div class="login-logo-container">
                    <img src="/images/roovia-logo.png" alt="Roovia Logo" class="login-logo">
                </div>

                <div class="login-header">
                    <h1>Welcome Back</h1>
                    <p>Log in to access your estate management system</p>
                </div>

                <div class="login-form-container">
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" class="login-form">
                        <DataAnnotationsValidator />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="login-validation-error">
                                <i class="fal fa-exclamation-circle"></i>
                                <span>@errorMessage</span>
                            </div>
                        }

                        <div class="form-group">
                            <label for="Input.Email" class="form-label">Email Address</label>
                            <div class="input-with-icon">
                                <i class="fal fa-envelope"></i>
                                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            </div>
                            <ValidationMessage For="() => Input.Email" class="validation-message" />
                        </div>

                        <div class="form-group">
                            <div class="password-label-wrapper">
                                <label for="Input.Password" class="form-label">Password</label>
                                <a href="Account/ForgotPassword" class="forgot-password-link">Forgot password?</a>
                            </div>
                            <div class="input-with-icon">
                                <i class="fal fa-lock-alt"></i>
                                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Enter your password" />
                            </div>
                            <ValidationMessage For="() => Input.Password" class="validation-message" />
                        </div>

                        <div class="remember-me-container">
                            <label class="remember-me-label">
                                <InputCheckbox @bind-Value="Input.RememberMe" class="remember-me-checkbox" id="rememberMe" />
                                <span class="remember-me-checkbox-custom"></span>
                                <span>Remember me</span>
                            </label>
                        </div>

                        <div class="login-actions">
                            <button type="submit" class="login-button">
                                <span>Log in</span>
                                <i class="fal fa-arrow-right"></i>
                            </button>
                        </div>
                    </EditForm>

                    <div class="login-footer">
                        <p>Don't have an account?</p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="register-link">
                            Create an account <i class="fal fa-user-plus"></i>
                        </a>
                    </div>

                    <div class="login-help">
                        <a href="Account/ResendEmailConfirmation" class="help-link">
                            <i class="fal fa-envelope-open-text"></i>
                            <span>Resend email confirmation</span>
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <div class="login-banner">
            <div class="banner-content">
                <div class="banner-text">
                    <h2>Estate Management Simplified</h2>
                    <p>Streamline your property management processes with our comprehensive all-in-one platform.</p>
                </div>
                <div class="banner-features">
                    <div class="feature-item">
                        <div class="feature-icon">
                            <i class="fal fa-building"></i>
                        </div>
                        <div class="feature-text">
                            <h3>Property Management</h3>
                            <p>Easily manage your entire property portfolio in one place</p>
                        </div>
                    </div>
                    <div class="feature-item">
                        <div class="feature-icon">
                            <i class="fal fa-chart-line"></i>
                        </div>
                        <div class="feature-text">
                            <h3>Analytics Dashboard</h3>
                            <p>Gain insights with comprehensive reporting tools</p>
                        </div>
                    </div>
                    <div class="feature-item">
                        <div class="feature-icon">
                            <i class="fal fa-users"></i>
                        </div>
                        <div class="feature-text">
                            <h3>Client Management</h3>
                            <p>Maintain strong relationships with integrated CRM features</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="banner-overlay"></div>
        </div>
    </div>
</div>

<style>
    /* Modern Login Page Styles */
    .login-page {
        min-height: 100vh;
        display: flex;
        align-items: stretch;
        background-color: var(--subtle-bg);
        font-family: var(--font-sans);
    }

    .login-container {
        display: flex;
        width: 100%;
        min-height: 100vh;
        position: relative;
    }

    /* Login Sidebar (Form Side) */
    .login-sidebar {
        width: 45%;
        background-color: var(--content-bg);
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        z-index: 10;
        border-right: 1px solid var(--border-divider);
        box-shadow: var(--shadow-lg);
    }

    .login-content-wrapper {
        width: 100%;
        max-width: 450px;
        padding: var(--spacing-8);
        animation: fadeSlideIn 0.6s ease-out;
    }

    .login-logo-container {
        text-align: center;
        margin-bottom: var(--spacing-6);
    }

    .login-logo {
        height: 60px;
        margin: 0 auto;
        animation: logoEntrance 1s ease-out;
    }

    .login-header {
        text-align: center;
        margin-bottom: var(--spacing-6);
    }

        .login-header h1 {
            font-size: var(--font-size-3xl);
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: var(--spacing-2);
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: fadeIn 0.8s ease-out 0.3s both;
        }

        .login-header p {
            color: var(--text-secondary);
            font-size: var(--font-size-base);
            animation: fadeIn 0.8s ease-out 0.5s both;
        }

    /* Login Form Styles */
    .login-form-container {
        background-color: var(--content-bg);
        border-radius: var(--border-radius-lg);
        animation: fadeIn 0.8s ease-out 0.7s both;
    }

    .login-validation-error {
        display: flex;
        align-items: center;
        padding: var(--spacing-3);
        border-radius: var(--border-radius-md);
        background-color: var(--danger-bg);
        color: var(--danger);
        margin-bottom: var(--spacing-4);
        font-size: var(--font-size-sm);
        border: 1px solid var(--danger-border-light);
        animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
    }

        .login-validation-error i {
            margin-right: var(--spacing-2);
            font-size: var(--font-size-lg);
        }

    .form-group {
        margin-bottom: var(--spacing-4);
    }

    .form-label {
        display: block;
        font-size: var(--font-size-sm);
        font-weight: 500;
        color: var(--text-primary);
        margin-bottom: var(--spacing-1);
    }

    .input-with-icon {
        position: relative;
    }

        .input-with-icon i {
            position: absolute;
            left: var(--spacing-3);
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted);
            transition: color 0.2s ease;
        }

    .form-control {
        width: 100%;
        padding: var(--spacing-3) var(--spacing-3) var(--spacing-3) calc(var(--spacing-6) + 4px);
        border: 1.5px solid var(--border-divider);
        border-radius: var(--border-radius-md);
        background-color: var(--input-bg);
        color: var(--text-primary);
        font-size: var(--font-size-base);
        transition: all 0.2s ease;
        padding-left: 2.5rem;
    }

        .form-control:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.2);
            outline: none;
        }

            .form-control:focus + i {
                color: var(--primary);
            }

    .validation-message {
        color: var(--danger);
        font-size: var(--font-size-xs);
        margin-top: var(--spacing-1);
        display: flex;
        align-items: center;
        gap: var(--spacing-1);
    }

        .validation-message::before {
            content: "•";
            color: var(--danger);
        }

    .password-label-wrapper {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--spacing-1);
    }

    .forgot-password-link {
        font-size: var(--font-size-xs);
        color: var(--primary);
        text-decoration: none;
        transition: all 0.2s ease;
    }

        .forgot-password-link:hover {
            color: var(--primary-hover);
            transform: translateY(-1px);
            text-decoration: underline;
        }

    /* Remember Me Checkbox */
    .remember-me-container {
        margin-bottom: var(--spacing-5);
    }

    .remember-me-label {
        display: flex;
        align-items: center;
        cursor: pointer;
        font-size: var(--font-size-sm);
        color: var(--text-secondary);
        user-select: none;
    }

    .remember-me-checkbox {
        position: absolute;
        opacity: 0;
        cursor: pointer;
        height: 0;
        width: 0;
    }

    .remember-me-checkbox-custom {
        height: 18px;
        width: 18px;
        background-color: var(--input-bg);
        border: 1.5px solid var(--border-divider);
        border-radius: 4px;
        margin-right: var(--spacing-2);
        position: relative;
        transition: all 0.2s ease;
        display: inline-block;
    }

    .remember-me-checkbox:checked ~ .remember-me-checkbox-custom {
        background-color: var(--primary);
        border-color: var(--primary);
    }

    .remember-me-checkbox-custom:after {
        content: "";
        position: absolute;
        display: none;
        left: 5px;
        top: 1px;
        width: 5px;
        height: 10px;
        border: solid white;
        border-width: 0 2px 2px 0;
        transform: rotate(45deg);
    }

    .remember-me-checkbox:checked ~ .remember-me-checkbox-custom:after {
        display: block;
    }

    /* Login Button */
    .login-actions {
        margin-bottom: var(--spacing-6);
    }

    .login-button {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        padding: var(--spacing-3) var(--spacing-4);
        background: var(--primary-gradient);
        color: white;
        border: none;
        border-radius: var(--border-radius-md);
        font-weight: 600;
        font-size: var(--font-size-base);
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(var(--primary-rgb), 0.2);
    }

        .login-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(var(--primary-rgb), 0.3);
        }

        .login-button:active {
            transform: translateY(0);
            box-shadow: 0 2px 8px rgba(var(--primary-rgb), 0.3);
        }

        .login-button i {
            margin-left: var(--spacing-2);
            transition: transform 0.2s ease;
        }

        .login-button:hover i {
            transform: translateX(4px);
        }

        .login-button::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 5px;
            height: 5px;
            background: rgba(255, 255, 255, 0.5);
            opacity: 0;
            border-radius: 100%;
            transform: scale(1) translate(-50%, -50%);
            transform-origin: 50% 50%;
        }

        .login-button:active::after {
            animation: ripple 0.6s ease-out;
        }

    /* Login Footer */
    .login-footer {
        text-align: center;
        margin-bottom: var(--spacing-5);
        padding-bottom: var(--spacing-5);
        border-bottom: 1px solid var(--border-divider);
    }

        .login-footer p {
            font-size: var(--font-size-sm);
            color: var(--text-secondary);
            margin-bottom: var(--spacing-2);
        }

    .register-link {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        color: var(--primary);
        font-weight: 500;
        text-decoration: none;
        transition: all 0.2s ease;
    }

        .register-link:hover {
            color: var(--primary-hover);
            transform: translateY(-1px);
            text-decoration: underline;
        }

        .register-link i {
            margin-left: var(--spacing-1);
            font-size: var(--font-size-sm);
        }

    .login-help {
        text-align: center;
    }

    .help-link {
        display: inline-flex;
        align-items: center;
        font-size: var(--font-size-xs);
        color: var(--text-muted);
        text-decoration: none;
        transition: all 0.2s ease;
    }

        .help-link:hover {
            color: var(--text-secondary);
        }

        .help-link i {
            margin-right: var(--spacing-1);
        }

    /* Banner Side */
    .login-banner {
        flex: 1;
        background: url('/images/login-bg.png') no-repeat center center;
        background-size: cover;
        position: relative;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: var(--spacing-8);
        overflow: hidden;
    }

    .banner-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, rgba(var(--primary-rgb), 0.95), rgba(var(--secondary-rgb), 0.85));
        z-index: 1;
    }

    .banner-content {
        position: relative;
        z-index: 2;
        max-width: 500px;
        animation: fadeSlideRight 0.8s ease-out 0.5s both;
    }

    .banner-text {
        margin-bottom: var(--spacing-8);
    }

        .banner-text h2 {
            font-size: var(--font-size-3xl);
            font-weight: 700;
            margin-bottom: var(--spacing-4);
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }

        .banner-text p {
            font-size: var(--font-size-lg);
            opacity: 1;
            margin-bottom: 0;
            color: white;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.4);
        }

    .banner-features {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-6);
    }

    .feature-item {
        display: flex;
        align-items: flex-start;
        gap: var(--spacing-3);
    }

    .feature-icon {
        background-color: rgba(255, 255, 255, 0.2);
        width: 48px;
        height: 48px;
        min-width: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: var(--font-size-xl);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(5px);
    }

    .feature-text h3 {
        font-size: var(--font-size-lg);
        font-weight: 600;
        margin-bottom: var(--spacing-1);
    }

    .feature-text p {
        font-size: var(--font-size-sm);
        opacity: 1;
        margin-bottom: 0;
        color: rgba(255, 255, 255, 0.95);
    }

    /* Animations */
    @@keyframes fadeSlideIn {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    @@keyframes fadeSlideRight {
        from

    {
        opacity: 0;
        transform: translateX(-20px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    @@keyframes logoEntrance {
        0%

    {
        opacity: 0;
        transform: translateY(-20px);
    }

    50% {
        opacity: 1;
        transform: translateY(10px);
    }

    100% {
        transform: translateY(0);
    }

    }

    @@keyframes ripple {
        0%

    {
        transform: scale(0) translate(-50%, -50%);
        opacity: 0.6;
    }

    100% {
        transform: scale(25) translate(-3%, -3%);
        opacity: 0;
    }

    }

    @@keyframes shake {
        10%, 90%

    {
        transform: translateX(-1px);
    }

    20%, 80% {
        transform: translateX(2px);
    }

    30%, 50%, 70% {
        transform: translateX(-2px);
    }

    40%, 60% {
        transform: translateX(2px);
    }

    }

    /* Responsive Adjustments */
    @@media (max-width: 1200px) {
        .login-sidebar

    {
        width: 50%;
    }

    }

    @@media (max-width: 992px) {
        .login-container

    {
        flex-direction: column-reverse;
    }

    .login-sidebar {
        width: 100%;
        min-height: auto;
        border-right: none;
    }

    .login-content-wrapper {
        padding: var(--spacing-6);
        max-width: 500px;
    }

    .login-banner {
        min-height: 40vh;
        padding: var(--spacing-5);
    }

    }

    @@media (max-width: 576px) {
        .login-content-wrapper

    {
        padding: var(--spacing-4);
    }

    .login-header h1 {
        font-size: var(--font-size-2xl);
    }

    .banner-text h2 {
        font-size: var(--font-size-2xl);
    }

    .banner-features {
        display: none;
    }

    }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Invalid email or password. Please try again.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}