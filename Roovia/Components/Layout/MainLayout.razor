@using Roovia.Components.Elements
@using Roovia.Interfaces
@using Roovia.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUser UserService

<CascadingValue Value="CurrentUser">
    <div class="roovia-page" id="app-container">
        <div class="roovia-sidebar" id="sidebarContainer">
            <NavMenu CurrentUser="@CurrentUser" />
        </div>

        <main class="roovia-main">
            <div class="roovia-content">
                <div class="roovia-content-container">
                    @Body
                </div>
            </div>
        </main>

        <!-- Mobile menu toggle button - MOVED OUTSIDE SIDEBAR -->
        <button id="mobile-menu-toggle" class="roovia-mobile-menu-button" onclick="toggleMobileMenu(event)">
            <i class="fal fa-bars"></i>
        </button>
    </div>
</CascadingValue>

<div id="blazor-error-ui" data-nosnippet>
    <div class="roovia-alert roovia-alert-danger">
        <div class="roovia-alert-content">
            <i class="fal fa-exclamation-triangle"></i>
            <div>
                <div class="roovia-alert-title">An unhandled error has occurred.</div>
                <div class="d-flex gap-3 mt-2">
                    <a href="." class="roovia-btn roovia-btn-sm roovia-btn-danger">Reload</a>
                    <span class="dismiss roovia-btn roovia-btn-sm roovia-btn-secondary">Dismiss</span>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ApplicationUser? CurrentUser { get; set; }
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserAsync();
        await base.OnInitializedAsync();
    }

    private async Task GetCurrentUserAsync()
    {
        try
        {
            // Get the authentication state
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                // Get user ID from claims
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                if (!string.IsNullOrEmpty(userId))
                {
                    // Get full user details from the service
                    var response = await UserService.GetUserById(userId);

                    if (response.ResponseInfo.Success && response.Response != null)
                    {
                        CurrentUser = response.Response as ApplicationUser;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Log the error or handle it according to your application's requirements
            Console.WriteLine($"Error getting user data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}

<script>
    // ====== Theme Toggle ======
    function toggleTheme() {
        const container = document.documentElement; // Use HTML root element
        const icon = document.getElementById('theme-toggle-icon');

        if (container.classList.contains('theme-dark')) {
            container.classList.remove('theme-dark');
            localStorage.setItem('theme', 'light');
            if (icon) {
                icon.classList.remove('fa-sun');
                icon.classList.add('fa-moon');
            }
        } else {
            container.classList.add('theme-dark');
            localStorage.setItem('theme', 'dark');
            if (icon) {
                icon.classList.remove('fa-moon');
                icon.classList.add('fa-sun');
            }
        }
    }

    // ====== Toggle sidebar collapsed state ======
    function toggleSidebar(event) {
        if (event) event.stopPropagation();

        const sidebarContainer = document.getElementById('sidebarContainer');
        const icon = document.getElementById('desktop-toggle-icon');
        const externalIcon = document.getElementById('sidebar-toggle-icon');

        if (!sidebarContainer) return;

        if (sidebarContainer.classList.contains('collapsed')) {
            sidebarContainer.classList.remove('collapsed');
            localStorage.setItem('sidebar_state', 'expanded');
            if (icon) {
                icon.classList.remove('fa-angle-double-right');
                icon.classList.add('fa-angle-double-left');
            }
            if (externalIcon) {
                externalIcon.classList.remove('fa-angle-double-right');
                externalIcon.classList.add('fa-angle-double-left');
            }
        } else {
            sidebarContainer.classList.add('collapsed');
            localStorage.setItem('sidebar_state', 'collapsed');
            if (icon) {
                icon.classList.remove('fa-angle-double-left');
                icon.classList.add('fa-angle-double-right');
            }
            if (externalIcon) {
                externalIcon.classList.remove('fa-angle-double-left');
                externalIcon.classList.add('fa-angle-double-right');
            }
        }

        // Close user menu when sidebar state changes
        closeUserMenu();
    }

    // ====== Toggle mobile menu ======
    function toggleMobileMenu(event) {
        if (event) event.stopPropagation();

        const sidebarContainer = document.getElementById('sidebarContainer');
        if (!sidebarContainer) return;

        if (sidebarContainer.classList.contains('mobile-open')) {
            sidebarContainer.classList.remove('mobile-open');
        } else {
            sidebarContainer.classList.add('mobile-open');
        }

        // Close user menu when mobile menu toggles
        closeUserMenu();
    }

    // Function for NavMenu to close mobile menu
    function closeNavMenuMobile(event) {
        if (event) event.stopPropagation();

        const sidebarContainer = document.getElementById('sidebarContainer');
        if (!sidebarContainer) return;

        sidebarContainer.classList.remove('mobile-open');

        // Close user menu when mobile menu closes
        closeUserMenu();
    }

    // ====== User Menu Functions ======
    function toggleUserMenu(event) {
        if (event) event.stopPropagation();

        const userMenu = document.getElementById('userMenu');
        const userDropdownIcon = document.querySelector('.roovia-user-dropdown-icon');

        if (!userMenu) return;

        if (userMenu.classList.contains('show')) {
            userMenu.classList.remove('show');
            userDropdownIcon?.classList.remove('active');
            removeUserMenuBackdrop();
        } else {
            userMenu.classList.add('show');
            userDropdownIcon?.classList.add('active');
            createUserMenuBackdrop();
        }
    }

    function createUserMenuBackdrop() {
        // Remove any existing backdrop
        removeUserMenuBackdrop();

        // Create new backdrop
        const backdrop = document.createElement('div');
        backdrop.className = 'roovia-user-menu-backdrop show';
        backdrop.id = 'userMenuBackdrop';
        backdrop.addEventListener('click', closeUserMenu);

        document.body.appendChild(backdrop);
    }

    function removeUserMenuBackdrop() {
        const backdrop = document.getElementById('userMenuBackdrop');
        if (backdrop) {
            backdrop.removeEventListener('click', closeUserMenu);
            backdrop.remove();
        }
    }

    function closeUserMenu() {
        const userMenu = document.getElementById('userMenu');
        const userDropdownIcon = document.querySelector('.roovia-user-dropdown-icon');

        if (userMenu) {
            userMenu.classList.remove('show');
            userDropdownIcon?.classList.remove('active');
        }

        removeUserMenuBackdrop();
    }

    // ====== Page Initialization ======
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize theme
        const savedTheme = localStorage.getItem('theme');
        const themeIcon = document.getElementById('theme-toggle-icon');

        if (savedTheme === 'dark') {
            document.documentElement.classList.add('theme-dark');
            if (themeIcon) {
                themeIcon.classList.remove('fa-moon');
                themeIcon.classList.add('fa-sun');
            }
        }

        // Initialize sidebar state from localStorage ONLY on desktop
        const savedSidebarState = localStorage.getItem('sidebar_state');
        const sidebarContainer = document.getElementById('sidebarContainer');
        const icon = document.getElementById('desktop-toggle-icon');
        const externalIcon = document.getElementById('sidebar-toggle-icon');

        if (window.innerWidth > 991 && savedSidebarState === 'collapsed' && sidebarContainer) {
            sidebarContainer.classList.add('collapsed');
            if (icon) {
                icon.classList.remove('fa-angle-double-left');
                icon.classList.add('fa-angle-double-right');
            }
            if (externalIcon) {
                externalIcon.classList.remove('fa-angle-double-left');
                externalIcon.classList.add('fa-angle-double-right');
            }
        }

        // Setup event listeners for clicks outside mobile menu
        document.addEventListener('click', function(e) {
            const sidebarContainer = document.getElementById('sidebarContainer');
            const mobileToggle = document.getElementById('mobile-menu-toggle');

            // Close mobile menu when clicking outside (but not on the toggle button)
            if (window.innerWidth <= 991 &&
                sidebarContainer &&
                sidebarContainer.classList.contains('mobile-open') &&
                e.target !== mobileToggle &&
                !mobileToggle.contains(e.target) &&
                !sidebarContainer.contains(e.target)) {

                sidebarContainer.classList.remove('mobile-open');
            }

            // Close user menu when clicking outside
            const userMenu = document.getElementById('userMenu');
            const userProfile = document.querySelector('.roovia-user-profile');

            if (userMenu &&
                userMenu.classList.contains('show') &&
                !userMenu.contains(e.target) &&
                !userProfile.contains(e.target)) {
                closeUserMenu();
            }
        });

        // Close menus on ESC key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeUserMenu();

                const sidebarContainer = document.getElementById('sidebarContainer');
                if (sidebarContainer && sidebarContainer.classList.contains('mobile-open')) {
                    sidebarContainer.classList.remove('mobile-open');
                }
            }
        });
    });

    // Responsive behavior
    window.addEventListener('resize', function() {
        const sidebarContainer = document.getElementById('sidebarContainer');

        // Auto-close mobile menu on resize to desktop
        if (window.innerWidth > 991 && sidebarContainer && sidebarContainer.classList.contains('mobile-open')) {
            sidebarContainer.classList.remove('mobile-open');
        }

        // Reset sidebar state on mobile
        if (window.innerWidth <= 991 && sidebarContainer && sidebarContainer.classList.contains('collapsed')) {
            sidebarContainer.classList.remove('collapsed');
            const icon = document.getElementById('desktop-toggle-icon');
            const externalIcon = document.getElementById('sidebar-toggle-icon');
            if (icon) {
                icon.classList.remove('fa-angle-double-right');
                icon.classList.add('fa-angle-double-left');
            }
            if (externalIcon) {
                externalIcon.classList.remove('fa-angle-double-right');
                externalIcon.classList.add('fa-angle-double-left');
            }
        }

        // Close user menu on resize
        closeUserMenu();
    });
</script>